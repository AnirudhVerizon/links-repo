
OnSearchChangeListener
interface OnSearchChangeListener {
//    fun habSearchChange(searchTextFieldAtomEnum: SearchTextFieldAtomEnum,query: String,focus:Boolean)
    fun habSearchFocus(searchTextFieldAtomEnum: SearchTextFieldAtomEnum)
    fun habSearchResults(baseResponse: BaseResponse)
    fun showOrHideOverlay(show:Boolean)
    fun hideSearchList(hide:Boolean)
    fun showVoiceInput()
}

HABContentMoleculeView

        iv_voice_input?.setOnClickListener {
//            SearchUtil.startSpeechRecognition(this.context, sharedPreferencesUtil) { inputText ->
//
//            }
        }


fun habSearchListener(onSearchChangeListener: OnSearchChangeListener) {
        onSearchListener = onSearchChangeListener
    }

    override fun onFocusChange(p0: View?, focus: Boolean) {
        if (focus) {
            iv_voice_input?.visibility = View.VISIBLE
            iv_assistant?.visibility = View.GONE
            globalSearchViewPresenter?.pauseAndResumeSearchRequest(false)
            if (!scope.isActive) {
                scope = CoroutineScope(SupervisorJob() + Dispatchers.Default)
                observerSearch()
            }
            isSearchActive = true
            onSearchListener?.showOrHideOverlay(true)
            searchResultsView?.text?.toString()?.let {
                if (it.isNotEmpty()) {
                    performApiCall(it)
                }
            }
        }
    }

    fun clearSearchFocus() {
        searchResultsView?.clearFocus()
    }

    fun showFabIcon(){
        iv_voice_input?.visibility = View.GONE
        iv_assistant?.visibility = View.VISIBLE
    }

    private fun searchTextFlow(): Flow<String> = callbackFlow {
        val watcher = object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                trySend(s.toString()).isSuccess
            }

            override fun afterTextChanged(s: Editable?) {}
        }
        searchResultsView?.addTextChangedListener(watcher)
        awaitClose { searchResultsView?.removeTextChangedListener(watcher) }
    }

    private fun observerSearch() {
        searchTextFlow().debounce(200).filter {
            if (it.isEmpty()) {
                onSearchListener?.hideSearchList(true)
                onSearchListener?.showOrHideOverlay(true)
            }
            it.isNotEmpty() && isSearchActive
        }.distinctUntilChanged().onEach { query -> performApiCall(query) }.launchIn(scope)
    }

    private fun performApiCall(query: String) {
        if (!isSearchActive) {
            return
        }
        val requestParams = hashMapOf<String, Any>(
            "searchInput" to query
        )
        searchJob?.cancel()
        searchJob = scope.launch {
            searchAction?.let {
                globalSearchViewPresenter?.getOverlayData(it, requestParams) { baseResponse ->
                    if (searchResultsView?.text.toString().isNotEmpty()) {
                        onSearchListener?.habSearchResults(baseResponse)
                    } else {
                        onSearchListener?.hideSearchList(true)
                    }
                }
            }
        }
    }

    private fun performDoneApiCall(query: String) {
        iv_voice_input?.visibility = View.GONE
        iv_assistant?.visibility = View.VISIBLE
        globalSearchViewPresenter?.pauseAndResumeSearchRequest(true)
        searchJob?.cancel()
        scope.cancel()
        onSearchListener?.hideSearchList(true)
        onSearchListener?.showOrHideOverlay(false)
        isSearchActive = false
        val requestParams = hashMapOf<String, Any>(
            "searchInput" to query
        )
        searchDoneAction?.let {
            globalSearchViewPresenter?.executeSearchDoneAction(it, requestParams)
        }
    }


BaseActivity.Java
private void showRecentSearches() {
        searchOverlayView.removeAllViews();
        searchOverlayView.setVisibility(View.VISIBLE);
        searchListTemplateView.setVisibility(View.GONE);
        String searchData = sharedPreferencesUtil.getNSearchList();
        if (StringUtils.isEmpty(searchData)) {
            searchOverlayView.setBackgroundColor(
                    ContextCompat.getColor(
                            this,
                            R.color.white
                    )
            );
            return;
        }
        searchOverlayView.removeAllViews();
        Arrays.stream(searchData.split(",")).forEach(searchText -> {
            View itemLayout = LayoutInflater.from(this).inflate(R.layout.recent_search_layout_inflate, searchOverlayView, false);
            MFTextView mfTextView = itemLayout.findViewById(R.id.tv_recent_view);
            mfTextView.setText(searchText);
            ImageView imageView = itemLayout.findViewById(R.id.close_icon);
            mfTextView.setOnClickListener(v -> {
                searchOverlayView.setVisibility(View.GONE);
                searchListTemplateView.setVisibility(View.GONE);
                iv_hab_back.setVisibility(View.GONE);
                habContentMoleculeView.showFabIcon();
                if (habContentModel != null && habContentModel.getSearchDoneActionModel() != null) {
                    HashMap<String, Object> requestParams = new HashMap<>();
                    requestParams.put("searchInput", searchText.trim());
                    requestParams.put("currentPage", "Done");
                    executeAction(habContentModel.getSearchDoneActionModel(), true, requestParams);
                }
            });
            imageView.setOnClickListener(v -> {
                SearchUtil.Companion.deleteRecentSearch(sharedPreferencesUtil, searchText.trim());
                showRecentSearches();
            });
            searchOverlayView.addView(itemLayout);
        });
    }

    private void resetHabSearchView() {
        iv_hab_back.setVisibility(View.GONE);
        habContentMoleculeView.showFabIcon();
        if (searchOverlayView != null) {
            searchOverlayView.removeAllViews();
        }
        searchListPresenter.hideKeyBoard(this);
        if (habContentMoleculeView != null) {
            habContentMoleculeView.clearSearchFocus();
        }
        hideSearchOverlay();
        mToolbar.setVisibility(View.VISIBLE);
    }


    private void hideSearchOverlay() {
        searchOverlayView.setVisibility(View.GONE);
        searchListTemplateView.setVisibility(View.GONE);
    }

    private void showOverlay() {
        mToolbar.setVisibility(View.GONE);
        searchOverlayView.setVisibility(View.VISIBLE);
    }

    @Override
    public void habSearchResults(@NonNull BaseResponse baseResponse) {
        if (baseResponse instanceof AtomicMoleculeListTemplateModel) {
            AtomicMoleculeListPageModel pagemodel = (AtomicMoleculeListPageModel) ((AtomicMoleculeListTemplateModel) baseResponse).getPageData();
            searchListTemplateView.setOnListItemClickListener(delegateModel -> {
                searchOverlayView.setVisibility(View.GONE);
                searchListTemplateView.setVisibility(View.GONE);
                iv_hab_back.setVisibility(View.GONE);
                habContentMoleculeView.showFabIcon();
                if (delegateModel.getActionModel() != null) {
                    Action action = ActionModelConverter.Companion.convertToAction(delegateModel.getActionModel());
                    if(action.getExtraParams()!=null && action.getExtraParams().containsKey("browserUrl")){
                        Uri uri = Uri.parse(action.getExtraParams().get("browserUrl"));
                        String query = uri.getQueryParameter("q");
                        if(StringUtils.isNotEmpty(query)){
                            SearchUtil.Companion.saveRecentSearches(sharedPreferencesUtil,query);
                        }
                    }
                    searchListPresenter.executeAction(action);
                }
            });
            assert pagemodel != null;
            if (pagemodel.getListTemplate() != null) {
                searchListTemplateView.applyStyle(pagemodel.getListTemplate());
                searchOverlayView.setVisibility(View.GONE);
                searchListTemplateView.setVisibility(View.VISIBLE);
            }
        }
    }

    @Override
    public void showOrHideOverlay(boolean show) {
        runOnUiThread(() -> {
            if (show) {
                searchOverlayView.setVisibility(View.VISIBLE);
                mToolbar.setVisibility(View.GONE);
                searchListTemplateView.setVisibility(View.GONE);
                iv_hab_back.setVisibility(View.VISIBLE);
                showRecentSearches();
            } else {
                searchOverlayView.setVisibility(View.GONE);
                searchListPresenter.hideKeyBoard(this);
                habContentMoleculeView.showFabIcon();
                iv_hab_back.setVisibility(View.GONE);
                mToolbar.setVisibility(View.VISIBLE);
            }
        });
    }

    @Override
    public void hideSearchList(boolean hide) {
        runOnUiThread(() -> {
            if(hide){
                searchListTemplateView.setVisibility(View.GONE);
            }
        });
    }

    @Override
    public void showVoiceInput() {
        SearchUtil.Companion.startSpeechRecognition();
    }
}


SearchUtil
class SearchUtil {
    companion object {
        fun saveRecentSearches(
            sharedPreferencesUtil: SharedPreferencesUtil?,
            searchText: String
        ) {
            val searchData = sharedPreferencesUtil?.nSearchList
            if (searchData?.isEmpty() == true) {
                sharedPreferencesUtil.nSearchList = "$searchText,"
            } else {
                val newSearchData = StringBuilder(searchText)
                searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.forEach {
                    newSearchData.append(",$it")
                }
                sharedPreferencesUtil?.nSearchList = newSearchData.toString()

                val maxSearches = 5
                val limitedSearchData =
                    newSearchData.toString().split(",").take(maxSearches).joinToString(",")
                sharedPreferencesUtil?.nSearchList = "$limitedSearchData,"
            }
        }

        // Deleting a specific recent search
        fun deleteRecentSearch(
            sharedPreferencesUtil: SharedPreferencesUtil?,
            searchText: String
        ): Boolean {
            val searchData = sharedPreferencesUtil?.nSearchList
            val updatedSearchData =
                searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }
                    ?.joinToString(",")
            sharedPreferencesUtil?.nSearchList = updatedSearchData?.plus(",")
            return true  // Refreshing the list after deletion
        }

        fun startSpeechRecognition(
            context: Context?,
            sharedPreferencesUtil: SharedPreferencesUtil?,
            executeAction: (spokenText: String) -> Unit
        ) {

            context?.let { ctx ->
                val dialog = Dialog(ctx)
                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
                dialog.setContentView(R.layout.dialog_custom_mic)
                val window = dialog.window
                window?.setLayout(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
                window?.setGravity(Gravity.BOTTOM)
                window?.setBackgroundDrawableResource(android.R.color.transparent)
                val micImageView: ImageView = dialog.findViewById(R.id.imgMicIcon)
                val promptTextView: TextView = dialog.findViewById(R.id.tvPrompt)
                val spokenTextView: TextView = dialog.findViewById(R.id.tvSpokenText)
                dialog.show()
                val speechRecognizer = SpeechRecognizer.createSpeechRecognizer(ctx)
                val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                    putExtra(
                        RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM
                    )
                    putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                    putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")
                }
                dialog.setOnDismissListener {
                    speechRecognizer.stopListening()
                }
                speechRecognizer.setRecognitionListener(object : RecognitionListener {
                    override fun onReadyForSpeech(params: Bundle?) {}
                    override fun onBeginningOfSpeech() {}
                    override fun onRmsChanged(rmsdB: Float) {}
                    override fun onBufferReceived(buffer: ByteArray?) {}
                    override fun onEndOfSpeech() {}
                    override fun onError(error: Int) {
                        dialog.dismiss()
                    }
                    override fun onResults(results: Bundle?) {
                        results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
                            ?.let { result ->
                                val spokenText = result[0]
                                saveRecentSearches(sharedPreferencesUtil,spokenText)
                                spokenTextView.visibility = View.VISIBLE
                                spokenTextView.text = spokenText
                                micImageView.visibility = View.VISIBLE
                                Handler(Looper.getMainLooper()).postDelayed({
                                    executeAction(spokenText)
                                    dialog.dismiss()
                                }, 1500) // 1.5-second delay
                            }
                    }
                    override fun onPartialResults(partialResults: Bundle?) {}
                    override fun onEvent(eventType: Int, params: Bundle?) {}
                })
                try {
                    speechRecognizer.startListening(intent)
                } catch (e: ActivityNotFoundException) {
                    dialog.dismiss()
                }
            }
        }

    }
}




