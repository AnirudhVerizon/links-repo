package com.vzw.atomic.views.fragments

import android.app.Activity
import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.graphics.Typeface
import android.os.Handler
import android.os.Looper
import android.speech.RecognizerIntent
import android.text.TextUtils
import android.util.Log
import android.view.View
import android.view.accessibility.AccessibilityEvent
import android.view.inputmethod.InputMethodManager
import androidx.core.content.ContextCompat
import com.vzw.atomic.models.AtomicSearchListMoleculePageModel
import com.vzw.atomic.models.AtomicSearchMoleculeListTemplateModel
import com.vzw.atomic.models.base.AtomicBasePageModel
import com.vzw.atomic.presenters.SearchListPresenter
import com.vzw.hss.myverizon.atomic.models.atoms.ActionModel
import com.vzw.hss.myverizon.atomic.models.atoms.LabelAtomModel
import com.vzw.hss.myverizon.atomic.models.molecules.EyebrowHeadlineBodyLinkMoleculeModel
import com.vzw.hss.myverizon.atomic.models.molecules.ListLeftVariableIconAllTextLinkMoleculeModel
import com.vzw.hss.myverizon.atomic.models.molecules.TagMoleculeModel
import com.vzw.hss.myverizon.atomic.models.templates.ListTemplateModel
import com.vzw.hss.myverizon.atomic.views.adapters.AtomicDelegateAdapter
import com.vzw.hss.myverizon.atomic.views.architectureComponents.ClickLiveDataObject
import com.vzw.hss.myverizon.atomic.views.templates.ListTemplateView
import com.vzw.mobilefirst.MobileFirstApplication
import com.vzw.mobilefirst.R
import com.vzw.mobilefirst.commons.utils.AccessibilityUtils
import com.vzw.mobilefirst.commons.utils.SharedPreferencesUtil
import com.vzw.mobilefirst.commonviews.models.atomic.AtomicMoleculeListPageModel
import com.vzw.mobilefirst.commonviews.models.atomic.atoms.SearchTextFieldAtomModel
import com.vzw.mobilefirst.commonviews.utils.SearchTextFieldAtomEnum
import com.vzw.mobilefirst.commonviews.views.fragments.atomic.AtomicBaseFragment
import com.vzw.mobilefirst.commonviews.views.fragments.atomic.AtomicMoleculeListFragment
import com.vzw.mobilefirst.core.models.BaseResponse
import com.vzw.mobilefirst.core.models.Callback
import com.vzw.mobilefirst.core.net.cache.Key
import com.vzw.mobilefirst.setup.presenters.SetupBasePresenter
import de.greenrobot.event.EventBus
import javax.inject.Inject
import javax.inject.Named
import android.view.accessibility.AccessibilityManager
import android.widget.LinearLayout
import android.widget.LinearLayout.LayoutParams
import androidx.core.view.marginTop
import com.google.android.material.textfield.TextInputEditText
import com.vzw.android.component.ui.MFTextView

import com.vzw.mobilefirst.commonviews.models.atomic.AtomicMoleculeListTemplateModel
import com.vzw.mobilefirst.setup.assemblers.SetupConverterLoader
import com.vzw.mobilefirst.support.utils.SupportUtils
import org.apache.commons.lang3.StringUtils
import java.util.Locale


open class AtomicSearchMoleculeListFragment : AtomicMoleculeListFragment(),
    AtomicDelegateAdapter.OnItemClickListener {


    @Inject
    @Named("sticky")
    @JvmField
    var stickyEvent: EventBus? = null

    @Inject
    @JvmField
    var setupBasePresenter: SetupBasePresenter? = null

    @Inject
    @JvmField
    var sharedPreferencesUtil: SharedPreferencesUtil? = null

    var searchListTemplateView: ListTemplateView? = null

    var overlayView: LinearLayout? = null

    @Inject
    @JvmField
    var searchListPresenter: SearchListPresenter? = null

    var handler = Handler(Looper.getMainLooper())

    val KEY_SEARCH_TERM = "vzwi.mvmapp.intSearchTerm"

    var textFieldView: View? = null

    override fun getLayout(): Int {
        return R.layout.molecule_search_fragment
        return R.layout.hab_content_view
    }

    override fun <PageData : AtomicBasePageModel> setupScreenData(pageData: PageData) {
        this.pageData = pageData as AtomicSearchListMoleculePageModel
        val listTemplate = this.pageData!!.listTemplate
        searchListTemplateView?.visibility = View.GONE
        searchListTemplateView?.isFocusable = false
        overlayView?.visibility = View.GONE
        listTemplate?.list?.let {
            template?.onListItemClickListener = this
            template?.applyStyle(listTemplate)
            if (StringUtils.isNotEmpty(pageData.template) && pageData.template.equals(
                    SetupConverterLoader.MOLECULE_SEARCH_LIST
                )
            ) {
                textFieldView = template?.findViewById<TextInputEditText>(R.id.search_text_field)
                textFieldView?.let {
                    SupportUtils.showSoftKeyboard(textFieldView)
                }
            }
        }
    }

    override fun initializeObservers() {
        super.initializeObservers()
        clickLiveDataObserver = ClickLiveDataObserver()
        checkedChangedLiveDataObserver = CheckedChangedLiveDataObserver()
    }

    override fun injectFragment() {
        context?.let {
            MobileFirstApplication.getObjectGraph(it.applicationContext).inject(this)
        }
    }

    override fun initViews(rootView: View?) {
        super.initViews(rootView)
        searchListTemplateView = rootView?.findViewById(R.id.overlayListTemplate)
        overlayView = rootView?.findViewById(R.id.overlayView)
        overlayView?.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_NO
    }

    /**
     * Method to update search overlay when user types for search
     */
    protected open fun updateOverlay(baseResponse: BaseResponse) {
        if (StringUtils.isNotEmpty(pageData?.template) && pageData?.template.equals(
                SetupConverterLoader.MOLECULE_SEARCH_LIST
            )
        ) {
            baseResponse.let { it ->
                val listTemplateModel: AtomicMoleculeListTemplateModel? =
                    it as? AtomicMoleculeListTemplateModel

                listTemplateModel?.pageData?.let {
                    overLayViewData(it as AtomicMoleculeListPageModel)
                }

            }
        } else {
            baseResponse.let {
                val listTemplateModel: AtomicSearchMoleculeListTemplateModel? =
                    it as? AtomicSearchMoleculeListTemplateModel

                listTemplateModel?.pageData?.let {
                    overLayViewData(it as AtomicMoleculeListPageModel)
                }

            }
        }
    }

    protected fun overLayViewData(listTemplatePageModel: AtomicMoleculeListPageModel?) {
        searchListTemplateView?.onListItemClickListener = this
        listTemplatePageModel?.listTemplate?.let { listTemplate ->
            try {
                val manager: AccessibilityManager =
                    context?.getSystemService(Context.ACCESSIBILITY_SERVICE) as AccessibilityManager
                if (manager != null && manager.isEnabled) {
                    callAccessibilityVoiceOver(listTemplate)
                }
            } catch (e: Exception) {
                MobileFirstApplication.getLogHandler().e("Exc", "${e.localizedMessage}")
            }
            searchListTemplateView?.applyStyle(listTemplate)
            if (listTemplate.commonPropModel.backgroundColor == null) {
                context?.let {
                    searchListTemplateView?.setBackgroundColor(
                        ContextCompat.getColor(
                            it,
                            R.color.white
                        )
                    )
                }
            }
            searchListTemplateView?.layoutParams?.height = getOverlayHeight()
            overlayView?.visibility = View.VISIBLE
            searchListTemplateView?.visibility = View.VISIBLE
            searchListTemplateView?.isFocusable = true
            searchListTemplateView?.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED)
            searchListTemplateView?.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_YES
        }
    }

    /**
     * Method to show search overlay when user taps on search
     */
    fun showSearchOverlay() {
        val key = (this.pageData as? AtomicSearchListMoleculePageModel)?.searchEmptyAction?.pageType
        overlayView?.visibility = View.VISIBLE
        searchListTemplateView?.visibility = View.GONE
        cacheRepository.findByKey(Key(key))?.let {
            val listTemplateModel: AtomicSearchMoleculeListTemplateModel? =
                it as? AtomicSearchMoleculeListTemplateModel
            searchListTemplateView?.onListItemClickListener = this
            listTemplateModel?.pageData.let { pageData ->
                val listTemplatePageModel: AtomicMoleculeListPageModel? =
                    pageData as? AtomicMoleculeListPageModel
                listTemplatePageModel?.listTemplate?.let { listTemplate ->
                    searchListTemplateView?.applyStyle(listTemplate)
                    if (listTemplate.commonPropModel.backgroundColor == null) {
                        searchListTemplateView?.setBackgroundColor(
                            ContextCompat.getColor(
                                context!!,
                                R.color.white
                            )
                        )
                    }
                    searchListTemplateView?.layoutParams?.height = getOverlayHeight()
                    // overlayView?.visibility = View.VISIBLE
                    searchListTemplateView?.visibility = View.VISIBLE
                    searchListTemplateView?.isFocusable = true
                    searchListTemplateView?.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED)
                    searchListTemplateView?.importantForAccessibility =
                        View.IMPORTANT_FOR_ACCESSIBILITY_YES
                }
            }

        }

    }

    fun hideSearchOverlay() {
        overlayView?.visibility = View.GONE
        searchListTemplateView?.visibility = View.GONE
        searchListTemplateView?.isFocusable = false
    }


    private fun getOverlayHeight(): Int {
        context?.resources?.displayMetrics?.heightPixels?.let { return it * 50 / 100 }
        return 300 // default height
    }

    companion object {
        fun newInstance(): AtomicSearchMoleculeListFragment {
            return AtomicSearchMoleculeListFragment()
        }

    }

    override fun onResume() {
        super.onResume()
        if (!stickyEvent!!.isRegistered(this))
            stickyEvent!!.registerSticky(this)
    }

    override fun onPause() {
        super.onPause()
        stickyEvent!!.unregister(this)
    }

    open inner class ClickLiveDataObserver : AtomicBaseFragment.ClickLiveDataObserver() {

        var requestParams: HashMap<String, Any>? = null
        val runnable = Runnable { getOverlayData() }

        /**
         * Method to get overlay Data when user start typing
         */
        protected fun getOverlayData() {
            val model =
                (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)
            val action = model?.searchAction
            searchListPresenter?.getOverlayData(action, requestParams, getOnActionSuccessCallback())
        }

        override fun onChanged(it: ClickLiveDataObject?) {
            it ?: return

            val validRequestParams = !it.requestParams.isNullOrEmpty()
            requestParams = it.requestParams
            var action: ActionModel? = null

            if (it.model is ActionModel) {
                action = it.model!! as ActionModel
            } else if (it.model is SearchTextFieldAtomModel) {
                val model: SearchTextFieldAtomModel = it.model as SearchTextFieldAtomModel
                val inputDelay =
                    (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.inputDelay

                when (model.searchTextFieldEnum) {
                    SearchTextFieldAtomEnum.AFTER_TEXT_CHANGED -> {
                        if (TextUtils.isEmpty(model.text?.trim()) && model.hasFocus) {
                            showRecentSearches()
                        } else {
                            if ((model.text!!.trim()).length > 1) {
                                handler.removeCallbacks(runnable)
                                inputDelay?.let {
                                    handler.postDelayed(runnable, inputDelay)
                                } ?: kotlin.run {
                                    getOverlayData()
                                }
                            }
                        }
                        return
                    }

                    SearchTextFieldAtomEnum.EDIT_TEXT_ON_FOCUS -> {
                        if (TextUtils.isEmpty(model.text)) {
                            showRecentSearches()
                            Handler(Looper.getMainLooper()).postDelayed({
                                if (textFieldView != null) {
                                    val imm = this@AtomicSearchMoleculeListFragment.context?.getSystemService(
                                        Context.INPUT_METHOD_SERVICE
                                    ) as InputMethodManager
                                    imm.showSoftInput(
                                        textFieldView,
                                        InputMethodManager.SHOW_IMPLICIT
                                    )
                                }
                            }, 100)
                        } else {
                            if ((model.text!!.trim()).length > 1) {
                                handler.removeCallbacks(runnable)
                                inputDelay?.let {
                                    handler.postDelayed(runnable, inputDelay)
                                } ?: kotlin.run {
                                    getOverlayData()
                                }
                            }
                        }
                        return
                    }

                    SearchTextFieldAtomEnum.ON_CLOSE -> {
                        handler.removeCallbacks(runnable)
                        hideSearchOverlay()
                        hideKeyBoard()
                    }

                    SearchTextFieldAtomEnum.ON_SEARCH -> {
                        if (TextUtils.isEmpty(model.text.toString().trim()) || (!TextUtils.isEmpty(
                                model.text.toString().trim()
                            ) && model.text!!.length < 2)
                        ) {
                            return
                        }
                        if (searchListTemplateView?.visibility == View.VISIBLE) {
                            searchListTemplateView?.visibility = View.GONE
                            searchListTemplateView?.isFocusable = false
                            overlayView?.visibility = View.GONE
                        }
                        saveRecentSearches(model.text.toString().trim())
                        action =
                            (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                        action?.analyticsData?.put(KEY_SEARCH_TERM, model.text.toString().trim())
                    }

                    // New case for ON_VOICE to handle speech recognition
                    SearchTextFieldAtomEnum.ON_VOICE -> {
                        // Start Google Speech Recognizer

                        startSpeechRecognition()
                        Log.d("voicebtn","isclicked")
                        return
                    }
                }
            } else if (it.model is TagMoleculeModel) {
                val model: TagMoleculeModel = it.model as TagMoleculeModel
                action = model.action
                if (searchListTemplateView?.visibility == View.VISIBLE) {
                    searchListTemplateView?.visibility = View.GONE
                    searchListTemplateView?.isFocusable = false
                    overlayView?.visibility = View.GONE
                }
            } else {
                super.onChanged(it)
                return
            }

            action?.let { actionModel ->
                executeAction(actionModel, validRequestParams, it.requestParams)
            }
        }

        // Function to invoke speech recognizer
        private fun startSpeechRecognition() {
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")

            try {
                startActivityForResult(intent, 100)
            } catch (e: ActivityNotFoundException) {
                // Handle the error (Toast, log, etc.)
            }
        }

        // Handle the speech recognition result in your fragment
//        override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
//            super.onActivityResult(requestCode, resultCode, data)
//
//            if (requestCode == SPEECH_REQUEST_CODE && resultCode == Activity.RESULT_OK && data != null) {
//                val result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
//                result?.let {
//                    val spokenText = it[0]
//                    // Auto-populate the search text field with the spoken text
//                    search_text_field?.setText(spokenText)
//                    updateLiveData(SearchTextFieldAtomEnum.AFTER_TEXT_CHANGED)
//                }
//            }
//        }
//
//        companion object {
//            private const val SPEECH_REQUEST_CODE = 100
//        }
    }

//    open inner class ClickLiveDataObserver : AtomicBaseFragment.ClickLiveDataObserver() {
//
//
//
//        var requestParams: HashMap<String, Any>? = null
//
//        val runnable = Runnable { getOverlayData() }
//
//        /**
//         * Method to get overlay Data when user start typing
//         */
//        protected fun getOverlayData() {
//            val model =
//                (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)
//            val action = model?.searchAction
//            searchListPresenter?.getOverlayData(action, requestParams, getOnActionSuccessCallback())
//        }
//
//        override fun onChanged(it: ClickLiveDataObject?) {
//            it ?: return
//
//            val validRequestParams = !it.requestParams.isNullOrEmpty()
//            requestParams = it.requestParams
//            var action: ActionModel? = null
//
//            if (it.model is ActionModel) {
//                action = it.model!! as ActionModel
//
//            } else if (it.model is SearchTextFieldAtomModel) {
//                val model: SearchTextFieldAtomModel = it.model as SearchTextFieldAtomModel
//                val inputDelay =
//                    (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.inputDelay
//
//                when (model.searchTextFieldEnum) {
//                    //Called when User start typing
//                    SearchTextFieldAtomEnum.AFTER_TEXT_CHANGED -> {
//                        if (TextUtils.isEmpty(model.text?.trim()) && model.hasFocus) {
////                            showSearchOverlay()
//                            showRecentSearches()
//                        } else {
//                            if ((model.text!!.trim()).length > 1) {
//                                handler.removeCallbacks(runnable)
//                                inputDelay?.let {
//                                    handler.postDelayed(runnable, inputDelay)
//                                } ?: kotlin.run {
//                                    getOverlayData()
//                                }
//                            }
//                        }
//                        return
//                    }
//
//
//
//                    //Called when User taps of search edit text
//                    SearchTextFieldAtomEnum.EDIT_TEXT_ON_FOCUS -> {
//                        if (TextUtils.isEmpty(model.text)) {
////                            showSearchOverlay()
//                            showRecentSearches()
//                            Handler(Looper.getMainLooper()).postDelayed({
//                                if (textFieldView != null) {
//                                    val imm =
//                                        this@AtomicSearchMoleculeListFragment.context?.getSystemService(
//                                            Context.INPUT_METHOD_SERVICE
//                                        ) as InputMethodManager
//                                    imm.showSoftInput(
//                                        textFieldView,
//                                        InputMethodManager.SHOW_IMPLICIT
//                                    )
//                                }
//                            }, 100)
//                        } else {
//                            if ((model.text!!.trim()).length > 1) {
//                                handler.removeCallbacks(runnable)
//                                inputDelay?.let {
//                                    handler.postDelayed(runnable, inputDelay)
//                                } ?: kotlin.run {
//                                    getOverlayData()
//                                }
//                            }
//                        }
//                        return
//                    }
//
//                    SearchTextFieldAtomEnum.ON_CLOSE -> {
//                        handler.removeCallbacks(runnable)
//                        hideSearchOverlay()
//                        hideKeyBoard()
//                    }
//
//                    //Called when User click done button or search icon typing
//                    SearchTextFieldAtomEnum.ON_SEARCH -> {
//                        if (TextUtils.isEmpty(model.text.toString().trim()) || (!TextUtils.isEmpty(
//                                model.text.toString().trim()
//                            ) && model.text!!.length < 2)
//                        ) {
//                            return
//                        }
//                        if (searchListTemplateView?.visibility == View.VISIBLE) {
//                            searchListTemplateView?.visibility = View.GONE
//                            searchListTemplateView?.isFocusable = false
//                            overlayView?.visibility = View.GONE
//                        }
//                        saveRecentSearches(model.text.toString().trim())
//                        action =
//                            (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
//                        action?.analyticsData?.put(KEY_SEARCH_TERM, model.text.toString().trim())
//                    }
//                    SearchTextFieldAtomEnum.ON_VOICE -> {
//                        if (TextUtils.isEmpty(model.text.toString().trim()) || (!TextUtils.isEmpty(
//                                model.text.toString().trim()
//                            ) && model.text!!.length < 2)
//                        ) {
//                            return
//                        }
//                        if (searchListTemplateView?.visibility == View.VISIBLE) {
//                            searchListTemplateView?.visibility = View.GONE
//                            searchListTemplateView?.isFocusable = false
//                            overlayView?.visibility = View.GONE
//                        }
//                        saveRecentSearches(model.text.toString().trim())
//                        action =
//                            (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
//                        action?.analyticsData?.put(KEY_SEARCH_TERM, model.text.toString().trim())
//                    }
//
//
//
//
//
//                }
//
//            } else if (it.model is TagMoleculeModel) {
//                val model: TagMoleculeModel = it.model as TagMoleculeModel
//                action = model.action
//                if (searchListTemplateView?.visibility == View.VISIBLE) {
//                    searchListTemplateView?.visibility = View.GONE
//                    searchListTemplateView?.isFocusable = false
//                    overlayView?.visibility = View.GONE
//                }
//            } else {
//                super.onChanged(it)
//                return
//            }
//
//            action?.let { actionModel ->
//                executeAction(actionModel, validRequestParams, it.requestParams)
//            }
//        }
//    }
//

    fun <R : BaseResponse> getOnActionSuccessCallback(): Callback<R> {
        return Callback { result ->
            updateOverlay(result)
        }
    }

    fun hideKeyBoard() {
        //Add try catch in case window not available or keyboard closed
        try {
            val imm = context?.getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager
            imm?.hideSoftInputFromWindow(activity!!.currentFocus!!.windowToken, 0)
        } catch (e: Exception) {
//            Log.e("AddonSearch", "hideKeyboardException :$e")
        }
    }
//444
    private fun callAccessibilityVoiceOver(listTemplate: ListTemplateModel) {
        val accessibilityText = StringBuilder()
        listTemplate.list?.forEachIndexed { index, item ->
            accessibilityText.append((((item.molecule as ListLeftVariableIconAllTextLinkMoleculeModel).eyebrowHeadlineBodyLinkMoleculeModel as EyebrowHeadlineBodyLinkMoleculeModel).body as LabelAtomModel).text)
        }
        if (!accessibilityText.isEmpty()) {
            searchListTemplateView?.setContentDescription(accessibilityText.toString())
        }
        AccessibilityUtils.fireEventToNotifyUser(
            context,
            accessibilityText.toString(),
            javaClass.name
        )
    }

    private fun saveRecentSearches(searchText: String) {
        val searchData = sharedPreferencesUtil?.nSearchList
        if (searchData?.isEmpty() == true) {
            sharedPreferencesUtil?.nSearchList = "$searchText,"
        } else {

            val newSearchData = StringBuilder(searchText)
            searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.forEach {
                newSearchData.append(",$it")
            }
            sharedPreferencesUtil?.nSearchList = newSearchData.toString()

            val maxSearches = 5
            val limitedSearchData = newSearchData.toString().split(",").take(maxSearches).joinToString(",")
            sharedPreferencesUtil?.nSearchList= "$limitedSearchData,"
        }


    }


    private fun showRecentSearches() {
        overlayView?.removeAllViews()
        overlayView?.visibility = View.VISIBLE
        searchListTemplateView?.visibility = View.GONE
        val searchData = sharedPreferencesUtil?.nSearchList
        if (searchData?.isEmpty() == true) {
            context?.let {
                overlayView?.setBackgroundColor(
                    ContextCompat.getColor(
                        it,
                        R.color.overlay_background
                    )
                )
            }
            return
        }

        searchData?.split(",")?.forEach { searchText ->
            if (searchText.isNotEmpty()) {
                val itemLayout = LinearLayout(context)
                itemLayout.orientation = LinearLayout.HORIZONTAL

                val itemLayoutParams = LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
                itemLayoutParams.setMargins(0, 18, 0, 16)
                itemLayout.layoutParams = itemLayoutParams


                val textView = MFTextView(this.context)
                textView.textSize = 18f
                textView.text = searchText
                val textParams = LinearLayout.LayoutParams(0, LayoutParams.WRAP_CONTENT, 1f)
                textView.layoutParams = textParams

                // Setting onClickListener for done action
                textView.setOnClickListener {
                    Log.d("RecentSearchClick", "$searchText")

                    if (TextUtils.isEmpty(searchText.trim()) || searchText.length < 2) {
                        return@setOnClickListener
                    }

                    if (searchListTemplateView?.visibility == View.VISIBLE) {
                        searchListTemplateView?.visibility = View.GONE
                        searchListTemplateView?.isFocusable = false
                        overlayView?.visibility = View.GONE
                    }


                    saveRecentSearches(searchText.trim())

                    val action = (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                    action?.analyticsData?.put(KEY_SEARCH_TERM, searchText.trim())
                    Log.d("SearchAction", "$searchText")



                    action?.let { actionModel ->
                        val requestParams = hashMapOf<String, Any>(
                            "searchInput" to searchText.trim(),
                            "currentPage" to "Done"
                        )
                        executeAction(actionModel, true, requestParams)
                    }
                }


                val deleteTextView = MFTextView(this.context)
                deleteTextView.textSize = 18f
                deleteTextView.text = "x"
                deleteTextView.setTypeface(null, Typeface.BOLD)

                deleteTextView.setOnClickListener {
                    deleteRecentSearch(searchText)
                }

                val deleteParams = LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
                deleteParams.setMargins(16, 0, 0, 0)
                deleteTextView.layoutParams = deleteParams


                itemLayout.addView(textView)
                itemLayout.addView(deleteTextView)


                overlayView?.addView(itemLayout)

                context?.let {
                    overlayView?.setBackgroundColor(
                        ContextCompat.getColor(it, R.color.white)
                    )
                }
            }
        }
    }


    // Deleting a specific recent search
    private fun deleteRecentSearch(searchText: String) {
        val searchData = sharedPreferencesUtil?.nSearchList
        val updatedSearchData = searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.joinToString(",")
        sharedPreferencesUtil?.nSearchList = updatedSearchData?.plus(",")
        showRecentSearches()  // Refreshing the list after deletion
    }





    // iphone
//    private fun saveRecentSearches(searchText: String) {
//        val searchData = sharedPreferencesUtil?.nSearchList
//        if (searchData?.isEmpty() == true) {
//            sharedPreferencesUtil?.nSearchList = "${searchText},"
//        } else {
//            val newSearchData = StringBuilder(searchText)
//            searchData?.split(",")?.filter { it != searchText }?.forEach {
//                newSearchData.append(",$it")
//            }
//            sharedPreferencesUtil?.nSearchList = newSearchData.toString()
//        }
//    }
//
//    private fun showRecentSearches() {
//        overlayView?.removeAllViews()
//        overlayView?.visibility = View.VISIBLE
//        searchListTemplateView?.visibility = View.GONE
//        val searchData = sharedPreferencesUtil?.nSearchList
//        if (searchData?.isEmpty() == true) {
//            context?.let {
//                overlayView?.setBackgroundColor(
//                    ContextCompat.getColor(
//                        it,
//                        R.color.overlay_background
//                    )
//                )
//            }
//            return
//        }
//        searchData?.split(",")?.forEach { searchText ->
//            val view = MFTextView(this.context)
//            view.textSize = 16f
//            view.text = searchText
//            val params = LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT)
//            params.setMargins(0,16,0,0)
//            view.layoutParams = params
//            overlayView?.addView(view)
//            context?.let {
//                overlayView?.setBackgroundColor(
//                    ContextCompat.getColor(
//                        it,
//                        R.color.white
//                    )
//                )
//            }
//        }
//    }



}
