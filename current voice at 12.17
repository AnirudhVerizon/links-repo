
private fun startSpeechRecognition() {
            val speechRecognizer = SpeechRecognizer.createSpeechRecognizer(context)
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")
            }

            speechRecognizer.setRecognitionListener(object : RecognitionListener {
                override fun onReadyForSpeech(params: Bundle?) {
                    // Ready to receive speech
                }

                override fun onBeginningOfSpeech() {
                    // User has started speaking
                }

                override fun onRmsChanged(rmsdB: Float) {
                    // Sound level changed
                }

                override fun onBufferReceived(buffer: ByteArray?) {
                    // Buffer received
                }

                override fun onEndOfSpeech() {
                    // User has finished speaking
                }

                override fun onError(error: Int) {
                    // Handle error
                }

                override fun onResults(results: Bundle?) {
                    results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)?.let { result ->
                        val spokenText = result[0]
                        // Log the spoken text
                        Log.d("SpeechRecognizerResult", "Spoken Text: $spokenText")
                        saveRecentSearches(spokenText)

                        // Trigger the done action with spoken text
                        val action = (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                        action?.analyticsData?.put(KEY_SEARCH_TERM, spokenText)
                        Log.d("SearchAction", "Executing search for: $spokenText")

                        // Set request parameters
                        action?.let { actionModel ->
                            val requestParams = hashMapOf<String, Any>(
                                "searchInput" to spokenText,
                                "currentPage" to "Done"
                            )
                            // Execute the action to trigger the search
                            executeAction(actionModel, true, requestParams)
                        }
                    }
                }

                override fun onPartialResults(partialResults: Bundle?) {
                    // Handle partial results
                }

                override fun onEvent(eventType: Int, params: Bundle?) {
                    // Handle events
                }
            })

            try {
//                startActivityForResult(intent, 100)

                speechRecognizer.startListening(intent)
            } catch (e: ActivityNotFoundException) {
                // Handle the error (Toast, log, etc.)
            }
        }
