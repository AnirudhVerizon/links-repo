package com.vzw.mobilefirst.setup.views.activity;

import static android.provider.Telephony.CarrierId.CARRIER_NAME;
import static com.vzw.common_utils.Constants.ACTIVATION_EID;
import static com.vzw.hss.mvm.common.utils.DeviceUtils.isSilentSSOAvailable;
import static com.vzw.mobilefirst.MobileFirstApplication.getAppContext;
import static com.vzw.mobilefirst.commons.assemblers.PlatformResponseConverter.FIOS_ONLY_PAGE_TYPE;
import static com.vzw.mobilefirst.commons.views.fragments.AtomicOfflineNetworkFeedbackFragment.NETWORK_FEEDBACK_TAB;
import static com.vzw.mobilefirst.prepay.common.util.PrepayConstants.ENABLE_PREPAY_ESIM_FLAG;
import static com.vzw.mobilefirst.support.utils.NotificationUtils.SUPPORT_CHANNEL_KEY_NAME;
import static com.vzw.mobilefirst.ubiquitous.assemblers.LaunchAppConverter.NOTIFICATION_LINK;
import static com.vzw.mobilefirst.ubiquitous.assemblers.UbiquitousConverterLoader.MY_FEED;
import static com.vzw.mobilefirst.ubiquitous.presenters.LaunchApplicationPresenter.ENABLE_PRE_TO_POST_FLAG;
import static com.vzw.mobilefirst.ubiquitous.presenters.LaunchApplicationPresenter.SOURCE_ID_KEY;

import android.Manifest;
import android.animation.Animator;
import android.animation.LayoutTransition;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ShortcutInfo;
import android.content.pm.ShortcutManager;
import android.content.res.Configuration;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Icon;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.PowerManager;
import android.provider.Settings;
import android.text.Html;
import android.text.SpannableStringBuilder;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import android.webkit.CookieManager;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.splashscreen.SplashScreen;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.lifecycle.DefaultLifecycleObserver;
import androidx.lifecycle.LifecycleOwner;
import androidx.recyclerview.widget.LinearSmoothScroller;
import androidx.recyclerview.widget.RecyclerView;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkManager;

import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.firebase.analytics.FirebaseAnalytics;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.mcoe.inappupdate.ManualAppUpdater;
import com.mcoe.inappupdate.utils.InAppUpdateType;
import com.mcoe.inappupdate.utils.Updater;
import com.verizon.mips.remote.library.RemoteViewManager;
import com.verizon.visp.libcellular.api.CellularCallback;
import com.verizon.visp.libcellular.api.CellularClient;
import com.verizon.visp.libcellular.api.CellularError;
import com.vzw.android.component.ui.MFTextView;
import com.vzw.android.component.ui.NotificationOverlay;
import com.vzw.android.component.ui.utils.MFFontManager;
import com.vzw.atomic.assemblers.AtomicNoConnectionConverter;
import com.vzw.atomic.views.fragments.TabFragment;
import com.vzw.common_utils.Constants;
import com.vzw.engage.Engage;
import com.vzw.engage.EngageNotificationAction;
import com.vzw.hss.mvm.common.config.Config;
import com.vzw.hss.mvm.common.config.MVMSettings;
import com.vzw.hss.mvm.common.constants.MVMRCConstants;
import com.vzw.hss.mvm.common.datameter.MMGConstants;
import com.vzw.hss.mvm.common.sso.SSOLoginClient;
import com.vzw.hss.mvm.common.utils.DeviceUtils;
import com.vzw.hss.mvm.common.utils.UtilLog;
import com.vzw.hss.myverizon.atomic.models.atoms.BaseNavigationButtonAtomModel;
import com.vzw.hss.myverizon.atomic.views.ViewHelper;
import com.vzw.mobilefirst.AppUpdateStatus;
import com.vzw.mobilefirst.ApplicationComponents;
import com.vzw.mobilefirst.InAppUpdater;
import com.vzw.mobilefirst.MobileFirstApplication;
import com.vzw.mobilefirst.R;
import com.vzw.mobilefirst.billnpayment.services.ServerResponseProcessorService;
import com.vzw.mobilefirst.billnpayment.views.fragments.BillOverViewLandingFragment;
import com.vzw.mobilefirst.billnpayment.views.fragments.FirstBillOverviewLandingFragment;
import com.vzw.mobilefirst.commons.events.ExecuteActionEvent;
import com.vzw.mobilefirst.commons.events.OnAppExitEvent;
import com.vzw.mobilefirst.commons.events.OnDrawerClosedEvent;
import com.vzw.mobilefirst.commons.events.OnSignOutEvent;
import com.vzw.mobilefirst.commons.events.RemoveDataFromCacheEvent;
import com.vzw.mobilefirst.commons.events.RemoveDialogEvent;
import com.vzw.mobilefirst.commons.events.WebViewBackPressedEvent;
import com.vzw.mobilefirst.commons.events.onModuleChangeEvent;
import com.vzw.mobilefirst.commons.exceptions.ResourceConsumingException;
import com.vzw.mobilefirst.commons.exceptions.SessionTimeOut;
import com.vzw.mobilefirst.commons.factories.NoNetworkDialogFragmentFactory;
import com.vzw.mobilefirst.commons.models.ModuleCacheRepository;
import com.vzw.mobilefirst.commons.net.cache.InMemoryCacheRepository;
import com.vzw.mobilefirst.commons.net.cache.PageCacheRepository;
import com.vzw.mobilefirst.commons.net.memorycache.InStorageCacheResponse;
import com.vzw.mobilefirst.commons.net.request.MobileFirstNetworkRequestor;
import com.vzw.mobilefirst.commons.net.resources.ApnResourceServiceRequestor;
import com.vzw.mobilefirst.commons.net.resources.ShowTabBarEvent;
import com.vzw.mobilefirst.commons.presenter.AnalyticsPresenter;
import com.vzw.mobilefirst.commons.presenter.CrashLogPresenter;
import com.vzw.mobilefirst.commons.presenter.ErrorReporterPresenter;
import com.vzw.mobilefirst.commons.sso.AuthenticationHelper;
import com.vzw.mobilefirst.commons.utils.CommonUtils;
import com.vzw.mobilefirst.commons.utils.DialogUtils;
import com.vzw.mobilefirst.commons.utils.DrawableUtils;
import com.vzw.mobilefirst.commons.utils.MFAppContext;
import com.vzw.mobilefirst.commons.utils.NewRelicEvents;
import com.vzw.mobilefirst.commons.utils.PermissionUtil;
import com.vzw.mobilefirst.commons.utils.ResponseDeserializer;
import com.vzw.mobilefirst.commons.utils.SharedPreferencesUtil;
import com.vzw.mobilefirst.commons.utils.SystemParamsUtil;
import com.vzw.mobilefirst.commons.views.activities.BaseActivity;
import com.vzw.mobilefirst.commons.views.activities.PIPActivity;
import com.vzw.mobilefirst.commons.views.fragments.AtomicNoConnectionFragment;
import com.vzw.mobilefirst.commons.views.fragments.ErrorDialogFragment;
import com.vzw.mobilefirst.commons.views.fragments.NoNetworkDialogFragment;
import com.vzw.mobilefirst.commons.views.fragments.OAuthCompleteEvent;
import com.vzw.mobilefirst.commons.views.fragments.TopNotificationFragment;
import com.vzw.mobilefirst.commons.views.fragments.WebViewOpenURLInAppWebPunchOutFragment;
import com.vzw.mobilefirst.commons.views.utils.CommonAppUtil;
import com.vzw.mobilefirst.commons.views.utils.FiveGExperienceUtil;
import com.vzw.mobilefirst.commons.views.utils.HideNavigation;
import com.vzw.mobilefirst.commonviews.events.HABEvent;
import com.vzw.mobilefirst.commonviews.events.HabSetBackgroundEvent;
import com.vzw.mobilefirst.commonviews.events.HideShopCartEvent;
import com.vzw.mobilefirst.commonviews.events.HideWishListEvent;
import com.vzw.mobilefirst.commonviews.events.MobileFirstExceptionEvent;
import com.vzw.mobilefirst.commonviews.events.ScrollToTopEvent;
import com.vzw.mobilefirst.commonviews.events.SignOutEvent;
import com.vzw.mobilefirst.commonviews.events.ToolbarAlwaysShowEvent;
import com.vzw.mobilefirst.commonviews.events.ToolbarDividerEvent;
import com.vzw.mobilefirst.commonviews.events.ToolbarEnableEvent;
import com.vzw.mobilefirst.commonviews.models.DataDialog;
import com.vzw.mobilefirst.commonviews.models.StylesDataDialog;
import com.vzw.mobilefirst.commonviews.models.atomic.atoms.NavigationNotificationButtonAtomModel;
import com.vzw.mobilefirst.commonviews.models.atomic.atoms.NavigationSelectAllLabelButtonAtomModel;
import com.vzw.mobilefirst.commonviews.utils.GlobalContextSingleton;
import com.vzw.mobilefirst.commonviews.views.atomic.atoms.NavigationNotificationButtonAtomView;
import com.vzw.mobilefirst.commonviews.views.atomic.atoms.NavigationSelectAllLabelButtonAtomView;
import com.vzw.mobilefirst.commonviews.views.fragments.BaseFragment;
import com.vzw.mobilefirst.commonviews.views.fragments.ConfirmationDialogFragment;
import com.vzw.mobilefirst.community.assemblers.CommunityConverter;
import com.vzw.mobilefirst.community.utils.CommunityContext;
import com.vzw.mobilefirst.core.assemblers.BusinessErrorConverter;
import com.vzw.mobilefirst.core.events.CartEvent;
import com.vzw.mobilefirst.core.events.DismissErrorDialogEvent;
import com.vzw.mobilefirst.core.events.HideProgressSpinnerEvent;
import com.vzw.mobilefirst.core.events.HideShowDrawerEvent;
import com.vzw.mobilefirst.core.events.OnConfirmDialogEvent;
import com.vzw.mobilefirst.core.events.OnExceptionEvent;
import com.vzw.mobilefirst.core.events.PageLoadEvent;
import com.vzw.mobilefirst.core.events.ResponseHandlingEvent;
import com.vzw.mobilefirst.core.events.TabRefreshEvent;
import com.vzw.mobilefirst.core.models.Action;
import com.vzw.mobilefirst.core.models.AnalyticsReporter;
import com.vzw.mobilefirst.core.models.BaseResponse;
import com.vzw.mobilefirst.core.models.CacheRepository;
import com.vzw.mobilefirst.core.models.ConfirmOperation;
import com.vzw.mobilefirst.core.models.Credentials;
import com.vzw.mobilefirst.core.models.DateProvider;
import com.vzw.mobilefirst.core.models.DeviceInfo;
import com.vzw.mobilefirst.core.models.Disposable;
import com.vzw.mobilefirst.core.models.OpenPageAction;
import com.vzw.mobilefirst.core.models.TabAndNavModel;
import com.vzw.mobilefirst.core.net.cache.Key;
import com.vzw.mobilefirst.core.net.tos.DeviceMDNHashMap;
import com.vzw.mobilefirst.core.net.tos.RememberMeHashMap;
import com.vzw.mobilefirst.core.net.tos.Sso;
import com.vzw.mobilefirst.core.net.tos.UserAuthenticateTokenHash;
import com.vzw.mobilefirst.core.net.tos.XMDNToken;
import com.vzw.mobilefirst.core.utils.NetworkUtils;
import com.vzw.mobilefirst.core.utils.atomic.ActionModelConverter;
import com.vzw.mobilefirst.error.ErrorApiWorker;
import com.vzw.mobilefirst.error.ErrorReportToServerUtil;
import com.vzw.mobilefirst.error.util.AppState;
import com.vzw.mobilefirst.error.util.EventType;
import com.vzw.mobilefirst.error.util.LogSeverity;
import com.vzw.mobilefirst.esim.EsimHelper;
import com.vzw.mobilefirst.homesetup.net.tos.welcome.FivegSetupAllStepsModule;
import com.vzw.mobilefirst.homesetup.presenter.WelcomeHomesetupPresenter;
import com.vzw.mobilefirst.homesetup.views.fragments.FgNavigationMenuFragment;
import com.vzw.mobilefirst.homesetup.views.fragments.SlidingTabsBasicFragment;
import com.vzw.mobilefirst.inStore.InStoreBarSessionManager;
import com.vzw.mobilefirst.loyalty.events.PreApprovalEvent;
import com.vzw.mobilefirst.loyalty.views.custom.countdown.CountdownSingleton;
import com.vzw.mobilefirst.loyalty.views.fragments.sendTicket.SendTicketFragment;
import com.vzw.mobilefirst.mfsupport.presenters.ChatManager;
import com.vzw.mobilefirst.mfsupport.presenters.SupportSearchPresenter;
import com.vzw.mobilefirst.mfsupport.utility.ChatServiceManager;
import com.vzw.mobilefirst.mfsupport.utility.ConnectionPoolingManager;
import com.vzw.mobilefirst.prepay.common.util.PrepayConstants;
import com.vzw.mobilefirst.prepay.eSIM.views.fragments.PrepayESimNetworkErrorFragment;
import com.vzw.mobilefirst.prepay.eSIM.views.fragments.PrepayResumeESimActivationFragment;
import com.vzw.mobilefirst.routermanagement.utils.WPSDeviceBackgroundCallHandler;
import com.vzw.mobilefirst.routermanagement.views.fragments.AddWPSDeviceFragment;
import com.vzw.mobilefirst.setup.assemblers.SetupConverterLoader;
import com.vzw.mobilefirst.setup.models.signin.MvmPreferenceRepository;
import com.vzw.mobilefirst.setup.models.signup.FirstTimeTermsAndConditionsModel;
import com.vzw.mobilefirst.setup.presenters.SetupBasePresenter;
import com.vzw.mobilefirst.setup.services.RetrofitInstance;
import com.vzw.mobilefirst.setup.views.PageCacheDataListener;
import com.vzw.mobilefirst.setup.views.fragments.SplashFragment;
import com.vzw.mobilefirst.support.SupportConstants;
import com.vzw.mobilefirst.support.background.receiver.MMGAsyncNotificationReceiver;
import com.vzw.mobilefirst.support.events.SupportChatResponseEvent;
import com.vzw.mobilefirst.support.events.SupportUIEvent;
import com.vzw.mobilefirst.support.models.SupportRequest;
import com.vzw.mobilefirst.support.utils.SupportRowCollection;
import com.vzw.mobilefirst.support.utils.SupportUtils;
import com.vzw.mobilefirst.ubiquitous.assemblers.LaunchAppConverter;
import com.vzw.mobilefirst.ubiquitous.assemblers.ModuleMapConverterUtil;
import com.vzw.mobilefirst.ubiquitous.events.AlertDataEvent;
import com.vzw.mobilefirst.ubiquitous.events.HABViewAnimEvent;
import com.vzw.mobilefirst.ubiquitous.events.NavigationUpdateEvent;
import com.vzw.mobilefirst.ubiquitous.events.ShopIconsEvent;
import com.vzw.mobilefirst.ubiquitous.events.WishListEvent;
import com.vzw.mobilefirst.ubiquitous.models.AppShortcutMenuModel;
import com.vzw.mobilefirst.ubiquitous.models.LaunchAppModel;
import com.vzw.mobilefirst.ubiquitous.models.ModuleModel;
import com.vzw.mobilefirst.ubiquitous.models.NotificationCenterModel;
import com.vzw.mobilefirst.ubiquitous.models.ParentMenuModel;
import com.vzw.mobilefirst.ubiquitous.models.SavedCartModel;
import com.vzw.mobilefirst.ubiquitous.models.SupportFABModel;
import com.vzw.mobilefirst.ubiquitous.models.WishListModel;
import com.vzw.mobilefirst.ubiquitous.net.tos.DeepLinkObject;
import com.vzw.mobilefirst.ubiquitous.net.tos.InAppUpdateAlert;
import com.vzw.mobilefirst.ubiquitous.net.tos.NotificationCenter;
import com.vzw.mobilefirst.ubiquitous.presenters.HomePresenter;
import com.vzw.mobilefirst.ubiquitous.presenters.LaunchApplicationPresenter;
import com.vzw.mobilefirst.ubiquitous.services.LocationTrackingService;
import com.vzw.mobilefirst.ubiquitous.services.PopDataSessionManager;
import com.vzw.mobilefirst.ubiquitous.views.fragments.MyFeedFragment;
import com.vzw.mobilefirst.ubiquitous.views.fragments.NavigationMenuFragment;
import com.vzw.mobilefirst.ubiquitous.views.utils.FeedUtils;
import com.vzw.mobilefirst.visitus.models.common.ShopSelection;
import com.vzw.mobilefirst.vzccard.views.delayedintercept.DelayedInterceptDialog;
import com.vzw.utils.DeepLinkHandelingUtils;
import com.vzw.utils.MFSingleton;
import com.vzw.utils.MonitoringUtils;
import com.vzw.utils.Utils;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.util.TextUtils;
import org.jetbrains.annotations.NotNull;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import javax.inject.Inject;
import javax.inject.Named;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


/**
 * Created by mallakr on 2/2/2016.
 */
public class SetUpActivity extends BaseActivity implements
        DialogUtils.DialogDismissListener, View.OnClickListener, HideNavigation, AuthenticationHelper.SSOGeneratorCallback , DefaultLifecycleObserver {

    public static final String COM_VZW_HSS_MYVERIZON_LAUNCH_MYVERIZON_HYBRID = "com.vzw.hss.myverizon.LAUNCH_MYVERIZON_HYBRID";
    private static final String TAG = SetUpActivity.class.getSimpleName();
    public static final int REQUEST_PLATFORM_SELECTION = 23;
    public static final String PLATFORM_EXTRA = "platform";
    public static final String BUNDLE_SCREEN_INFO = "BUNDLE_SCREEN_INFO";
    public static final float DELAY = -400;
    public static final String SIGN_OUT = "signOut";
    public static final String MVM_SIGN_OUT = "MVM_SIGN_OUT";
    private static final String TOKEN = "token";
    private static final String ERROR = "error";
    public static final String RESTART_ACTION = "restart";
    public static final String SIGN_OUT_PAGE_TYPE = "Sign out";
    public static final String MOBILE_FIRST_APPLICATION_CONTEXT = "mobile/nsa/nos/gw/launchapp";
    private static final int MAX_RETRY_COUNT = 5;
    public static final String MDN = "mdn";
    public static final String SOURCE_ID = "sourceID";
    public static final int DELAY_MILLIS = 3000;
    private static final int TIMEOUT_MS = 5_000;
    public static final String IS_RDR_VERIFIED = "isRDRVerified";
    public static final String EXTRAPARAM = "extraparam";
    public static final String SM_T567_V = "SM-T567V";
    public static final String HYPHEN = "-";
    public static final String ENABLE_PROSPECT = "ENABLE_PROSPECT";
    private static final String PUSH = "push";

    public static final String UI_EVENT = "uiEvent";
    public static final String SPLASH_START = "splashSpinnerStart";
    public static final String API_CALL = "apiCall";
    public static final String GET_MVS_DEVICE_TOKEN = "getMVSDeviceToken";
    public static final String GET_MVS_DEVICE_TOKEN_COMPLETE = "getMVSDeviceTokenComplete";
    public static final String GET_NETWORK_DEVICE_TOKEN = "getNetworkDeviceToken";
    public static final String GET_NETWORK_DEVICE_TOKEN_COMPLETE = "getNetworkDeviceTokenComplete";
    public static final String AUTHENTICATION_START = "authenticationStart";
    private SplashFragment mSplashFragment;
    private ArrayList<Sso> mSSOList = new ArrayList<>();
    private ArrayList<XMDNToken> xmdnTokenArrayList = new ArrayList<>();
    public static String appUrl;
    OpenPageAction launchAppAction = new OpenPageAction("", "authentication", MOBILE_FIRST_APPLICATION_CONTEXT, "");
    private boolean isEnableInternational = false;
    public final String KEY_MVMRCDM_SOURCEID = "mvmrcdm";
    private String continueToApp = "";
    private SSOLoginClient loginClient;
    HashMap<String, String> extraParams = null;
    public static final String KEY_DEEPLINKING_EXTRA = "deep_linking_extra";
    public static final String KEY_DEEPLINKING = "deep_linking";
    public static final String KEY_DEEPLINKING_PAGETYPE = "deep_linking_page_type";
    public static final String CONTINUE_TO_APP = "continueToApp";
    public static final String PERSIST_DEEPLINK_FALSE = "persistDeeplink=false";
    public static final String TESTMDN_DSDS = "testmdn_dsds";
    public static final String ENABLE_DSDS = "enable_dsds";
    public static final String TESTCARRIER_DSDS = "testcarrier_dsds";

    private boolean useDummySSO;
    private boolean sendXMDN;
    public ExtendedFloatingActionButton fabIconWithText = null;
    public FloatingActionButton fabIcon = null;
    private boolean mIsToolbarDividerPresent;
    private float downRawX, downRawY;
    private float dX, dY;
    private final static float CLICK_DRAG_TOLERANCE = 10;

    @Inject
    protected LaunchApplicationPresenter mLaunchApplicationPresenter;

    @Inject
    SharedPreferencesUtil sharedPreferencesUtil;

    RelativeLayout mLinearLayoutMain;

    @Inject
    MvmPreferenceRepository mvmPreferenceRepository;

    private static WeakReference<SetUpActivity> weakReferenceActivity = null;

    @Inject
    PopDataSessionManager popDataSessionManager;

    @Inject
    protected DeviceInfo deviceInfo;

    @Inject
    protected CrashLogPresenter crashLogPresenter;

    String extraContinueToApp;
    private TopNotificationFragment topNotificationFragment;
    private View headerDivider;

    private ImageView mCartIcon;
    private RelativeLayout mWishListIcon;
    private ImageView ivWishListIcon;
    private Action preApprovalAction;

    @Inject
    public LaunchApplicationPresenter launchApplicationPresenter;

    @Inject
    AuthenticationHelper authenticationHelper;
    @Inject
    MobileFirstNetworkRequestor networkRequestor;

    //Boolean depending on ToolbarAlwaysShowEvent which is triggered from WebPunchout Flows
    private boolean shouldShowToolbarAlways;

    NewRelicEvents events = new NewRelicEvents();

    private ModuleModel moduleModel;


    public static final String MOBILE_FIRST_SS1 = "mobileFirstSS";
    public static final String PAGE_TYPE = "pageType";
    public static final String RESTART = "restart";
    public static final String NOTIFICATION_CENTER = "NotificationCenter";
    public static final String FEED_PAGE_STARTED = "feedsPageStart";
    private static boolean isSavedStateCalled = false;

    private static final String CONFIRMATION_DIALOG_FRAGMENT_TAG = "confirmationDialogTag";
    private static final String DATA_METER_INTENT = "com.vzw.hss.datameter.widget.action" +
            ".UPDATE_USAGE_FROM_APP";
    public static final int TIME_OUT = 14;
    public static final String MOBILE_FIRST_SS = "mobileFirstSS";
    private static final float HEIGHT = 50.0f;
    private static final float HAB_HEIGHT = 52f;
    private static final float HAB_VIEW_MARGIN = 16f;
    public static final String OAUTH_COMPLETE = "mvaoauthcomplete";

    private float mLastTranslate = 0.0f;

    //private DrawerLayout mDrawerLayout;
    private MFTextView mHeaderName;

    @Inject
    public AnalyticsPresenter analyticsPresenter;

    @Inject
    @Named("application_disposer")
    Disposable applicationDisposer;

    @Inject
    public SupportSearchPresenter mSupportSearchPresenter;

    @Inject
    protected AnalyticsReporter analyticsUtil;

    @Inject
    protected ChatManager chatManager;

    @Inject
    DateProvider dateProvider;
    private long timeStamp;

    private TextView tvWishListCount;
    private ImageView mCommunityIcon;

    private InStoreBarSessionManager inStoreBarSessionManager;
    private ViewGroup activity_home_main_container;

    @Inject
    protected ErrorReporterPresenter errorReporterPresenter;


    @Inject
    WPSDeviceBackgroundCallHandler wpsDeviceBackgroundCallHandler;

    @Inject
    public HomePresenter homePresenter;

    @Inject
    public SetupBasePresenter setupBasePresenter;

    private static boolean isSessionRunning;
    private static final String REQUEST_PARAMS = "RequestParams";
    private String LAUNCH_IDENTIFIER = "openmvm:///?";
    private String LAUNCH_IDENTIFIER_TWO = "openmvm://?";

    public static final String ACTION = "ACTION";
    private int notificationCount = 0;
    private String LAUNCH_REDIRECT_URL = "mvm-executetask://handle/mfhandler";
    private static String FIVEG_SYSTEM_PARAMS = "selfInstallNextStep";


    public static final String KEY_DEEPLINKING_INSTORE = "deep_linking_instore";
    public static final String MVM_SETTINGS_PREFERENCES_KEY = "MVMSettings";
    public static final String GET_SUPPORT = "openPanel";
    private String supportPageDeepLink = null;
    public static final String SUPPORT_DEEPLINK = "support_deeplink";


    final Handler longPressHandler = new Handler();
    private boolean isLongPressHandlerActivated = false;


    private String ACTION_5G_DEVICE_SUPPORT = "fiveGDeviceExperience";

    public static final String TAG_ENHANCE_FIVE_G = "Enhance5G";

    NotificationOverlay notificationOverlay;
    private int overlayHeight = 200;

    private FirebaseAnalytics mFirebaseAnalytics;
    private ManualAppUpdater mManualAppUpdater;
    private boolean hasCheckedForUpdate;
//    private String jsonResponse;
//    private String retrieveJsonResponse;

    private boolean isFeedFromCache = false;
    private Long startTime = System.nanoTime();

//    private ConfirmOperation signOutConfirmation;
//    private ConfirmOperation leaveAppConfirmModel;
    private ConfirmOperation confirmOperation = null;

    private ConfirmOperation leavingAppConfirm = null;



//    private boolean feedbackground;
//    String jsonResponse = Constants.feedResponse;

    @Override
    public void injectActivity(ApplicationComponents component) {
        component.inject(this);
    }

    @Override
    public BaseFragment getCurrentAnimationFragment() {
        return getCurrentFragment();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        MFAppContext.dismissSplash = false;
        SplashScreen splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> !MFAppContext.dismissSplash);
        //Remove splash if it doesn't auto quite by 5 secs
        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                if (!MFAppContext.dismissSplash) {
                    MFAppContext.dismissSplash = true;
                }
            }
        }, TIMEOUT_MS);

        if (StringUtils.isNotEmpty(getMDN())) {
            InStorageCacheResponse.INSTANCE.feedResponseRetrieve(getMDN());
        }
        //Add slide animation on exit
        splashScreen.setOnExitAnimationListener(splashScreenViewProvider -> {
                ObjectAnimator animator = ObjectAnimator.ofFloat(
                        splashScreenViewProvider.getView(),
                        View.TRANSLATION_X, 0,
                        splashScreenViewProvider.getView().getHeight()
                );

                // deceleration interpolaror, duration
                animator.setInterpolator(new LinearInterpolator());
                animator.setDuration(150L);
                animator.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(@NonNull Animator animation) {

                    }

                    @Override
                    public void onAnimationEnd(@NonNull Animator animation) {
                        splashScreenViewProvider.remove();
                    }

                    @Override
                    public void onAnimationCancel(@NonNull Animator animation) {

                    }

                    @Override
                    public void onAnimationRepeat(@NonNull Animator animation) {

                    }
                });
                animator.start();
        });

        //Switch this flag to delegate observable when this file gets converted to Kotlin
        hasCheckedForUpdate = false;

        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);
        mManualAppUpdater = InAppUpdater.setupAppUpdater(this, appUpdateStatus);
    }

    @Override
    public void extendComponents(Bundle savedInstanceState) {
        super.extendComponents(savedInstanceState);
        super.setupWizardLayout();
        if (getResources() != null) {
            boolean isTablet = getResources().getBoolean(R.bool.isTablet);
            CommonUtils.setIsTablet(isTablet);
        }

        MFAppContext.getInstance().disableAPN();
        // Clears SystemParamsUtil singleton object when app is relaunched..
        MonitoringUtils.authenticationUUID = MonitoringUtils.genrateUUID();
        if (!TextUtils.isEmpty(sharedPreferencesUtil.getfiosOnlyContext()) && !TextUtils.isEmpty(sharedPreferencesUtil.getNSArequestURL())) {
            launchAppAction.setRequestUrl(sharedPreferencesUtil.getNSArequestURL());
        } else {
            mvmPreferenceRepository.save(Constants.FIOS_ONLY_NSA_URL, StringUtils.EMPTY);
            sharedPreferencesUtil.setNSArequestURL(StringUtils.EMPTY);
            mvmPreferenceRepository.save(Constants.FIOS_ONLY_APPCONTEXT, StringUtils.EMPTY);
            sharedPreferencesUtil.setfiosOnlyContext(StringUtils.EMPTY);
        }
        if (getIntent().getExtras() != null) {
            String requestUrl = getIntent().getExtras().getString("requesturl");
            if (StringUtils.isNotEmpty(requestUrl))
                launchAppAction.setRequestUrl(requestUrl);
        }

        SystemParamsUtil.resetSystemParamUtilInstance();
        com.vzw.hss.mvm.common.utils.CommonUtils.MFSWITCH_PREPAY = false;
        popDataSessionManager.clear();
        weakReferenceActivity = new WeakReference<SetUpActivity>(this);
        try {
//            CookieManager.getInstance().removeSessionCookies(null);
//            CookieManager.getInstance().flush();
            MobileFirstApplication.getLogHandler().e(TAG, "Remove cookies at launch");
        } catch (Exception e) {
            MobileFirstApplication.getLogHandler().d(TAG, e.getMessage());
        }

        mToolbar = findViewById(R.id.toolbar);
        tabBarAtomView = findViewById(R.id.bottomTab);
        headerDivider = (View) findViewById(R.id.line_divider);
        fabIcon = findViewById(R.id.support_chat_head);
        fabIconWithText = findViewById(R.id.support_chat_head_with_text);
        mLinearLayoutMain = (RelativeLayout) findViewById(R.id.activity_home_main_linear_Layout);
        mHeaderName = (MFTextView) findViewById(R.id.ubiquitous_title_text_view);
        topNotificationFragment = (TopNotificationFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_notificationOverlayTop);
        notificationOverlay = (NotificationOverlay) findViewById(R.id.notificationOverlay);
        if (CommonUtils.isTablet())
            activity_home_main_container = (LinearLayout) findViewById(R.id.activity_home_main_container);
        else
            activity_home_main_container = (FrameLayout) findViewById(R.id.activity_home_main_container);
        headerDivider = (View) findViewById(R.id.line_divider);
        mCartIcon = (ImageView) mToolbar.findViewById(R.id.toolbar_Icon2);
        mWishListIcon = mToolbar.findViewById(R.id.rl_wishlist);
        ivWishListIcon = mToolbar.findViewById(R.id.iv_wishlist_icon);
        tvWishListCount = mToolbar.findViewById(R.id.tv_wishlist_count);
        ivWishListIcon = mToolbar.findViewById(R.id.iv_wishlist_icon);
        mCommunityIcon = (ImageView) mToolbar.findViewById(R.id.toolbar_icon_community);
        useDummySSO = getIntent().getBooleanExtra(Constants.EXTRA_KEY_DUMMY_SSO, false);
        sendXMDN = MVMSettings.getInstance().getSettingBoolean("XMDN_FLAG");
        if (isPackageInstalled()) {
            sharedPreferencesUtil.isMyVZServices(true);
        }
//        getXMDNResponse();
        MFAppContext.getInstance().setActivityTag(this.getClass().getName());
        MFAppContext.getInstance().setDeviceDensity(getResources().getDisplayMetrics().density);
        MFAppContext.getInstance().removeProperty(MyFeedFragment.IS_FEED_FETCHED);
        MFAppContext.getInstance().setPrepayContext(false);
        setStatusBarColor();
        startLaunchAppFlow(false);

        shouldShowToolbarAlways = true;
        disableToolBar();// case to hide toolbar by default
        if (GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled()) {
            findViewById(R.id.tabBardivider).setVisibility(View.VISIBLE);
            RelativeLayout relativeLayout = findViewById(R.id.rl_support);
            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
            layoutParams.rightMargin = getResources().getDimensionPixelSize(R.dimen.dimen_brand_refresh_margin_right);
        }

        hideChatIcons();
        disableNavigationDrawer();


        if (mCommunityIcon != null) mCommunityIcon.setOnClickListener(this);
        mCartIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                UtilLog.d(TAG, "toolbar_Icon2 called");
                Action action = (Action) view.getTag();
                if (action != null)
                    handleCartAction(action);
            }
        });

        mWishListIcon.setOnClickListener(view -> {
            Action action = (Action) view.getTag();
            if (action != null) {
                launchApplicationPresenter.executeAction(action);
            }
        });

        mToolbar.findViewById(R.id.toolbar_Icon1).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (getCurrentFragment() != null && getCurrentFragment() instanceof SendTicketFragment) {
                    // Log.i("LLL","Check the logs::::");

                    ((SendTicketFragment) getCurrentFragment()).onItemClick(false);

                } else {
                    UtilLog.d(TAG, "toolbar_Icon1 clicked");
                    //close(NotificationOverlay.ViewType.InStore);
                    SupportUtils.FLOW_TYPE = Constants.ADOBE_VALUE_SUPPORT_LINK;
                    if (preApprovalAction != null) {
                        setupBasePresenter.executeSlientRequest(preApprovalAction);
                        preApprovalAction = null;
                    }
                    trackToolBarAction(Constants.ADOBE_VALUE_SUPPORT_LINK);
                    openSupport(SupportRequest.FROM_ICON_SEARCH);
                }
            }
        });
//        mToolbar.findViewById(R.id.gif_animation_view).setOnClickListener(this);
        mToolbar.setNavigationOnClickListener(v -> {
            if (getCurrentFragment() != null && getCurrentFragment() instanceof SendTicketFragment) {
                // Log.i("LLL","Check the logs::::");

                ((SendTicketFragment) getCurrentFragment()).onItemClick(true);

            } else {
                trackToolBarAction(Constants.ADOBE_VALUE_NAV_LINK);
                mDrawerLayout.openDrawer(GravityCompat.START);
            }

            //close(NotificationOverlay.ViewType.SafetyMode);
        });
    }

    private boolean checkIfUserisDeviceAuthenticated(ArrayList<Sso> mSSOList) {
        boolean isDeviceAuthenticated = true;
        Set<String> mdnSet = sharedPreferencesUtil.getMDNHash();
        if (mSSOList.size() != 1) {
            isDeviceAuthenticated = false;
            MFSingleton.INSTANCE.setCacheFeedResponse(null);
            clearFeedResponse();
        } else if (getHashList() != null && !getHashList().isEmpty()) {
            MFSingleton.INSTANCE.setCacheFeedResponse(null);
            isDeviceAuthenticated = false;
            clearFeedResponse();
        } else if (StringUtils.isEmpty(MFSingleton.INSTANCE.getCacheFeedResponse())) {
            isDeviceAuthenticated = false;
        } else if (CommonAppUtil.getSmartLinkParameters() != null) {
            isDeviceAuthenticated = false;
            MFSingleton.INSTANCE.setCacheFeedResponse(null);
            clearFeedResponse();
        } else if (mdnSet == null) {
            isDeviceAuthenticated = false;
            MFSingleton.INSTANCE.setCacheFeedResponse(null);
            clearFeedResponse();
        }
        return isDeviceAuthenticated;
    }

    private void clearFeedResponse() {
        InStorageCacheResponse.INSTANCE.clearFeedResponse();
    }

    private void showCachedFeeds(PageCacheDataListener pageCacheDataListener) {
        MobileFirstApplication.getLogHandler().d("FeedTimer", "starting: " + System.currentTimeMillis());
        if (StringUtils.isNotEmpty(getMDN())) {
//            new Thread(new Runnable() {
//                @Override
//                public void run() {
//                    String br = InStorageCacheResponse.INSTANCE.feedResponse(getMDN());
            InStorageCacheResponse.INSTANCE.feedResponse(getMDN(), pageCacheDataListener);
//                }
//            }).start();
        }
    }


    AppUpdateStatus appUpdateStatus = new AppUpdateStatus() {
        @Override
        public void onUpdateSuccessful(@Nullable InAppUpdateType inAppUpdateType) {
            String linkName = (inAppUpdateType == InAppUpdateType.ForceUpdate.INSTANCE) ? "mandatoryapp_update_overlay update cta clicked" : "flexiapp_update_overlay update cta clicked";

            HashMap<String, Object> actionStrings = new HashMap<>();
            actionStrings.put(Constants.LINK_NAME, linkName);
            actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
            actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
            actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
            actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
            actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
            analyticsUtil.trackAction(linkName, actionStrings);

            Toast.makeText(SetUpActivity.this, "Downloading update", Toast.LENGTH_SHORT).show();
            mFirebaseAnalytics.logEvent("update_clicked", null);
        }

        @Override
        public void onUpdateCancelled(@Nullable InAppUpdateType inAppUpdateType) {

            String linkName = (inAppUpdateType == InAppUpdateType.ForceUpdate.INSTANCE) ? "mandatoryapp_update_overlay close icon clicked" : "flexiapp_update_overlay close icon clicked";

            HashMap<String, Object> actionStrings = new HashMap<>();
            actionStrings.put(Constants.LINK_NAME, linkName);
            actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
            actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
            actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
            actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
            actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
            analyticsUtil.trackAction(linkName, actionStrings);

            mFirebaseAnalytics.logEvent("update_canceled", null);
            InAppUpdateType.ForceUpdate update = InAppUpdateType.ForceUpdate.INSTANCE;
            if (inAppUpdateType == update) {
                finish();
            }
        }

        @Override
        public void onUpdateFailed(int resultCode) {
            mFirebaseAnalytics.logEvent("update_failed", null);
        }

        @Override
        public void updateType(@NonNull InAppUpdateType inAppUpdateType) {
            if (inAppUpdateType == InAppUpdateType.ForceUpdate.INSTANCE) {
                mFirebaseAnalytics.logEvent("update_type_immediate", null);
            } else {
                mFirebaseAnalytics.logEvent("update_type_flexible", null);
            }
        }

        @Override
        public void onAppUpdateAvailable() {
            mFirebaseAnalytics.logEvent("update_available", null);
        }

        @Override
        public void onNoUpdateAvailable() {
            mFirebaseAnalytics.logEvent("update_not_available", null);
        }

        @Override
        public void onDownloadFailed(@Nullable InAppUpdateType inAppUpdateType) {
            InAppUpdateType.ForceUpdate update = InAppUpdateType.ForceUpdate.INSTANCE;
            if (inAppUpdateType == update) {
                finish();
            }
            mFirebaseAnalytics.logEvent("update_download_failed", null);
        }

        @Override
        public void onDownloading() {
        }

        @Override
        public void onDownloadCancelled(@Nullable InAppUpdateType inAppUpdateType) {
            InAppUpdateType.ForceUpdate update = InAppUpdateType.ForceUpdate.INSTANCE;
            if (inAppUpdateType == update) {
                finish();
            }
            mFirebaseAnalytics.logEvent("update_download_canceled", null);
        }

        @Override
        public void onDownloaded(@NonNull Updater updater) {
            if (!isFinishing()) {
                try {
                    AlertDialog.Builder lAlertDialogBuilder = new AlertDialog.Builder(SetUpActivity.this);
                    lAlertDialogBuilder.setMessage(inAppUpdateAlert.getBody()).setTitle(inAppUpdateAlert.getTitle());
                    lAlertDialogBuilder.setCancelable(false);
                    lAlertDialogBuilder.setPositiveButton(inAppUpdateAlert.getCtaPositive(), (dialog, id) -> {
                        String linkName = "app update_alert overlay " + inAppUpdateAlert.getCtaPositive().toLowerCase() + " cta clicked";
                        HashMap<String, Object> actionStrings = new HashMap<>();
                        actionStrings.put(Constants.LINK_NAME, linkName);
                        actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
                        actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
                        actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
                        actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
                        actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
                        analyticsUtil.trackAction(linkName, actionStrings);

                        dialog.dismiss();
                        updater.completeUpdate();
                    });
                    lAlertDialogBuilder.setNegativeButton(inAppUpdateAlert.getCtaNegative(), (dialog, id) -> {
                        String linkName = "app update_alert overlay " + inAppUpdateAlert.getCtaNegative().toLowerCase() + " cta clicked";
                        HashMap<String, Object> actionStrings = new HashMap<>();
                        actionStrings.put(Constants.LINK_NAME, linkName);
                        actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
                        actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
                        actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
                        actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
                        actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
                        analyticsUtil.trackAction(linkName, actionStrings);
                        dialog.dismiss();
                    });

                    AlertDialog lAlertDialog = lAlertDialogBuilder.create();
                    lAlertDialog.show();

                    String linkName = "app update_alert overlay";
                    HashMap<String, Object> actionStrings = new HashMap<>();
                    actionStrings.put(Constants.LINK_NAME, linkName);
                    actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
                    actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
                    actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
                    actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
                    actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
                    analyticsUtil.trackAction(linkName, actionStrings);

                } catch (Exception exception) {
                }
            }

            mFirebaseAnalytics.logEvent("update_downloaded", null);
        }

        @Override
        public void onInstalled() {
            mFirebaseAnalytics.logEvent("update_installed", null);
        }

        @Override
        public void onPending() {
        }

        @Override
        public void onFailure(@NonNull Exception exception) {
            mFirebaseAnalytics.logEvent("update_failure", null);
        }
    };

    private void setStatusBarColor() {
        Window window = getWindow();
        MFAppContext.getInstance().setStatusBarColor(window.getStatusBarColor());
    }


    private void getXMDNResponse(Boolean mvm_sign_out, Action action) {


        Call<Response<String>> call = RetrofitInstance.getInstance("", false).getMyApi().getXMDNResponse();
        call.enqueue(new Callback<>() {
            @Override
            public void onResponse(Call<Response<String>> call, Response<Response<String>> response) {
                if (response.code() == 400) {
                    MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, GET_NETWORK_DEVICE_TOKEN_COMPLETE, String.valueOf(System.currentTimeMillis()), MonitoringUtils.networkTokenUUID, "fourth");
                    String redirectResponseToWebURL = response.raw().toString();
                    MobileFirstApplication.getLogHandler().e(TAG, "headers values: " + response.headers().toString());
                    MobileFirstApplication.getLogHandler().e(TAG, "headers values: " + response.headers().get("location"));
                    MobileFirstApplication.getLogHandler().e(TAG, "headers values: " + redirectResponseToWebURL);
                    String athMValue = Uri.parse(redirectResponseToWebURL).getQueryParameter("ath-m");
                    MobileFirstApplication.getLogHandler().e(TAG, "XMDN Value: " + athMValue);

                    // AuthM 302 can fail with different error check for following values if Athm contains that return error.
                    if (athMValue.contains("error-Ath-m-401") || athMValue.contains("error-KM-402") || athMValue.contains("error-Mbee-403")) {
                        if (mvm_sign_out && action != null) {
                            mLaunchApplicationPresenter.signOutUser(SetUpActivity.this.getSSOList(), action, SetUpActivity.this.getMDNHashList(), SetUpActivity.this.getMDN(),
                                    SetUpActivity.this.getHashList(), SetUpActivity.this.getTokenHashList(), false, null);

                        } else {
                            MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "azzassd");
                            mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, null,
                                    getMDNHashList(), getHashList(), getTokenHashList(),
                                    null, CommonAppUtil.getSmartLinkParameters(),
                                    Utils.getImei(getApplicationContext()),
                                    FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), null);
                        }
                    } else {
                        MobileFirstApplication.getLogHandler().e(TAG, "XMDN Value: " + athMValue);
                        ArrayList<XMDNToken> xmdnList = new ArrayList<>();
                        XMDNToken token = new XMDNToken(getMDN(), athMValue, null, null, null, null);
                        xmdnList.add(token);
                        xmdnTokenArrayList = xmdnList;
                        if (mvm_sign_out && action != null) {
                            mLaunchApplicationPresenter.signOutUser(SetUpActivity.this.getSSOList(), action, SetUpActivity.this.getMDNHashList(), SetUpActivity.this.getMDN(),
                                    SetUpActivity.this.getHashList(), SetUpActivity.this.getTokenHashList(), false, SetUpActivity.this.getXMDNList());

                        } else {
                            MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aassdccc");
                            mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, null,
                                    getMDNHashList(), getHashList(), getTokenHashList(),
                                    null, CommonAppUtil.getSmartLinkParameters(),
                                    Utils.getImei(getApplicationContext()),
                                    FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
                        }

                    }

                }

            }

            @Override
            public void onFailure(Call<Response<String>> call, Throwable t) {
                if (mvm_sign_out && action != null) {
                    mLaunchApplicationPresenter.signOutUser(SetUpActivity.this.getSSOList(), action, SetUpActivity.this.getMDNHashList(), SetUpActivity.this.getMDN(),
                            SetUpActivity.this.getHashList(), SetUpActivity.this.getTokenHashList(), false, null);

                } else {
                    MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aaffssd");
                    mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, getSSOList(),
                            getMDNHashList(), getHashList(), getTokenHashList(),
                            null, CommonAppUtil.getSmartLinkParameters(),
                            Utils.getImei(getApplicationContext()),
                            FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
                }

                MobileFirstApplication.getLogHandler().e(TAG, "XMDN error" + t.getMessage());

            }

        });
    }


    private void startLaunchAppFlow(boolean isRestart) {
//        MFAppContext.getInstance().clearProperties();
        MFAppContext.clearInstance();
        String sourceID = null;
        MFAppContext.getInstance().setActivityTag(this.getClass().getName());
        if (getIntent().getStringExtra(Constants.KEY_DM_PREF_SOURCE_ID) != null) {
            MFAppContext.getInstance().setStringProperty(Constants.KEY_DM_PREF_SOURCE_ID, getIntent().getStringExtra(Constants.KEY_DM_PREF_SOURCE_ID));
            sourceID = getIntent().getStringExtra(Constants.KEY_DM_PREF_SOURCE_ID);
            InMemoryCacheRepository.removeEntry(new Key(SetupConverterLoader.SETUP_MULTI_USER));
        }

        initDataMeter();

        extraContinueToApp = getIntent().getStringExtra(CONTINUE_TO_APP);
        if (extraContinueToApp != null && !extraContinueToApp.isEmpty()) {
            mLaunchApplicationPresenter.setContinueToApp(extraContinueToApp);
        }

        if (getIntent() != null && getIntent().getStringExtra(IS_RDR_VERIFIED) != null) {
            mLaunchApplicationPresenter.setIsRDRVerified(getIntent().getStringExtra(IS_RDR_VERIFIED));
        }

        if (getIntent() != null && getIntent().getStringExtra(SOURCE_ID_KEY) != null) {
            sourceID = getIntent().getStringExtra(SOURCE_ID_KEY);
            MFAppContext.getInstance().setSourceId(sourceID);
            MobileFirstApplication.getLogHandler().d(TAG, "sourceID: " + sourceID);
        }

        setExtraParam();


        initViews();
        String mUserFlow = null;
        mUserFlow = setUpUserFlow(mUserFlow);
        if (isRestart) {
            mUserFlow = SIGN_OUT;
        }

        clearBackStack();


        mSplashFragment = SplashFragment.newInstance(mUserFlow);
        replaceFragment(mSplashFragment, false);

//        setLocale(sourceID);
        /*LayoutTransition lLayoutTransition = mLinearLayoutMain.getLayoutTransition();
        lLayoutTransition.setStartDelay(LayoutTransition.APPEARING, 0);
        lLayoutTransition.setStartDelay(LayoutTransition.CHANGE_DISAPPEARING, 0);*/

    }


//    private void setLocale(String sourceID) {
//        Locale locale;
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
//            locale = getResources().getConfiguration().getLocales().get(0);
//        } else {
//            locale = getResources().getConfiguration().locale;
//        }
//
//        if (locale.getLanguage().equalsIgnoreCase("es") ||
//                locale.getLanguage().equalsIgnoreCase("es_US") ) {
//            launchHybrid(sourceID, null);
//        }
//    }

    private void setExtraParam() {
        if (getIntent() != null && getIntent().getBundleExtra(EXTRAPARAM) != null) {
            // Request coming from Prepay MF. Storing to extra Params to send to MF Server
            Bundle bundle = getIntent().getBundleExtra(EXTRAPARAM);
            extraParams = (HashMap<String, String>) bundle.getSerializable("map");
        }
    }


    public boolean isPackageInstalled() {
        try {
            return getPackageManager().getApplicationInfo("com.verizon.mips.services", 0).enabled;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    private String setUpUserFlow(String mUserFlow) {
        if (getIntent().getExtras() != null) {
            mUserFlow = getIntent().getExtras().getString(Constants.EXTRA_USER_FLOW);

            String launchPoint = getIntent().getExtras().getString(Constants.EXTRA_LAUNCH_POINT);
            if (Constants.LAUNCH_POINT_NOTIFICATION.equalsIgnoreCase(launchPoint)) {
                sharedPreferencesUtil.increaseLaunchNotificationCount(false);
            } else {
                sharedPreferencesUtil.increaseLaunchIconCount(false);
            }
        }
        return mUserFlow;
    }

    private void initDataMeter() {
        String sourceId = getIntent().getStringExtra(Constants.KEY_DM_PREF_SOURCE_ID);
        MVMSettings mvmSettings = MVMSettings.getInstance(getApplicationContext());
        if (sourceId != null && (isSourceIdValid(sourceId))) {
            int triggerCode = MMGConstants.Codes.WIDGET_TAPPED;
            if (mvmSettings.getSettingInt(MMGConstants.RETRY_COUNTER) == MAX_RETRY_COUNT) {
                mvmSettings.saveSetting(MMGConstants.RETRY_COUNTER, mvmSettings.getSettingInt(MMGConstants.RETRY_COUNTER) - 1, true);
                triggerCode = MMGConstants.Codes.WIDGET_FORCE_TAPPED;
            }
            CommonUtils.updateMMG(getApplicationContext(), triggerCode, null, null);
        } else {
            CommonUtils.updateMMG(getApplicationContext(), MMGConstants.Codes.APPLICATION_LAUNCH, null, null);
        }
    }

    private boolean isSourceIdValid(String sourceId) {
        return sourceId.equals(MVMRCConstants.DATAMETER) || sourceId.equals(MVMRCConstants
                .DATAMETER_LTE) || sourceId.equals(MVMRCConstants.KEY_MVMRCDM_SOURCEID);
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        MobileFirstApplication.getLogHandler().d(TAG, "on new intent");
        if (intent != null && intent.getData() != null) {
            Uri uri = intent.getData();
            if (uri != null && uri.toString().contains(LAUNCH_REDIRECT_URL)) {
                getAuth(uri);
            } else if (uri != null && uri.toString().contains(OAUTH_COMPLETE)) {
                eventBus.postSticky(new OAuthCompleteEvent());
            }
        }
        if (intent.getExtras() != null) {
            String authenticateBySimpleForm = intent.getExtras().getString(Constants.EXTRA_USER_FLOW);
            if (SIGN_OUT.equalsIgnoreCase(authenticateBySimpleForm)) {
                setIntent(intent);
                startLaunchAppFlow(true);

                shouldShowToolbarAlways = false;
                disableToolBar();// case to hide toolbar when session timed out from Prospect flow in setup activities

            } else if (!StringUtils.isEmpty(authenticateBySimpleForm)) {
                getCountryCode();
            } else if (intent.getExtras().containsKey(SUPPORT_CHANNEL_KEY_NAME)) {
                openSupportDrawer();
                SupportUtils.chatMessageCount = 0;
                ChatServiceManager.getInstance().clearNotification();
            } else {
                deepLinkMobileFirst(intent);
            }
        } else {
            deepLinkMobileFirst(intent);
        }
    }

    @Override
    protected NoNetworkDialogFragment getNoNetworkDialogFragment() {
        return NoNetworkDialogFragmentFactory.buildForLaunchAppWithRestartAction(this);
    }

    private void initViews() {
        //(findViewById(R.id.toolbar)).setVisibility(View.GONE);
//        mLinearLayoutMain = (RelativeLayout) findViewById(R.id.topContainer);
    }

    private void prepareRequestWithSSO() {

        String mUserFlow = null;
        Boolean mvm_sign_out = null;
        if (getIntent().getExtras() != null) {

            mUserFlow = getIntent().getExtras().getString(Constants.EXTRA_USER_FLOW);
            mvm_sign_out = getIntent().getExtras().getBoolean(MVM_SIGN_OUT);

        }
        if (mfSignOutFlow(mUserFlow)) {
            Action signOutAction = getSignOutAction();
            if (signOutAction != null) {
                startSignOutFlow(signOutAction, mvm_sign_out);
            } else {
                startSSOService();
            }
        } else if (euiccActivationSignInFlow(mUserFlow)) {
            starteUICCLoginFlow();
        } else if (getMDN() == null || getMDN().equalsIgnoreCase("")) {
            makeLaunchAppRequest();
        } else {
            startSSOService();
        }
    }

    private boolean mfSignOutFlow(String mUserFlow) {
        return mUserFlow != null && mUserFlow.equalsIgnoreCase(SIGN_OUT);
    }

    @Nullable
    private Action getSignOutAction() {
        Action signOutAction = getIntent().getExtras().getParcelable(NavigationMenuFragment.ACTION);
        if (signOutAction == null) {
            String str = getIntent().getExtras().getString(NavigationMenuFragment.ACTION);

            signOutAction = new Action(RESTART_ACTION, SIGN_OUT, SIGN_OUT_PAGE_TYPE, MOBILE_FIRST_APPLICATION_CONTEXT,
                    Action.PresentationStyle.ROOT, "");
        }
        return signOutAction;
    }

    private void prepareRequestWithUserInput() {
        String mUserFlow = null;

        Boolean mvm_sign_out = null;
        if (getIntent().getExtras() != null) {
            mUserFlow = getIntent().getExtras().getString(Constants.EXTRA_USER_FLOW);
            if (getIntent().getExtras().getString(Constants.EXTRA_MDN) != null)
                ApnResourceServiceRequestor.MDN = getIntent().getExtras().getString(Constants.EXTRA_MDN);


            if (euiccActivationSignInFlow(mUserFlow)) {
                Constants.appUrl = MVMSettings.getInstance().getSettingString("ESIM_MVM_URL");
            } else if (getIntent().getExtras().getString(Constants.EXTRA_URL_VALUE) != null) {
                Constants.appUrl = getIntent().getExtras().getString(Constants.EXTRA_URL_VALUE);
            }
            if (getIntent().getExtras().getString(Constants.EXTRA_PREPAY_URL) != null) {
                MVMRCConstants.prepay_mfServerURL = getIntent().getExtras().getString(Constants.EXTRA_PREPAY_URL);
            }

            // Adding for international feed card..
            if (getIntent().getExtras().containsKey(Constants.IS_INTERNATIONAL_CHECKED)) {
                if (getIntent().getExtras().getBoolean(Constants.IS_INTERNATIONAL_CHECKED)) {
                    sharedPreferencesUtil.setCountryCode("uk");
                }
            }

            mvm_sign_out = getIntent().getExtras().getBoolean(MVM_SIGN_OUT);

        }
        executeRequest(mUserFlow, mvm_sign_out);
    }

    private void executeRequest(String mUserFlow, Boolean mvm_sign_out) {
        ArrayList<Sso> ssolist;
        useDummySSO = true;
        if (useDummySSO && (Config.logging && Config.isPostpayTest))
            ssolist = getDummySSOList();
        else
            ssolist = getSSOList();
        Action signOutAction = null;
        if (getIntent().getExtras() != null) {
            signOutAction = getIntent().getExtras().getParcelable(NavigationMenuFragment.ACTION);
        }
        if (signOutAction != null && signOutAction.getAppContext().equalsIgnoreCase(Constants.FIOS_ONLY_APPCONTEXT)
                && !android.text.TextUtils.isEmpty(signOutAction.getRequestUrl()) && mfSignOutFlow(mUserFlow)) {
            mLaunchApplicationPresenter.signOutFiosOnlyUser(ssolist, signOutAction, getMDNHashList(), getMDN(),
                    getHashList(), getTokenHashList(), mvm_sign_out, SetUpActivity.this.getXMDNList());
            return;
        } else if (signOutAction == null && !TextUtils.isEmpty(sharedPreferencesUtil.getfiosOnlyContext()) && !TextUtils.isEmpty(launchAppAction.getRequestUrl())) {
            MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aavvssd");
            mLaunchApplicationPresenter.authenticateFiosOnly(launchAppAction, ssolist,
                    sharedPreferencesUtil.getDeviceMDNHashMap(), sharedPreferencesUtil.getRememberMeHashMapList(),
                    sharedPreferencesUtil.getUserAuthenticateMapList(), FIOS_ONLY_PAGE_TYPE,
                    null, "",
                    sharedPreferencesUtil.getSiteCatalystHash());
            return;
        }
        if (mUserFlow != null && mUserFlow.equalsIgnoreCase("User Flow")) {
            startLoginFlow();
        } else if (euiccActivationSignInFlow(mUserFlow)) {
            starteUICCLoginFlow();
        } else if (tokenAndRememberMeFlow(mUserFlow)) {
            authenticateUsingTokenAndRememberMe();
        } else if (mfSignOutFlow(mUserFlow)) {
            showProgressSpinner();
            // Action signOutAction = getIntent().getExtras().getParcelable(NavigationMenuFragment.ACTION);
            if (signOutAction == null)
                signOutAction = new Action(Action.Type.OPEN_PAGE, SIGN_OUT, StringUtils.EMPTY,
                        LaunchApplicationPresenter.MOBILE_FIRST_SS, PUSH);
            if (MVMSettings.getInstance().getSettingBoolean("DUMMY_SSO_FLAG") && Config.enableTestScreen)
                startDummySignOutFlow(signOutAction, mvm_sign_out);
            else
                startSignOutFlow(signOutAction, mvm_sign_out);
        } else {
            startSSOService();
        }
    }

    private void authenticateUsingTokenAndRememberMe() {
        if (MVMSettings.getInstance().getSettingBoolean(ENABLE_PROSPECT)) {
            ApnResourceServiceRequestor.MDN = "1234567892";
        }
        if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)
                && !TextUtils.isEmpty(ApnResourceServiceRequestor.MDN)
                && useDummySSO) {
            mSSOList = getDummySSOList();
            if (checkIfUserisDeviceAuthenticated(mSSOList)) {
                PageCacheRepository pageCacheRepository = new PageCacheRepository();
                if (StringUtils.isNotEmpty(MFSingleton.INSTANCE.getCacheFeedResponse())) {
                    pageCacheRepository.saveToCache(null, MFSingleton.INSTANCE.getCacheFeedResponse());
                }
                showCachedFeeds(new PageCacheDataListener() {
                    @Override
                    public void onTaskFinished(String result) {
                        loadFeedFromCacheFinished(result);
                    }
                });
            } else {
                startDummyTokenFlow();
            }
        } else if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)
                && !TextUtils.isEmpty(ApnResourceServiceRequestor.MDN)
                && sendXMDN) {
            sendXMDNFlow();
        } else if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)
                && TextUtils.isEmpty(ApnResourceServiceRequestor.MDN)
                && !useDummySSO) {
            if (NetworkUtils.isDirectConnectivityAvailable(this)) {
                MobileFirstApplication.getLogHandler().d(TAG, "APN totally removed");
                MFAppContext.getInstance().disableAPN();
                prepareRequestWithSSO();
            }
        }
		/*else if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)
                && ("https://mobile-exp.vzw.com".equalsIgnoreCase(appUrl) || TextUtils.isEmpty(ResourceServiceRequestor.MDN))) {
            startSSOService();
        }*/
        else {
            startLoginFlow();
        }
    }

    private boolean tokenAndRememberMeFlow(String mUserFlow) {
        return mUserFlow != null && mUserFlow.equalsIgnoreCase(Constants.TOKEN_PLUS_REMEMBER_ME);
    }

    private boolean euiccActivationSignInFlow(String mUserFlow) {
        return mUserFlow != null && mUserFlow.equalsIgnoreCase(Constants.EXTRA_EUICC_SIGN_IN);
    }

    private void startSSOService() {
        log.d(TAG, "startSSOService, ssoavailable " + isSilentSSOAvailable(getApplicationContext()));
        if (isSilentSSOAvailable(getApplicationContext())) {
            MonitoringUtils.deviceTokenUUID = MonitoringUtils.genrateUUID();
            MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, GET_MVS_DEVICE_TOKEN, String.valueOf(System.currentTimeMillis()), MonitoringUtils.deviceTokenUUID, "fifth");
            try {
                authenticationHelper.setTimeOutInMs(TIMEOUT_MS);
                authenticationHelper.generateSSOListAsync(this);
            } catch (Exception e) {
                log.d(TAG, "exception while starting sso " + e.toString());
            }
        } else {
            log.d(TAG, "makeLaunchAppRequest");
            makeLaunchAppRequest();
        }
    }

    private void makeLaunchAppRequest() {
        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);
        }
        String mUserFlow = null;
        if (getIntent().getExtras() != null) {
            mUserFlow = getIntent().getExtras().getString(Constants.EXTRA_USER_FLOW);
        }

        if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)) {
            if (euiccActivationSignInFlow(mUserFlow)) {
                starteUICCTokenFlow();
            } else if (!getMDN().equals("")) {
                startTokenFlow();
            } else {
                startLoginFlow();
            }


        } else if (euiccActivationSignInFlow(mUserFlow)) {
            starteUICCLoginFlow();
        } else {
            startLoginFlow();
        }

    }

    private void startDummySignOutFlow(Action action, Boolean mvm_sign_out) {

        mLaunchApplicationPresenter.signOutUser(getDummySSOList(), action, getMDNHashList(), getMDN(),
                getHashList(), getTokenHashList(), mvm_sign_out, SetUpActivity.this.getXMDNList());
    }

    private void getCountryCode() {
        if (!PermissionUtil.permissionsGranted(this, PermissionUtil.LOCATION_PERMISSION_ARRAY) &&
                PermissionUtil.shouldShowDisclaimerDialog(this, sharedPreferencesUtil)) {
            MFAppContext.dismissSplash = true;
            DialogUtils.showDisclaimerDialog(this, this);
        } else {
            startGeocoder();
        }

    }

    @Override
    public void onDisclaimerViewed() {
        ActivityCompat.requestPermissions(this,
                new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}
                , PermissionUtil.LOCATION_PERMISSION_REQUEST);
    }

    private void startGeocoder() {
        fetchDeviceRealTimeLocation();
        String countryCode = NetworkUtils.getCountryCodeFromTM(this);
        StartServerRequest(countryCode);

    }

    private void fetchDeviceRealTimeLocation() {
        //Intent intent = new Intent("android.intent.action.LOCATION_TRACKING_SERVICE");
        //intent.setPackage("com.vzw.mobilefirst");
        Intent intent = new Intent(this, LocationTrackingService.class);
        startService(intent);
        MobileFirstApplication.getLogHandler().e(TAG, "locationtrackingservice started");
    }

    private void startSignOutFlow(Action action, Boolean mvm_sign_out) {
        authenticationHelper.setTimeOutInMs(TIMEOUT_MS);

        authenticationHelper.generateSSOListAsync(new AuthenticationHelper.SSOGeneratorCallback() {
            @Override
            public void onSSOListGenerated(@org.jetbrains.annotations.Nullable ArrayList<Sso> ssoList) {
                mSSOList = ssoList;
                if (sendXMDN || isNOSSOAvailable()) {
                    if (isWriteSettingPermissionEnabled()) {
                        xMDN(true, action);
                        return;
                    }
                }
                showProgressSpinner();
                mLaunchApplicationPresenter.signOutUser(SetUpActivity.this.getSSOList(), action, SetUpActivity.this.getMDNHashList(), SetUpActivity.this.getMDN(),
                        SetUpActivity.this.getHashList(), SetUpActivity.this.getTokenHashList(), mvm_sign_out, SetUpActivity.this.getXMDNList());
            }
        });
    }


    private boolean isNOSSOAvailable() {
        boolean isNoSSO = false;
        if (Config.enableTestScreen && useDummySSO == true) {
            return isNoSSO;
        }
        if (getSSOList() != null && getSSOList().size() == 0) {
            isNoSSO = true;
        }
        if (getSSOList() != null) {
            for (Sso sso : getSSOList()) {
                if (null == sso.getSsoToken()) {
                    isNoSSO = true;
                }
            }
        }
        return isNoSSO;
    }

    private void startLoginFlow() {
        Credentials mDefaultCredentials = new Credentials("", "", false, false);
        if (extraContinueToApp != null && !extraContinueToApp.isEmpty()) {
            mLaunchApplicationPresenter.setContinueToApp(extraContinueToApp);
            HashMap<String, String> map = new HashMap<>();
            map.put(CONTINUE_TO_APP, extraContinueToApp);
            launchAppAction.setExtraParams(map);
        }
        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);
        }
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aassdsd");
        mLaunchApplicationPresenter.authenticateUsingBlankCredentials(launchAppAction, mDefaultCredentials,
                getMDNHashList(), getHashList(), getTokenHashList()
                , SetUpActivity.class.getSimpleName(), null, CommonAppUtil.getSmartLinkParameters(),
                FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash());//sharedPreferencesUtil.getRememberMeHashMapList()
    }

    private void starteUICCLoginFlow() {
        Credentials mDefaultCredentials = new Credentials("", "", false, false);
        /*if (extraContinueToApp != null && !extraContinueToApp.isEmpty()) {
            mLaunchApplicationPresenter.setContinueToApp(extraContinueToApp);
            HashMap<String, String> map = new HashMap<>();
            map.put(CONTINUE_TO_APP,extraContinueToApp);
            launchAppAction.setExtraParams(map);
        }*/
        //OpenPageAction eUICCLaunchAppAction = new OpenPageAction("", LAUNCHAPP, Constants.PLAB_SS, "");

        Map<String, Object> extraParams = new HashMap<>();
        EsimHelper esimHelper = EsimHelper.getInstance();
        if (esimHelper != null) {
            extraParams.put(ACTIVATION_EID, esimHelper.getEid());
            esimHelper.setEimMVMResponseState();
        }
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aasaasd");
        mLaunchApplicationPresenter.eUICCAuthenticateUsingBlankCredentials(launchAppAction, mDefaultCredentials,
                /*getMDNHashList()*/null,/*getHashList()*/null, getTokenHashList()
                , SetUpActivity.class.getSimpleName(), extraParams, CommonAppUtil.getSmartLinkParameters(),
                FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash());//sharedPreferencesUtil.getRememberMeHashMapList()
    }

    private void startDummyTokenFlow() {

        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);

        }
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aaswwsd");
        mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, getDummySSOList(),
                getMDNHashList(), getHashList(), getTokenHashList(),
                null, CommonAppUtil.getSmartLinkParameters(),
                Utils.getImei(getApplicationContext()),
                FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
    }

    private void startBackgroundTokenFlow() {

        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);

        }
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aaswwsd");
        mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, getSSOList(),
                getMDNHashList(), getHashList(), getTokenHashList(),
                null, CommonAppUtil.getSmartLinkParameters(),
                Utils.getImei(getApplicationContext()),
                FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
    }

    private void sendXMDNFlow() {

        startSSOService();
    }

    private ArrayList<Sso> getDummySSOList() {
        ArrayList<Sso> ssoArrayList = new ArrayList<>();
        if (!MVMSettings.getInstance().getSettingBoolean(ENABLE_PROSPECT)) {
            String carrierName = MVMSettings.getInstance().getSettingString(CARRIER_NAME);
            if (carrierName == null || carrierName.length() == 0) {
                carrierName = ApnResourceServiceRequestor.CARRIER;
            }
            Sso sso = new Sso(ApnResourceServiceRequestor.MDN, ApnResourceServiceRequestor.VALUE,
                    ApnResourceServiceRequestor.SIM_OPERATOR_CODE, ApnResourceServiceRequestor.NETWORK_OPERATOR_CODE,
                    carrierName, "");
            ssoArrayList.add(sso);
            boolean enable_dsds = MVMSettings.getInstance().getSettingBoolean(ENABLE_DSDS);
            if (enable_dsds) {
                String secondMDN = MVMSettings.getInstance().getSettingString(TESTMDN_DSDS);
                if (secondMDN != null) {
                    String carrierNameDsds = MVMSettings.getInstance().getSettingString(TESTCARRIER_DSDS);
                    if (carrierNameDsds == null || carrierNameDsds.length() == 0) {
                        carrierNameDsds = ApnResourceServiceRequestor.CARRIER;
                    }
                    Sso sso_dsds = new Sso(secondMDN, ApnResourceServiceRequestor.VALUE,
                            ApnResourceServiceRequestor.SIM_OPERATOR_CODE, ApnResourceServiceRequestor.NETWORK_OPERATOR_CODE,
                            carrierNameDsds, "");
                    ssoArrayList.add(sso_dsds);
                }
            }
        }

        return ssoArrayList;
    }

    private void startTokenFlow() {
        log.d(TAG, "startTokenFlow");

        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);
        }
        Locale locale = getLocale();
        if (!sharedPreferencesUtil.getPreviousLanguage().equals("")) {
            String previousLang = sharedPreferencesUtil.getPreviousLanguage();

            String currentLang = locale.getLanguage() + HYPHEN + locale.getCountry();
            if (!previousLang.equalsIgnoreCase(currentLang))
                InMemoryCacheRepository.removeEntry(new Key(SetupConverterLoader.SETUP_MULTI_USER));
        }

        sharedPreferencesUtil.saveLanguage(locale.getLanguage() + HYPHEN + locale.getCountry());
        ArrayList<Sso> sSOList;
        useDummySSO = true;
        if (PermissionUtil.checkPermissions(this, PermissionUtil.PHONE_STATE_PERMISSION)
                && !TextUtils.isEmpty(ApnResourceServiceRequestor.MDN)
                && useDummySSO) {
            if (checkIfUserisDeviceAuthenticated(mSSOList)) {
                PageCacheRepository pageCacheRepository = new PageCacheRepository();
                if (StringUtils.isNotEmpty(MFSingleton.INSTANCE.getCacheFeedResponse())) {
                    pageCacheRepository.saveToCache(null, MFSingleton.INSTANCE.getCacheFeedResponse());
                }
                showCachedFeeds(new PageCacheDataListener() {
                    @Override
                    public void onTaskFinished(String result) {
                        loadFeedFromCacheFinished(result);
                    }
                });
            } else {
                startDummyTokenFlow();
            }
            return;
        } else if ((sendXMDN && Config.enableTestScreen) || isNOSSOAvailable()) {
            sSOList = null;
            if (isWriteSettingPermissionEnabled()) {
                MonitoringUtils.networkTokenUUID = MonitoringUtils.genrateUUID();
                MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, GET_NETWORK_DEVICE_TOKEN, String.valueOf(System.currentTimeMillis()), MonitoringUtils.networkTokenUUID, "sixth");
                xMDN(false, null);
                return;
            } else {
                sSOList = getSSOList();
            }
        } else {
            sSOList = getSSOList();
        }


        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aassd");

        mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, sSOList,
                getMDNHashList(), getHashList(), getTokenHashList(),
                null, CommonAppUtil.getSmartLinkParameters(),
                Utils.getImei(getApplicationContext()),
                FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());


    }

    private boolean isWriteSettingPermissionEnabled() {
        boolean permission;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            permission = Settings.System.canWrite(getApplicationContext());
        } else {
            permission = ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_SETTINGS) == PackageManager.PERMISSION_GRANTED;
        }
        return permission;
    }

    private void xMDN(Boolean mvm_sign_out, Action action) {
        CellularCallback callback = new CellularCallback() {
            @Override
            public void onCellularStartComplete() {
                super.onCellularStartComplete();
                MobileFirstApplication.getLogHandler().e(TAG, "cellular start");
                getXMDNResponse(mvm_sign_out, action);
            }

            @Override
            public void onCellularStartFailed(@NotNull CellularError error) {
                super.onCellularStartFailed(error);
                MobileFirstApplication.getLogHandler().e(TAG, "cellular error");
                xMDNTokenRequestFailed(mvm_sign_out, action);
            }

            @Override
            public void onCellularStopComplete() {
                super.onCellularStopComplete();
                MobileFirstApplication.getLogHandler().e(TAG, "cellular stop complete");
            }

            @Override
            public void onCellularStopFailed(@NotNull CellularError error) {
                super.onCellularStopFailed(error);
                xMDNTokenRequestFailed(mvm_sign_out, action);
            }
        };
        CellularClient client = new CellularClient(getAppContext());
        client.start(callback);
    }

    private void xMDNTokenRequestFailed(boolean mvm_sign_out, Action action) {
        if (mvm_sign_out && action != null) {
            mLaunchApplicationPresenter.signOutUser(SetUpActivity.this.getSSOList(), action, SetUpActivity.this.getMDNHashList(), SetUpActivity.this.getMDN(),
                    SetUpActivity.this.getHashList(), SetUpActivity.this.getTokenHashList(), false, SetUpActivity.this.getXMDNList());

        } else {
            MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aasbbsd");
            mLaunchApplicationPresenter.authenticateUsingToken(launchAppAction, getSSOList(),
                    getMDNHashList(), getHashList(), getTokenHashList(),
                    null, CommonAppUtil.getSmartLinkParameters(),
                    Utils.getImei(getApplicationContext()),
                    FeedUtils.getMDN(getApplicationContext()), sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
        }
    }

    private Locale getLocale() {
        Locale locale;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            locale = this.getResources().getConfiguration().getLocales().get(0);
        } else {
            locale = this.getResources().getConfiguration().locale;
        }
        return locale;
    }

    private void starteUICCTokenFlow() {
        log.d(TAG, "starteUICCTokenFlow");


        if (extraParams != null) {
            launchAppAction.setExtraParams(extraParams);
        }

        EsimHelper esimHelper = EsimHelper.getInstance();
        Map<String, Object> extraParams = new HashMap<>();
        if (esimHelper != null) {
            extraParams.put(ACTIVATION_EID, esimHelper.getEid());
            esimHelper.setEimMVMResponseState();
        }
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, AUTHENTICATION_START, String.valueOf(System.currentTimeMillis()), MonitoringUtils.authenticationUUID, "aasaasd");
        mLaunchApplicationPresenter.eUICCAuthenticateUsingToken(launchAppAction, getSSOList(),
                getMDNHashList(), getHashList(), getTokenHashList(),
                extraParams, CommonAppUtil.getSmartLinkParameters(), FeedUtils.getMDN(getApplicationContext()),
                sharedPreferencesUtil.getSiteCatalystHash(), getXMDNList());
    }

    private ArrayList<Sso> getSSOList() {
        return mSSOList;
    }

    private ArrayList<XMDNToken> getXMDNList() {
        return xmdnTokenArrayList;
    }


    private boolean isUserMDNValid(String userMDN) {
        return TextUtils.isEmpty(userMDN) ||
                "Select MDN".equalsIgnoreCase(userMDN);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        log.d(TAG, TAG + " ===== setup activity onRequestPermissionsResult");
        if (permissions.length > 0) {
            switch (requestCode) {
                case PermissionUtil.LOCATION_PERMISSION_REQUEST:
//                    if (!PermissionUtil.checkPermissions(this, PermissionUtil.LAUNCH_PERMISSIONS)) {
//                        PermissionUtil.requestGroupPermissions(this, PermissionUtil
//                                .LAUNCH_PERMISSIONS, PermissionUtil.LAUNCH_PERMISSION_REQUEST);
//                    } else {
                    sharedPreferencesUtil.saveIsFirstTimeLocationPrompt(true);
                    startGeocoder();
//                    }
                    break;
//                case PermissionUtil.LAUNCH_PERMISSION_REQUEST:
//                    startGeocoder();
//                    break;
                default:
                    break;
            }
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onDestroy() {
        cancelExecutor();
        super.onDestroy();
        UtilLog.d(TAG, "onDestroy called");
        popDataSessionManager.clear();
        if (topNotificationFragment != null) topNotificationFragment.clearTimer();
        if (loginClient != null)
            loginClient = null;
        ConnectionPoolingManager.getInstance().stopConnectThroughPoolTimer();
        if (!SupportUtils.chatState.equals(SupportChatResponseEvent.ACTION_CHAT_END)) {
            MobileFirstApplication.getLogHandler().d(TAG, "Closing Live chat Session");
            if (!SupportConstants.LIVE_CHAT_STATE.equalsIgnoreCase(SupportChatResponseEvent.ACTION_ASYNC_START_CHAT)) {
                MobileFirstApplication.getLogHandler().d(TAG, "Closed Live chat");
                mSupportSearchPresenter.supportFragmentCallback.isChatEndClicked = true;
                ChatServiceManager.getInstance().setAppDestroyed(true);
                ChatServiceManager.getInstance().closeChat();
            }
        }
        //Delete all the decrypted files...
        MFAppContext.getInstance().setInitLaunchReq(true);
        stopFallDetectionService();
        DialogUtils.clearCookies(getApplicationContext());
        MVMSettings.getInstance().saveSetting(ENABLE_PREPAY_ESIM_FLAG, false, true);
    }

    @Override
    protected void onPause() {
        super.onPause();
        //Supress the exception seen when pausing reactInstanceManager
        try {
            popDataSessionManager.unregisterEventBus();
            if (inStoreBarSessionManager != null) {
                inStoreBarSessionManager.unregisterEventBus();
            }
            if (isSessionRunning) {
                wpsDeviceBackgroundCallHandler.pauseBackgroundCall();
            }

        } catch (AssertionError ex) {
            UtilLog.e(TAG, "mReactInstanceManager assertion error.. ");
        } catch (Exception ex) {
            UtilLog.e(TAG, "mReactInstanceManager Exception reading resuming");
        }

        //Log Feed Cards Seen to Server
//        logFeedCardsSeen();
    }


    public void cancelExecutor() {
        CountdownSingleton.shutdownAndSetExecutorToNull();
    }

    public boolean inTime() {
        if (timeStamp == 0) {
            return true;
        }
        long milisecs = dateProvider.today().getTimeInMillis() - timeStamp;
        long timeoutInSeconds = TimeUnit.MINUTES.toSeconds(TIME_OUT);
        long secondsPast = TimeUnit.MILLISECONDS.toSeconds(milisecs);
        if (secondsPast < timeoutInSeconds) {
            timeStamp = 0;
            return true;
        }
        return false;
    }

    private List<DeviceMDNHashMap> getMDNHashList() {
        List<DeviceMDNHashMap> hashList;
        hashList = sharedPreferencesUtil.getDeviceMDNHashMap();

        return hashList;

    }

    public List<RememberMeHashMap> getHashList() {

        List<RememberMeHashMap> hashList;
        hashList = sharedPreferencesUtil.getRememberMeHashMapList();

        return hashList;
    }

    private List<UserAuthenticateTokenHash> getTokenHashList() {

        List<UserAuthenticateTokenHash> tokenHashList;
        tokenHashList = sharedPreferencesUtil.getUserAuthenticateMapList();

        return tokenHashList;
    }

    @Override
    public int getMainLayout() {
        return R.layout.activity_home;
    }


    @Override
    public int getFragmentContainerResID() {
        GlobalContextSingleton.INSTANCE.setHomeContainerId(R.id.activity_home_main_container);
        return R.id.activity_home_main_container;
    }

    public void onEventMainThread(ToolbarEnableEvent event) {
        boolean enableToolbar = event.isShowToolbar();
        if (enableToolbar) {
            enableToolBar();
        } else {
            if (!shouldShowToolbarAlways) {
                disableToolBar();
            }
        }
        stickyEventBus.removeStickyEvent(event);
    }

    public void onEventMainThread(ScrollToTopEvent event) {
        stickyEventBus.removeStickyEvent(event);

        Fragment fragment = getCurrentFragment();
        String tag = "";

        if (fragment != null)
            tag = fragment.getTag();


      //  if ("prospectWelcomeTrial".equals(tag) || "prospect_3_0_discover".equals(tag)) {

            LinearLayout list = findViewById(R.id.listTemplate);
            if (list == null)
                return;

            RecyclerView recyclerView = list.findViewById(R.id.recycler_view);
            if (recyclerView == null)
                return;

            RecyclerView.SmoothScroller smoothScroller = new LinearSmoothScroller(recyclerView.getContext()) {
                @Override
                protected int getVerticalSnapPreference() {
                    return LinearSmoothScroller.SNAP_TO_START;
                }
            };

            smoothScroller.setTargetPosition(0);
            if (recyclerView.getLayoutManager() != null)
                recyclerView.getLayoutManager().startSmoothScroll(smoothScroller);
     //   }
    }

    public void onEventMainThread(ShowTabBarEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event.getTbam() != null) {
            tabBarAtomView.applyStyle(event.getTbam());
            tabBarAtomModel = event.getTbam();
        }
    }

    public void onEventMainThread(ToolbarAlwaysShowEvent event) {
        shouldShowToolbarAlways = event.getShouldAlwaysHaveToolbar();
        if (shouldShowToolbarAlways)
            enableToolBar();
        else
            disableToolBar();
        stickyEventBus.removeStickyEvent(event);

    }

    public void onEventMainThread(PageLoadEvent event) {
//        stickyEventBus.removeStickyEvent(event);
//        LogPageUtils.INSTANCE.logPageLoadTime(event.getEndTime(), event.getPageType());
    }


    public void onEventMainThread(OnExceptionEvent event) {
        removeSplashFragment();
        super.onEventMainThread(event);
    }

    public void onEventMainThread(OnConfirmDialogEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event.getActionId() == LaunchAppModel.LEAVINGAPP_CONFIRMATION_ID) {
            finish();
        } else {
            startGeocoder();
        }
    }

    public void onEventMainThread(DismissErrorDialogEvent event) {
        startLoginFlow();
    }

    public void onEventMainThread(MobileFirstExceptionEvent event) {
        MobileFirstApplication.getLogHandler().e(TAG, event.getException().toString());
        MobileFirstApplication.getLogHandler().e(TAG, "exception: " + event.getException());
        BaseFragment.setShowSendLogButton(Config.logging);
        if (event.getException() != null) {
            NewRelicEvents.sendExceptionToNewRelic(getAppContext(), event.getException());
            ErrorReportToServerUtil.Companion.logErrorCrashToServer(event.getException(), "Setup Activity", LogSeverity.Companion.getError(), "Unable to process your request at this moment.", AppState.Companion.getActive(), EventType.Companion.getFeError(), Constants.EMPTY);
        }
    }

    public void onEventMainThread(OnDrawerClosedEvent onDrawerClosedEvent) {
        setFabIconVisibility();
    }

    private void removeSplashFragment() {
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        transaction.remove(mSplashFragment).commit();
    }


    @Override
    protected void processEvent(ResponseHandlingEvent event) {
        removeSplashFragment();
        MFAppContext.dismissSplash = true;
        super.processEvent(event);
        if (event.getBaseResponse() != null && event.getBaseResponse().isBackgroundResponse()) {
            return;
        }
        if (event.getAction() == ResponseHandlingEvent.Action.NAVIGATE_TO_ACTIVITY) {
            if (event.getActivity() != null && StringUtils.isNotEmpty(event.getActivity().getName()) && !(PIPActivity.class.getName().equals(event.getActivity().getName())))
                finish();
        }
    }

    @Override
    public void onEventMainThread(ExecuteActionEvent event) {
        if (event.getAction() != null && Action.Type.BIOMETRIC_AUTHENTICATION.equals(event.getAction().getActionType())) {

        } else {
            super.onEventMainThread(event);
        }
    }

    public void StartServerRequest(String countryCode) {
        sharedPreferencesUtil.setCountryCode(countryCode);

        MobileFirstApplication.getLogHandler().d(TAG, "test " + Config.isPostpayTest + " log " + Config.logging);
        if (NetworkUtils.isFlighTModeOn(this) && !NetworkUtils.isWifiConnected(this)) {
            //show no network screen
            displayNoNetworkDialog();
        } else if (Config.logging && Config.isPostpayTest) {
            MobileFirstApplication.getLogHandler().d(TAG, "test build so no APN ");
            prepareRequestWithUserInput();
        } else {
            if (NetworkUtils.isDirectConnectivityAvailable(this)) {
                MobileFirstApplication.getLogHandler().d(TAG, "APN totally removed");
                MFAppContext.getInstance().disableAPN();
                prepareRequestWithSSO();
            } else {
                displayNoNetworkDialog();
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        //if we come back from the Device Health Check using the Back, we need to check for the no network
        //and display the dialog again.
        if (NetworkUtils.isFlighTModeOn(this) && !NetworkUtils.isWifiConnected(this)) {
            displayNoNetworkDialog();
            return;
        }
        if ((!NetworkUtils.isMobileDataConnected(this) && !NetworkUtils.isWifiConnected(this)) &&
                MVMSettings.getInstance().getSettingBoolean(ENABLE_PREPAY_ESIM_FLAG)) {
            displayPrepayNoNetworkDialog();
            return;
        }
        RemoteViewManager.setCurrentActivity(this);

        if (popDataSessionManager != null)
            popDataSessionManager.registerEventBus();
        if (inStoreBarSessionManager != null) {
            inStoreBarSessionManager.registerEventBus();
        }

        if (!SupportUtils.isChatEnded()) {

            MobileFirstApplication.getLogHandler().d(TAG, "On Resume Chat is not ended.");

            if (android.text.TextUtils.isEmpty(MFAppContext.getInstance().getLoggedInMdn())) {
                eventBus.post(new SupportChatResponseEvent(SupportChatResponseEvent.ACTION_CHAT_END));
            } else {
                EngageNotificationAction action = MMGAsyncNotificationReceiver.getCurrentNotification();

                if (action != null && chatManager != null) {
                    chatManager.initIsLiveTimer(null);
                    chatManager.appAsyncGetMessage(null);
                    Engage.clear(this, action.getTransactionId(), UUID.fromString(action.getUserId()));
                    MMGAsyncNotificationReceiver.setCurrentNotification(null);
                }
            }
        } else {
            //   MobileFirstApplication.getLogHandler().d(TAG, "Closing Top Bar Navigation");

            //   if (mSupportFragment != null)
            //    mSupportFragment.closeTopBarNotification();
        }
        if (isSessionRunning) {
            if (wpsDeviceBackgroundCallHandler != null) {
                if (getCurrentFragment() != null && getCurrentFragment() instanceof AddWPSDeviceFragment) {
                    wpsDeviceBackgroundCallHandler.setSamePageIndicator(true);
                }

                wpsDeviceBackgroundCallHandler.resumeBackgroundCall();
            }
        }

        if (getLastAddedFragment() != null && getLastAddedFragment() instanceof DelayedInterceptDialog) {
            ((DelayedInterceptDialog) getLastAddedFragment()).startTimer();
        }

    }

    @Override
    protected void onStop() {
        super.onStop();
        //if no network dialog was displayed...dismiss the dialog
        eventBus.post(new RemoveDialogEvent());
        startTime = System.nanoTime();
    }


    public void disableToolBar() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        if (toolbar != null) {
            toolbar.setVisibility(View.GONE);
        }
    }

    public void hideDivider() {
        View view = findViewById(R.id.line_divider);
        if (view != null) {
            view.setVisibility(View.GONE);
        }
    }

    public void enableToolbarAndSetTitle(String title) {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        MFTextView mHeaderName = toolbar.findViewById(R.id.ubiquitous_title_text_view);
        if (toolbar != null) {
            toolbar.setVisibility(View.VISIBLE);
        }
        if (title == null || title.trim().equals(""))
            return;
        mHeaderName.setText(Html.fromHtml(title), TextView.BufferType.SPANNABLE);
    }

    private void displayNoNetworkDialog() {

        MFAppContext.dismissSplash = true;

        //show no network screen
        final Activity activity = weakReferenceActivity.get();
        if (activity != null && !activity.isFinishing()) {
            if(!NetworkUtils.isInternetAvailable(this)
                    && sharedPreferencesUtil.getEnableOfflineFeedback()) {
                try {
                    if(getCurrentFragment() != null && getCurrentFragment().getPageType().equalsIgnoreCase(NETWORK_FEEDBACK_TAB))
                        return;
                    BaseResponse response = ResponseDeserializer.deserialize(new AtomicNoConnectionConverter().getFileContent(),null);
                    ResponseHandlingEvent event = ResponseHandlingEvent.createEventToReplaceFragment(AtomicNoConnectionFragment.newInstance(),response);
                    processEvent(event);
                } catch (Exception e) {
                    MobileFirstApplication.getLogHandler().e("EXCEPTION WHILE DISPLAY NO CONNECTION", e.getLocalizedMessage());
                }
            } else {
                FragmentManager fragmentManager = getSupportFragmentManager();
                NoNetworkDialogFragment noNetworkDialogFragment = (NoNetworkDialogFragment) fragmentManager.findFragmentByTag(NoNetworkDialogFragment.class.getSimpleName());
                //if condition is to avoid the triggering the dialog twice when the first time app is launched, because this dialog is also triggered from the SplashFragment
                if (noNetworkDialogFragment == null || !noNetworkDialogFragment.isAdded()) {
                    noNetworkDialogFragment = getNoNetworkDialogFragment();
                    noNetworkDialogFragment.show(fragmentManager, NoNetworkDialogFragment.class.getSimpleName());
                    MobileFirstApplication.getLogHandler().d(TAG, "flight mode is on");
                }
            }
        } else {
            Toast.makeText(SetUpActivity.this, "No Activity present to display the dialog", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void setHeaderName(String s) {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        if (toolbar.getVisibility() == View.VISIBLE) {
            MFTextView mHeaderName = toolbar.findViewById(R.id.ubiquitous_title_text_view);
            if (toolbar != null) {
                toolbar.setVisibility(View.VISIBLE);
            }
            if (s == null || s.trim().equals(""))
                return;
            mHeaderName.setText(Html.fromHtml(s), TextView.BufferType.SPANNABLE);
            eventBus.post(new SupportChatResponseEvent(SupportUtils.chatState));
        }
    }

    public void setHeaderName(SpannableStringBuilder headerName) {
        if (headerName == null)
            return;
        mHeaderName.setText(headerName, TextView.BufferType.SPANNABLE);
    }

    public void enableToolBar() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        if (toolbar != null) {
            (findViewById(R.id.toolbar)).setVisibility(View.VISIBLE);
        }
    }


    @Override
    public void enableToolbarAndSetTitleWrapper(String test) {
        enableToolbarAndSetTitle(test);
    }

    @Override
    public void onSSOListGenerated(@org.jetbrains.annotations.Nullable ArrayList<Sso> ssoList) {
        mSSOList = ssoList;
        MonitoringUtils.INSTANCE.logMonitoringEvents(API_CALL, GET_MVS_DEVICE_TOKEN_COMPLETE, String.valueOf(System.currentTimeMillis()), MonitoringUtils.deviceTokenUUID, "seven");
        if (checkIfUserisDeviceAuthenticated(mSSOList)) {
            PageCacheRepository pageCacheRepository = new PageCacheRepository();
            if (StringUtils.isNotEmpty(MFSingleton.INSTANCE.getCacheFeedResponse())) {
                pageCacheRepository.saveToCache(null, MFSingleton.INSTANCE.getCacheFeedResponse());
            }
            showCachedFeeds(new PageCacheDataListener() {
                @Override
                public void onTaskFinished(String result) {
                    loadFeedFromCacheFinished(result);
                }
            });

        } else {
            makeLaunchAppRequest();
        }
    }

    public View getHeaderDivider() {
        return headerDivider;
    }

    @Override
    public void removeLeftAdditionalButtons() {
        if (!shouldShowToolbarAlways) {
            mToolbar.setVisibility(View.GONE);
        }
        LinearLayout leftContainer = findViewById(R.id.left_button_container);
        leftContainer.removeViews(0, leftContainer.getChildCount());
    }

    @Override
    public void removeRightAdditionalButtons() {
        if (!shouldShowToolbarAlways) {
            mToolbar.setVisibility(View.GONE);
        }
        LinearLayout rightContainer = findViewById(R.id.menu_layout);
        rightContainer.removeViews(0, rightContainer.getChildCount() - 5);
        rightContainer.setVisibility(View.GONE);
    }

    @Override
    public void addLeftAdditionalButtons(List<BaseNavigationButtonAtomModel> leftList, String tintColor, boolean removeAll) {
        super.addLeftAdditionalButtons(leftList, tintColor, removeAll);
        mToolbar.setVisibility(View.VISIBLE);
    }

    @Override
    public void addRightAdditionalButtons(List<BaseNavigationButtonAtomModel> rightList, String tintColor, boolean removeAll) {
        super.addRightAdditionalButtons(rightList, tintColor, removeAll);
        mToolbar.setVisibility(View.VISIBLE);
        findViewById(R.id.menu_layout).setVisibility(View.VISIBLE);
    }

    @Override
    public void onBackPressed() {
        trackToolBarAction(Constants.ADOBE_VALUE_BACK_LINK);
        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START) || mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.END)) {

            if (CommonUtils.getCurrentOrientation() == Configuration.ORIENTATION_PORTRAIT) {
                mDrawerLayout.closeDrawers();
                return;
            }

        }
        if (navigationBarMoleculeModel != null
                && navigationBarMoleculeModel.getBackImageButton() != null
                && navigationBarMoleculeModel.getBackImageButton().getAction() != null
                && !Utils.isBackAction(ActionModelConverter.Companion.convertToAction(navigationBarMoleculeModel.getBackImageButton().getAction()))) {
            executeAction(navigationBarMoleculeModel.getBackImageButton().getAction(), false, null);
            return;
        }
        if (mDrawerLayout.isDrawerOpen(GravityCompat.END)) {
            if (eventBus != null)
                eventBus.post(new SupportUIEvent(SupportUIEvent.ACTION_CLOSE_SUPPORT_VIEW));
        }

        if (moduleModel != null) {
            leavingAppConfirm = moduleModel.getLeavingAppConfirm();
        }

       /* if (getCurrentFragment() instanceof SecureSigninFragment) {
            log.d(TAG, TAG + " =====Secure Signin on top");
            getSupportFragmentManager().popBackStack();
            stickyEventBus.postSticky(new FingerPrintAuthenticatedErrorEvent());
            return;
        }*/

        //UtilLog.d(HomesetupUtils.TAG , "OnBackPress name of fragment "+getCurrentFragment().getClass().getName());
        if (getCurrentFragment() != null && (getCurrentFragment() instanceof SlidingTabsBasicFragment ||
                getCurrentFragment() instanceof WebViewOpenURLInAppWebPunchOutFragment)) {
            super.onBackPressed();
        } else if (isBillFragment()) {
            super.onBackPressed();
        } else {
            if ((getSupportFragmentManager().getBackStackEntryCount() == 1) && (leavingAppConfirm != null)) {
                displayConfirmationDialog(leavingAppConfirm, null);
            } else
                super.onBackPressed();
        }
    }

    private boolean isBillFragment() {

        if (getCurrentFragment() != null && getCurrentFragment() instanceof TabFragment) {
            TabFragment fragment = (TabFragment) getCurrentFragment();
            if (fragment != null && fragment.isPunchOut()) {
                return true;
            }
        }

        if (getCurrentFragment() != null && getCurrentFragment() instanceof BillOverViewLandingFragment) {
            BillOverViewLandingFragment fragment = (BillOverViewLandingFragment) getCurrentFragment();
            if (fragment != null && fragment.isNextBillPunchOut()) {
                return true;
            }
        } else if (getCurrentFragment() != null && getCurrentFragment() instanceof FirstBillOverviewLandingFragment) {
            FirstBillOverviewLandingFragment fragment = (FirstBillOverviewLandingFragment) getCurrentFragment();
            if (fragment != null && fragment.isNextBillPunchOut()) {
                return true;
            }
        }
        return false;
    }

    protected void displayConfirmationDialog(
            final ConfirmOperation confirmOperation, StylesDataDialog
            stylesDataDialog) {
        ConfirmationDialogFragment dialogConfirmationFragment =
                ConfirmationDialogFragment.newInstance(createDataDialog(confirmOperation, stylesDataDialog));
        dialogConfirmationFragment.setOnConfirmationDialogEventListener(new ConfirmationDialogFragment.OnConfirmationDialogEventListener() {
            @Override
            public void onConfirmButtonPressed(DialogFragment dialogFragment) {
                OnAppExitEvent onAppExitEvent = new OnAppExitEvent();
                eventBus.post(onAppExitEvent);
                logAction(confirmOperation.getPrimaryAction());
                applicationDisposer.dispose();
                MFAppContext.getInstance().clearProperties();
                finish();
            }

            @Override
            public void onCancelButtonPressed(DialogFragment dialogFragment) {
                logAction(confirmOperation.getSecondaryAction());
                dialogFragment.dismiss();
            }

            // Logging clicks for Adobe Analytics
            private void logAction(Action action) {
                basePresenter.trackAction(action);
            }
        });
        if (!this.isFinishing()) {
            dialogConfirmationFragment.show(getSupportFragmentManager(), CONFIRMATION_DIALOG_FRAGMENT_TAG);
        }
    }

    private DataDialog createDataDialog(ConfirmOperation confirmOperation,
                                        StylesDataDialog stylesDataDialog) {
        Action primaryAction = confirmOperation.getPrimaryAction();
        Action secondaryAction = confirmOperation.getSecondaryAction();

        DataDialog.Builder builder = new DataDialog.Builder(confirmOperation.getConfirmationId(),
                confirmOperation.getTitle(), confirmOperation.getMessage())
                .okLabel(primaryAction)
                .cancelLabel(secondaryAction);
        builder.styles(stylesDataDialog);
        return builder.build();
    }

    public void hideChatIcons() {
        findViewById(R.id.support_chat_head).setVisibility(View.GONE);
        findViewById(R.id.support_chat_head_with_text).setVisibility(View.GONE);
    }

    @Override
    public void onDrawerOpened(View view) {
        super.onDrawerOpened(view);
//        if (CommonUtils.getCurrentOrientation() == Configuration.ORIENTATION_PORTRAIT && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)) {
//            SupportDataEvent supportDataEvent = new SupportDataEvent(SupportDataEvent.ACTON_LOAD_SUPPORT_CONTENT);
//            eventBus.post(supportDataEvent);
//        }
    }

    public void showFabIcon() {
        supportFABModel = MFAppContext.getInstance().getSupportFABModel();
        if (supportFABModel != null && supportFABModel.getSupportFabLongPressModel() != null)
            supportFABLongPressModel = MFAppContext.getInstance().getSupportFABModel().getSupportFabLongPressModel();
        if (supportFABModel != null) {
            showChatHeadIcon(supportFABModel);
        } else {
            hideChatHeadIcon();
        }
    }

    @SuppressLint("RestrictedApi")
    public void hideChatHeadIcon() {
        if (fabIcon != null && fabIconWithText != null) {
            fabIcon.setVisibility(View.GONE);
            fabIconWithText.setVisibility(View.GONE);
        }
        if (mToolbar != null && !SystemParamsUtil.getInstance().isDisableChatBotIcon() && supportFABModel == null) {
            mToolbar.findViewById(R.id.rl_support).setVisibility(View.GONE);
            mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
        }
    }

    @SuppressLint("RestrictedApi")
    public void showChatHeadIcon(SupportFABModel supportFABModel) {
        mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
        updateChatHeadIcon(SupportUtils.iconState);

        fabIcon.setOnTouchListener(new View.OnTouchListener() {
            boolean moved = false;

            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
                int action = motionEvent.getAction();
                if (action == MotionEvent.ACTION_DOWN) {

                    downRawX = motionEvent.getRawX();
                    downRawY = motionEvent.getRawY();
                    dX = view.getX() - downRawX;
                    dY = view.getY() - downRawY;
                    return true; // Consumed

                } else if (action == MotionEvent.ACTION_MOVE) {
                    if (supportFABModel != null && supportFABModel.getDraggable() != null && supportFABModel.getDraggable()) {
                        int viewWidth = view.getWidth();
                        int viewHeight = view.getHeight();
                        setDraggableFabBound(view);

                        View viewParent = (View) view.getParent();
                        int parentWidth = viewParent.getWidth();
                        int parentHeight = viewParent.getHeight();

                        float newX = motionEvent.getRawX() + dX;
                        newX = Math.max(layoutParams.leftMargin + Utils.convertDIPToPixels(SetUpActivity.this, 13), newX); // Don't allow the FAB past the left hand side of the parent
                        newX = Math.min(parentWidth - viewWidth - layoutParams.rightMargin - Utils.convertDIPToPixels(SetUpActivity.this, 8), newX); // Don't allow the FAB past the right hand side of the parent

                        float newY = motionEvent.getRawY() + dY;
                        newY = Math.max(layoutParams.topMargin, newY); // Don't allow the FAB past the top of the parent
                        newY = Math.min(parentHeight - viewHeight - layoutParams.bottomMargin, newY); // Don't allow the FAB past the bottom of the parent

                        view.animate()
                                .x(newX)
                                .y(newY)
                                .setDuration(0)
                                .start();

                        moved = true;
                        return true; // Consumed
                    }

                } else if (action == MotionEvent.ACTION_UP) {

                    float upRawX = motionEvent.getRawX();
                    float upRawY = motionEvent.getRawY();

                    float upDX = upRawX - downRawX;
                    float upDY = upRawY - downRawY;

                    if (Math.abs(upDX) > CLICK_DRAG_TOLERANCE && Math.abs(upDY) > CLICK_DRAG_TOLERANCE) {
                        if (supportFABModel != null && supportFABModel.getDraggableAnalyticsData() != null && moved) {
                            trackFABAction(supportFABModel.getDraggableAnalyticsData());
                            moved = false;
                        }
                    }

                    if (Math.abs(upDX) < CLICK_DRAG_TOLERANCE && Math.abs(upDY) < CLICK_DRAG_TOLERANCE) { // A click
                        // return performClick();
                        if (supportFABModel != null && supportFABModel.getAnalyticsData() != null)
                            trackFABAction(supportFABModel.getAnalyticsData());

                        openSupport(SupportRequest.FROM_ICON_SEARCH);
                    } else { // A drag
                        return true; // Consumed
                    }

                }
                return true;
            }
        });


        fabIconWithText.setOnTouchListener(new View.OnTouchListener() {
            boolean moved = false;

            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();

                int action = motionEvent.getAction();
                if (action == MotionEvent.ACTION_DOWN) {

                    downRawX = motionEvent.getRawX();
                    downRawY = motionEvent.getRawY();
                    dX = view.getX() - downRawX;
                    dY = view.getY() - downRawY;

                    return true; // Consumed

                } else if (action == MotionEvent.ACTION_MOVE) {

                    if (supportFABModel != null && supportFABModel.getDraggable() != null && supportFABModel.getDraggable()) {
                        int viewWidth = view.getWidth();
                        int viewHeight = view.getHeight();
                        setDraggableFabBound(view);

                        View viewParent = (View) view.getParent();
                        int parentWidth = viewParent.getWidth();
                        int parentHeight = viewParent.getHeight();

                        float newX = motionEvent.getRawX() + dX;
                        newX = Math.max(layoutParams.leftMargin + Utils.convertDIPToPixels(SetUpActivity.this, 13), newX); // Don't allow the FAB past the left hand side of the parent
                        newX = Math.min(parentWidth - viewWidth - layoutParams.rightMargin - Utils.convertDIPToPixels(SetUpActivity.this, 8), newX); // Don't allow the FAB past the right hand side of the parent

                        float newY = motionEvent.getRawY() + dY;
                        newY = Math.max(layoutParams.topMargin, newY); // Don't allow the FAB past the top of the parent
                        newY = Math.min(parentHeight - viewHeight - layoutParams.bottomMargin, newY); // Don't allow the FAB past the bottom of the parent

                        view.animate()
                                .x(newX)
                                .y(newY)
                                .setDuration(0)
                                .start();

                        MFAppContext.getInstance().setGlobalDragPossible(true);
                        moved = true;

                        return true; // Consumed

                    }

                } else if (action == MotionEvent.ACTION_UP) {

                    float upRawX = motionEvent.getRawX();
                    float upRawY = motionEvent.getRawY();

                    float upDX = upRawX - downRawX;
                    float upDY = upRawY - downRawY;

                    if (Math.abs(upDX) > CLICK_DRAG_TOLERANCE && Math.abs(upDY) > CLICK_DRAG_TOLERANCE) {
                        if (supportFABModel != null && supportFABModel.getDraggableAnalyticsData() != null && moved) {
                            trackFABAction(supportFABModel.getDraggableAnalyticsData());
                            moved = false;
                        }
                    }

                    if (Math.abs(upDX) < CLICK_DRAG_TOLERANCE && Math.abs(upDY) < CLICK_DRAG_TOLERANCE) { // A click
                        // return performClick();
                        if (supportFABModel != null && supportFABModel.getAnalyticsData() != null)
                            trackFABAction(supportFABModel.getAnalyticsData());


                        openSupport(SupportRequest.FROM_ICON_SEARCH);
                    } else { // A drag
                        return true; // Consumed
                    }

                }

                return true;
            }
        });

        fabIconWithText.setAccessibilityDelegate(new View.AccessibilityDelegate() {
            @Override
            public boolean dispatchPopulateAccessibilityEvent(View host, AccessibilityEvent event) {
                if (event.getEventType() == AccessibilityEvent.TYPE_VIEW_CLICKED) {
                    openSupport(SupportRequest.FROM_ICON_SEARCH);
                }
                return super.dispatchPopulateAccessibilityEvent(host, event);
            }
        });
    }

    private void setDraggableFabBound(View view) {
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) view.getLayoutParams();
        int topmargin;
        if (mIsToolbarDividerPresent)
            topmargin = 70;
        else
            topmargin = 100;
        if (tabBarAtomView != null && tabBarAtomView.getVisibility() == View.VISIBLE) {
            params.setMargins((int) Utils.convertDIPToPixels(SetUpActivity.this, 8), (int) Utils.convertDIPToPixels(SetUpActivity.this, topmargin)
                    , (int) Utils.convertDIPToPixels(SetUpActivity.this, 8), (int) Utils.convertDIPToPixels(SetUpActivity.this, 65));
        } else {
            params.setMargins((int) Utils.convertDIPToPixels(SetUpActivity.this, 8), (int) Utils.convertDIPToPixels(SetUpActivity.this, topmargin), (int) Utils.convertDIPToPixels(SetUpActivity.this, 8), 0);
        }
        view.setLayoutParams(params);
    }

    public void updateChatHeadIcon(int state) {
        if (fabIcon != null && supportFABModel != null) {
            updateFabIconVisibility(SupportConstants.SUPPORT_FAB_VARIATION_TYPE);
            switch (state) {
                case SupportConstants.ICON_STATE_MESSAGE:
                    fabIcon.setImageResource(R.drawable.fab_livechatmsg_icon);
                    break;
                case SupportConstants.ICON_STATE_WIATING:
                    fabIcon.setImageResource(R.drawable.fab_livechat_icon);
                    break;
                default: {
                    int icon = R.drawable.fab_default_icon;
                    if (supportFABModel != null && supportFABModel.getImageName() != null)
                        icon = loadIconForFAB(supportFABModel.getImageName());
                    if (SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_DEFAULT) {
                        fabIcon.setImageResource(icon);
                    } else if (SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_A || SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_B) {
                        SupportUtils.loadImageFromResouce(icon, fabIcon);
                    } else if (SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_C || SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_D) {
                        fabIconWithText.setIcon(getResources().getDrawable(icon));
                        if (supportFABModel != null && supportFABModel.getButtonText() != null && supportFABModel.getTextSize() != null && supportFABModel.getButtonTextColor() != null) {
                            fabIconWithText.setText(supportFABModel.getButtonText());
                            if (supportFABModel.getFontStyleName().equals("VerizonNHGeDS-Bold")) {
                                fabIconWithText.setTypeface(MFFontManager.getInstance(getAppContext().getAssets()).getFont("fonts/VerizonNHGeDS-Bold.otf"));
                            }
                            fabIconWithText.setTextSize(supportFABModel.getTextSize());
                            fabIconWithText.setTextColor(Color.parseColor(supportFABModel.getButtonTextColor()));
                            fabIconWithText.setBackgroundColor(Color.parseColor(supportFABModel.getBackgroundColor()));

                        }
                        if (supportFABModel != null && supportFABModel.getCanCollapse())
                            fabIconCollapse();
                    }
                }
            }
        }
    }

    public void updateFabIconVisibility(int fabVariation) {
        if (!habHidden) {
            hideChatHeadIcon();
            return;
        }
        try {
            if (hideFabPageTypes != null) {
                if (getCurrentFragment() != null && getCurrentFragment().getPageType() != null) {
                    String currentPageType = getCurrentFragment().getPageType();
                    if (!mIsToolbarDividerPresent && getCurrentFragment().getChildFragmentManager().getFragments().size() > 0) {
                        if (((BaseFragment) ((BaseFragment) getCurrentFragment()).getViewPagerFragment(getCurrentFragment().rootView)) != null) {
                            String pageType = ((BaseFragment) ((BaseFragment) getCurrentFragment()).getViewPagerFragment(getCurrentFragment().rootView)).getPageType();
                            if (hideFabPageTypes.contains(pageType) || (hideFabPageTypes.contains(currentPageType))) {
                                MobileFirstApplication.getLogHandler().e(TAG, "Hide fab tablayout- pagetype :" + pageType);
                                hideChatHeadIcon();
                                return;
                            }
                        }
                    } else if (hideFabPageTypes.contains(currentPageType)) {
                        MobileFirstApplication.getLogHandler().e(TAG, "Hide fab - pagetype :" + currentPageType);
                        hideChatHeadIcon();
                        return;
                    }
                }
            }
            if (SystemParamsUtil.getInstance().isDisableChatBotIcon()) {
                if (mToolbar.findViewById(R.id.toolbar_Icon1) != null) {
                    mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
                }
                if (fabIcon != null) {
                    fabIcon.setVisibility(View.GONE);
                }
                if (fabIconWithText != null) {
                    fabIconWithText.setVisibility(View.GONE);
                }
                return;
            }
            switch (fabVariation) {
                case SupportConstants.SUPPORT_FAB_DEFAULT:
                    fabIconWithText.setVisibility(View.GONE);
                    fabIcon.setVisibility(View.VISIBLE);
                    break;

                case SupportConstants.SUPPORT_FAB_OPTION_A:
                    fabIconWithText.setVisibility(View.GONE);
                    fabIcon.setVisibility(View.VISIBLE);
                    break;

                case SupportConstants.SUPPORT_FAB_OPTION_B:
                    fabIconWithText.setVisibility(View.GONE);
                    fabIcon.setVisibility(View.VISIBLE);
                    break;

                case SupportConstants.SUPPORT_FAB_OPTION_C:
                    if (SupportUtils.isChatEnded()) {
                        fabIconWithText.setVisibility(View.VISIBLE);
                        fabIcon.setVisibility(View.GONE);
                    } else {
                        fabIconWithText.setVisibility(View.GONE);
                        fabIcon.setVisibility(View.VISIBLE);
                    }
                    break;

                case SupportConstants.SUPPORT_FAB_OPTION_D:
                    if (SupportUtils.isChatEnded()) {
                        fabIconWithText.setVisibility(View.VISIBLE);
                        fabIcon.setVisibility(View.GONE);
                    } else {
                        fabIconWithText.setVisibility(View.GONE);
                        fabIcon.setVisibility(View.VISIBLE);
                    }
                    break;
            }
        } catch (Exception ex) {
            MobileFirstApplication.getLogHandler().e(TAG, "exception in updateFabIconVisibility");
        }
    }

    public int loadIconForFAB(String imageName) {
        int icon = R.drawable.fab_default_icon;
        switch (imageName) {
            case SupportConstants.FAB_DEFAULT_ICON:
                icon = R.drawable.fab_default_icon;
                break;
            case SupportConstants.FAB_VARIATION_GIF:
                icon = R.raw.fab_default_icon_gif;
                break;
            case SupportConstants.FAB_VARIATION_ICON:
                icon = R.drawable.fab_default_icon_new;
                break;
        }
        return icon;
    }

    private void fabIconCollapse() {
        if (supportFABModel != null && supportFABModel.getExpandDuration() != null && supportFABModel.getExpandDuration() != 0) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    fabIconWithText.setShrinkMotionSpecResource(R.animator.fab_collapse_motion_spec);
                    fabIconWithText.shrink();

                }
            }, supportFABModel.getExpandDuration() * 1000);
        }
    }

    public void removeModuleFromCache(String moduleName, BaseResponse baseResponse) {
        Intent serverResponseProcessorIntent = new Intent(this, ServerResponseProcessorService.class);
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService
                .EXTRA_UUID_KEY, MFAppContext.storeJsonAndModelInMap(null, baseResponse));
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.OPERATION, ServerResponseProcessorService.OPERATION_REMOVE);
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.MODULE_NAME, moduleName);
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.REPOSITORY_TYPE, ModuleCacheRepository.MODULE_REPOSITORY);
        startService(serverResponseProcessorIntent);
    }

    public void removeResponseFromCache(BaseResponse baseResponse) {
        Intent serverResponseProcessorIntent = new Intent(this, ServerResponseProcessorService.class);
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService
                .EXTRA_UUID_KEY, MFAppContext.storeJsonAndModelInMap(null, baseResponse));
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.OPERATION, ServerResponseProcessorService.OPERATION_REMOVE);
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.PAGE_NAME, baseResponse.getPageType());
        serverResponseProcessorIntent.putExtra(ServerResponseProcessorService.REPOSITORY_TYPE, ModuleCacheRepository.MODULE_REPOSITORY);
        startService(serverResponseProcessorIntent);
    }

    public void onEventMainThread(HideShopCartEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event.isHideShopCart()) {
            FrameLayout cartContainer = findViewById(R.id.cartContainer);
            cartContainer.setVisibility(View.GONE);
            mCartIcon.setVisibility(View.GONE);
        } else if (ShopSelection.getInstance().getCartCount() > 0) {
            FrameLayout cartContainer = findViewById(R.id.cartContainer);
            cartContainer.setVisibility(View.VISIBLE);
            mCartIcon.setVisibility(View.VISIBLE);
            toggleWishListIconVisibility(View.GONE);
        }
        /*else if (MFAppContext.getWishListCount() == 0 && ShopSelection.getInstance().getCartCount() == 0) {
            FrameLayout cartContainer = findViewById(R.id.cartContainer);
            cartContainer.setVisibility(View.VISIBLE);
            mCartIcon.setVisibility(View.VISIBLE);
        }*/

    }

    public void onEventMainThread(RemoveDataFromCacheEvent event) {
        stickyEventBus.removeStickyEvent(event);
        // Remove response from cache
        if (event.getRemoveResponse() != null) {
            removeResponseFromCache(event.getRemoveResponse());
        }
        // Remove module from particular response
        if (event.getRemoveModule() != null) {
            removeModuleFromCache(event.getRemoveModule(), event.getFromResponse());
        }
    }

    public void onEventMainThread(CartEvent event) {
        stickyEventBus.removeStickyEvent(event);

        ShopSelection.getInstance().setCartCount(event.getItemCount());

        showCartIcon(event);
    }


    public void onEventMainThread(WishListEvent event) {
        stickyEventBus.removeStickyEvent(event);
        showWishListIcon(event);
    }

    private void showCartIcon(CartEvent event) {
        if (mCartIcon == null) {
            return;
        }
        if (event.getCartAction() != null) {
            mCartIcon.setTag(event.getCartAction());
        }
        MFAppContext.setCartCount(event.getItemCount());
        mCartIcon.setContentDescription(getCartContentDescription(event.getItemCount()));

        if(event.getCookieModelList()!=null && event.getCookieModelList().size()>0){
            if(CommonUtils.isCookiesAvailableForDomain(event.getCookieModelList())){
                toggleCartIconVisibility(View.VISIBLE);
                if (navigationBarMoleculeModel != null && navigationBarMoleculeModel.getStyle().equals(Constants.MVA_DARK_STYLE)) {
                    mCartIcon.setImageResource(R.drawable.nav_cart_items_white);
                } else {
                    mCartIcon.setImageResource(R.drawable.nav_cart_items_black);
                }
                return;
            }
        }

        if (event.getItemCount() > 0) {
            toggleCartIconVisibility(View.VISIBLE);
            toggleWishListIconVisibility(View.GONE);
            if (navigationBarMoleculeModel != null && navigationBarMoleculeModel.getStyle().equals(Constants.MVA_DARK_STYLE)) {
                mCartIcon.setImageResource(R.drawable.nav_cart_items_white);
            } else {
                mCartIcon.setImageResource(R.drawable.nav_cart_items_black);
            }
        } else {
            MFAppContext.setCartCount(0);
            if (navigationBarMoleculeModel != null && navigationBarMoleculeModel.getStyle().equals(Constants.MVA_DARK_STYLE)) {
                mCartIcon.setImageResource(R.drawable.nav_cart_empty_white);
            } else {
                mCartIcon.setImageResource(R.drawable.nav_cart_empty_black);
            }
            if (MFAppContext.getWishListCount() > 0) {
                toggleWishListIconVisibility(View.VISIBLE);
                toggleCartIconVisibility(View.GONE);
            } else {
                if(event!=null && event.getCartAction()!=null) {
                    toggleCartIconVisibility(View.VISIBLE);
                }else{
                    toggleCartIconVisibility(View.GONE);
                }
                toggleWishListIconVisibility(View.GONE);

            }
        }
    }

    private void showWishListIcon(WishListEvent event) {
        mWishListIcon.setContentDescription(getWishListContentDescription(event.getItemCount()));
        if (event.getWishListAction() != null)
            mWishListIcon.setTag(event.getWishListAction());

        if (event.getItemCount() > 0) {
            MFAppContext.setWishListCount(event.getItemCount());

            if (ShopSelection.getInstance().getCartCount() > 0) {
                toggleCartIconVisibility(View.VISIBLE);
                toggleWishListIconVisibility(View.GONE);
            } else {
                toggleCartIconVisibility(View.GONE);
                toggleWishListIconVisibility(View.VISIBLE);
            }

            if (navigationBarMoleculeModel != null &&
                    navigationBarMoleculeModel.getStyle().equals(Constants.MVA_DARK_STYLE)) {
                ivWishListIcon.setImageResource(R.drawable.nav_wishlist_items_white);
            } else {
                ivWishListIcon.setImageResource(R.drawable.nav_wishlist_items_black);
            }

        } else {
            MFAppContext.setWishListCount(0);
            toggleCartIconVisibility(View.VISIBLE);
            toggleWishListIconVisibility(View.GONE);
        }
    }

    private String getCartContentDescription(int itemCount) {
        String cartDesc = "cart";

        if (itemCount > 0)
            cartDesc = String.format("cart with %d item", itemCount);

        return cartDesc;
    }

    private String getWishListContentDescription(int itemCount) {
        String cartDesc = "wishlist"; //default to this

        if (itemCount > 0) {
            cartDesc = getResources().getString(R.string.wishlist_with_items);
        } else {
            cartDesc = getResources().getString(R.string.wishlist_empty);
        }

        return cartDesc;
    }

    private void toggleWishListIconVisibility(int visibility) {
        mWishListIcon.setVisibility(visibility);
    }

    protected void handleCartAction(Action action) {
        // For Adobe Analytics
        HashMap<String, String> map = new HashMap<>();
        map.put(Constants.LINK_NAME, Constants.ADOBE_VALUE_CART_LINK);
        action.setLogMap(map);
        launchApplicationPresenter.executeAction(action);
    }

    public void onEventMainThread(ShopIconsEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event.getHideShopCart()) {
            toggleCartIconVisibility(View.GONE);
        }

        if (event.getHideWishList()) {
            toggleWishListIconVisibility(View.GONE);
        }
    }

    protected void handleCommunityAction(Action action) {
        HashMap<String, String> map = new HashMap<>();
        map.put(Constants.LINK_NAME, Constants.ADOBE_VALUE_COMMUNITY_LINK);
        action.setLogMap(map);
        launchApplicationPresenter.executeAction(action);
    }

    public void onEventMainThread(PreApprovalEvent preApprovalEvent) {
        preApprovalAction = preApprovalEvent.getpreApprovalAction();
        stickyEventBus.removeStickyEvent(preApprovalEvent);
    }

    public void onEventMainThread(WebViewBackPressedEvent webviewBackPressedEvent) {
        if (moduleModel != null || leavingAppConfirm!=null) {
            leavingAppConfirm = moduleModel.getLeavingAppConfirm();
            if (leavingAppConfirm != null) {
                displayConfirmationDialog(leavingAppConfirm, null);
            }
        }
        stickyEventBus.removeStickyEvent(webviewBackPressedEvent);
    }


    private void setAppShortCut() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1 && null != moduleModel && moduleModel.getAppShortcutMenuModel() != null) {
            AppShortcutMenuModel appShortcutMenuModel = moduleModel.getAppShortcutMenuModel();
            if (null != appShortcutMenuModel) {
                addAppshortcutMenus(appShortcutMenuModel.getParentMenuModelList());
            }
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.N_MR1)
    private void addAppshortcutMenus(List<ParentMenuModel> menuModelList) {

        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);
        List<ShortcutInfo> menuList = new ArrayList<>();

        if (null != menuModelList && menuModelList.size() > 0) {
            Intent shortCutIntent;
            for (ParentMenuModel model : menuModelList) {
                Action action = model.getParentAction();
                shortCutIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("openmvm://?pageType=" + action.getPageType() + "&" +
                        Constants.KEY_DM_PREF_SOURCE_ID + "=" + Constants.MF_APP_SHORTCUT_SOURCEID));
                ShortcutInfo shortcut = new ShortcutInfo.Builder(this, action.getPageType())
                        .setShortLabel(model.getName())
                        .setLongLabel(model.getName())
                        .setIcon(Icon.createWithResource(getApplicationContext(), DrawableUtils.getResourceId(getApplicationContext(), model.getImageName())))
                        .setIntent(shortCutIntent)
                        .build();

                menuList.add(shortcut);
            }
        }

        shortcutManager.setDynamicShortcuts(menuList);
    }

    private void setUpTabletView(int orientation) {
        if (GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled()) {
            return;
        }
        int width = getResources() != null && getResources().getDisplayMetrics() != null ? getResources().getDisplayMetrics().widthPixels : 0;

        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
            setUpTabletPortraitView(width);
            setGridColumnCount(width);
        } else if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
            setUpTabletLandscapeView(width, true);
            setGridColumnCount(width - (int) getResources().getDimension(R.dimen.navigation_drawer_width));
        }
    }

    private void setUpTabletPortraitView(int width) {
        mDrawerLayout.closeDrawer(mFrameLayoutNavigationFragmentContainer);
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED, mFrameLayoutNavigationFragmentContainer);
        setScrimColor();

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);
        getSupportActionBar().show();

        setUpSinglePaneView(width);
    }

    private void setGridColumnCount(int width) {
        if (width > Constants.MIN_WIDTH_760)
            CommonUtils.setGridColumnCount(Constants.TABLET_GRID_COLUMNS_FOUR);
        else CommonUtils.setGridColumnCount(Constants.TABLET_GRID_COLUMNS_THREE);
    }

    private void setScrimColor() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            mDrawerLayout.setScrimColor(getResources().getColor(android.R.color.transparent, getTheme()));
        } else
            mDrawerLayout.setScrimColor(getResources().getColor(android.R.color.transparent));
    }

    private void setUpSinglePaneView(int width) {
        RelativeLayout.LayoutParams mToolbarLayoutParams = (RelativeLayout.LayoutParams) mToolbar.getLayoutParams();
        mToolbarLayoutParams.width = width;
        mToolbarLayoutParams.setMargins(0, 0, 0, 0);
        mToolbar.setLayoutParams(mToolbarLayoutParams);

        RelativeLayout.LayoutParams containerParams = (RelativeLayout.LayoutParams) activity_home_main_container.getLayoutParams();
        containerParams.width = width;
        containerParams.setMargins(0, 2, 0, 0);
        activity_home_main_container.setLayoutParams(containerParams);

        RelativeLayout.LayoutParams notificationOverlayLayoutParams = new RelativeLayout.LayoutParams(width, overlayHeight);
        notificationOverlayLayoutParams.setMargins(0, 0, 0, 0);
        notificationOverlayLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        notificationOverlay.setLayoutParams(notificationOverlayLayoutParams);
    }

    private void setUpTabletLandscapeView(int width, boolean isInitialLoad) {

        if (mDrawerLayout.isDrawerOpen(Gravity.LEFT)) {
            mDrawerLayout.closeDrawer(mFrameLayoutNavigationFragmentContainer);
        }
        setScrimColor();
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN, mFrameLayoutNavigationFragmentContainer);

        int margin = mDrawerLayout.isDrawerOpen(mFrameLayoutNavigationFragmentContainer) ? 0 : mFrameLayoutNavigationFragmentContainer.getWidth();

        if (isInitialLoad) {
            margin = getResources() != null ? (int) getResources().getDimension(R.dimen.drawer_navigation_width) : mFrameLayoutNavigationFragmentContainer.getWidth();
        }


        getSupportActionBar().setHomeButtonEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(false);

        setUpMultiPaneView(width, margin);
    }

    private void setUpMultiPaneView(int width, int margin) {
        RelativeLayout.LayoutParams mToolbarLayoutParams = (RelativeLayout.LayoutParams) mToolbar.getLayoutParams();
        mToolbarLayoutParams.width = width - mFrameLayoutNavigationFragmentContainer.getWidth();
        mToolbarLayoutParams.setMargins(margin, 0, 0, 0);
        mToolbar.setLayoutParams(mToolbarLayoutParams);


        RelativeLayout.LayoutParams containerParams = (RelativeLayout.LayoutParams) activity_home_main_container.getLayoutParams();
        containerParams.width = width - mFrameLayoutNavigationFragmentContainer.getWidth();
        containerParams.setMargins(margin, 2, 0, 0);
        activity_home_main_container.setLayoutParams(containerParams);

        RelativeLayout.LayoutParams notificationOverlayLayoutParams = new RelativeLayout.LayoutParams(width - mFrameLayoutNavigationFragmentContainer.getWidth(), overlayHeight);
        notificationOverlayLayoutParams.setMargins(margin, 0, 0, 0);
        notificationOverlayLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        notificationOverlay.setLayoutParams(notificationOverlayLayoutParams);

    }

    private void setNightMode() {
        try {

            int currentNightMode = getResources().getConfiguration().uiMode
                    & Configuration.UI_MODE_NIGHT_MASK;
            switch (currentNightMode) {
                case Configuration.UI_MODE_NIGHT_NO:
                case Configuration.UI_MODE_NIGHT_UNDEFINED:
                    // Night mode is not active, we're in day time/Light theme
                    if (setupBasePresenter != null) {
                        setupBasePresenter.sendStatToServer(Constants.LIGHT_MODE);
                    }
                    MobileFirstApplication.getLogHandler().d(TAG, Constants.LIGHT_MODE);
                    break;
                case Configuration.UI_MODE_NIGHT_YES:
                    PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
                    if (powerManager != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
                            && powerManager.isPowerSaveMode()) {
                        if (setupBasePresenter != null) {
                            setupBasePresenter.sendStatToServer(Constants.DARK_MODE_BATTERY_SAVER);
                        }
                        MobileFirstApplication.getLogHandler().d(TAG, Constants.DARK_MODE_BATTERY_SAVER);
                    } else {
                        if (setupBasePresenter != null) {
                            setupBasePresenter.sendStatToServer(Constants.DARK_MODE);
                        }
                        MobileFirstApplication.getLogHandler().d(TAG, Constants.DARK_MODE);
                    }
                    break;
            }
        } catch (Exception e) {
            NewRelicEvents.sendExceptionToNewRelic(getAppContext(), e);
        }
    }

    private void sendLaunchTaggingDataToAdobe() {
        if (moduleModel != null && moduleModel.getLaunchTaggingModel() != null) {
            List<Map<String, Object>> list = moduleModel.getLaunchTaggingModel().getTaggingList();
            if (list != null) {
                for (Map<String, Object> taggingMap : list) {
                    try {
                        analyticsUtil.trackPageView("launchApp", taggingMap);
                    } catch (Exception e) {
                        NewRelicEvents.sendExceptionToNewRelic(getAppContext(), e);
                    }
                }
            }
        }
    }

    private void getFiveGExpStatus() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            String loggedInMDN = MFAppContext.getInstance().getLoggedInMdn();
            MobileFirstApplication.getLogHandler().i(TAG_ENHANCE_FIVE_G, "loggedInMDN" + loggedInMDN);
            HashMap<String, Integer> mdnSubIdMap = null;
            mdnSubIdMap = DeviceUtils.getMDNSubscriptionIdMap(getApplicationContext());
            if (mdnSubIdMap.containsKey(loggedInMDN)) {
                FiveGExperienceUtil.getFiveGExperienceStatus(ACTION_5G_DEVICE_SUPPORT, mdnSubIdMap.get(loggedInMDN));
                MobileFirstApplication.getLogHandler().i(TAG_ENHANCE_FIVE_G, "mdnSubIdMap" + mdnSubIdMap.get(loggedInMDN));
            } else {
                MobileFirstApplication.getLogHandler().i(TAG_ENHANCE_FIVE_G, "SubscriptionMap doesn't contain logged In MDN");
            }
        } else {
            MobileFirstApplication.getLogHandler().i(TAG_ENHANCE_FIVE_G, "OS Version is less than LOLLIPOP");
        }
    }


    @SuppressLint("RestrictedApi")
    @Override
    public void setFabIconVisibility() {
        if (mToolbar != null) {
            if (fabIcon != null && supportFABModel != null) {
                if (navigationBarMoleculeModel != null) {
                    mToolbar.findViewById(R.id.rl_support).setVisibility(View.GONE);
                }
                mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
                if (mToolbar.getVisibility() == View.VISIBLE)
                    updateFabIconVisibility(SupportConstants.SUPPORT_FAB_VARIATION_TYPE);
                else {
                    fabIcon.setVisibility(View.GONE);
                    fabIconWithText.setVisibility(View.GONE);
                }
            } else {
                mToolbar.findViewById(R.id.rl_support).setVisibility(View.VISIBLE);
            }
        }
    }

    private void deepLinkMobileFirst(Intent intent) {

            if (intent != null &&  intent.getAction() != null && Intent.ACTION_VIEW.equals(intent.getAction())) {
                Uri uri = intent.getData();
                if(uri != null && moduleModel != null){
                    (new DeepLinkHandelingUtils(this, homePresenter)).checkForDeepLink(moduleModel.getDeepLinkMap(), moduleModel.getAppLinksModel(),intent);
                }else{
                    loadPageData(moduleModel);
                }
            }

    }

    private void supportDeeplink() {
        //standard deeplinks

        MobileFirstApplication.getLogHandler().d(TAG, "Checking for supportDeeplink");

        try {
            if (!android.text.TextUtils.isEmpty(supportPageDeepLink) && supportPageDeepLink.contains(GET_SUPPORT) && null != moduleModel) {

                String jsonString = mvmPreferenceRepository.read(SUPPORT_DEEPLINK, null);
                MobileFirstApplication.getLogHandler().d(TAG, "Support Link -- " + jsonString);

                if (!android.text.TextUtils.isEmpty(jsonString)) {
                    Gson gson = new Gson();
                    Map<String, DeepLinkObject> deepLinkMap = moduleModel.getDeepLinkMap();

                    Map<String, String> deepLinkData = gson.fromJson(jsonString, Map.class);

                    if (deepLinkData != null) {

                        String pageType = deepLinkData.get(KEY_DEEPLINKING_PAGETYPE);
                        MobileFirstApplication.getLogHandler().d(TAG, "Support Page Type-- " + pageType);

                        DeepLinkObject deepLinkObject = deepLinkMap.get(pageType);
                        MobileFirstApplication.getLogHandler().d(TAG, "Deep Link mapping for " + pageType + " ::: " + deepLinkObject);

                        if (deepLinkObject != null && deepLinkObject.getActionType().equalsIgnoreCase("openPanel")) {
                            MobileFirstApplication.getLogHandler().d(TAG, "Opening Support Panel.. ");
                            //mvmPreferenceRepository.save(SUPPORT_DEEPLINK, null);

                            SupportRowCollection.getInstance().supportMessagesCollectionString.clear();

                            openSupportDrawer();
                            // openSupportPanel(jsonString);
                        }
                    }

                }
            }

        } catch (NullPointerException npe) {

        } catch (IndexOutOfBoundsException iob) {
        }

    }


    private void getDeepLinkExtraParams(String extraParam, Action openPageAction) {
        Map<String, String> extraParamsMap = openPageAction.getExtraParams();
        if (extraParamsMap == null || extraParamsMap.size() == 0)
            extraParamsMap = new HashMap<>();
        if (StringUtils.isNotBlank(extraParam)) {
            CommonAppUtil.splitParams(extraParam, extraParamsMap);
            if (extraParamsMap.size() > 0)
                openPageAction.setExtraParams(extraParamsMap);
        }
    }


    public void openSupportDrawer() {
        if (mDrawerLayout.isDrawerOpen(Gravity.RIGHT)) {
            mDrawerLayout.closeDrawer(Gravity.RIGHT);
        }
        mDrawerLayout.openDrawer(Gravity.RIGHT);
    }

    public void setInStoreBarSessionManager(LaunchAppModel launchAppModel, boolean updateCount) {
        //inStore Top notification
        if (inStoreBarSessionManager == null) {
            inStoreBarSessionManager = new InStoreBarSessionManager(this);
        }
        inStoreBarSessionManager.checkIsInStoreAtLaunch(launchAppModel, updateCount);
    }

    public void setActionBarHomeIcon(Drawable drawable) {
        if (getSupportActionBar() != null) {
            getSupportActionBar().setHomeAsUpIndicator(drawable);

            //5G self install replace navi icon
            BaseFragment baseFragment = ((BaseFragment) getSupportFragmentManager().findFragmentById(R.id.activity_home_navigation_container));
            if (baseFragment != null && baseFragment instanceof FgNavigationMenuFragment) {
                getSupportActionBar().setHomeAsUpIndicator(R.drawable.all_steps_icon);
            }
        }
    }

    public void setToolBarForStyle() {
        if (getNavigationBarMoleculeModelBase() != null &&
                getNavigationBarMoleculeModelBase().getStyle().equals(Constants.MVA_DARK_STYLE)) {
            mHeaderName.setTextColor(getResources().getColor(R.color.white));
            headerDivider.setBackgroundColor(getResources().getColor(R.color.vds_color_palette_gray20));
        } else {
            mHeaderName.setTextColor(getResources().getColor(R.color.black));
            headerDivider.setBackgroundColor(getResources().getColor(R.color.vds_color_palette_gray85));
        }
    }

    public void onEventMainThread(HideShowDrawerEvent event) {
        MobileFirstApplication.getLogHandler().e(TAG, "" + event.isHideShowDrawer());
        int drawerLock = event.isHideShowDrawer() ? DrawerLayout.LOCK_MODE_LOCKED_CLOSED :
                DrawerLayout.LOCK_MODE_UNLOCKED;
        mDrawerLayout.setDrawerLockMode(drawerLock);
        getSupportActionBar().setDisplayHomeAsUpEnabled(!event.isHideShowDrawer());
        eventBus.removeStickyEvent(event);
    }

    public View getNavView(BaseNavigationButtonAtomModel navButtonModel, LinearLayout.LayoutParams params) {
        View navView = ViewHelper.Companion.getView(navButtonModel.getMoleculeName(), this, null);
        if (navView != null) {
            navView.setLayoutParams(params);
            navView.setId(View.generateViewId());
            if (navView instanceof NavigationNotificationButtonAtomView) {
                navView.setId(R.id.navigation_notification_button_atom);
                NavigationNotificationButtonAtomView notificationView = ((NavigationNotificationButtonAtomView) navView);
                NavigationNotificationButtonAtomModel notificationButtonAtomModel = ((NavigationNotificationButtonAtomModel) navButtonModel);
                if (getNotificationCount() > 0) {
                    notificationButtonAtomModel.setImage("nav_notifications_unread");
                } else {
                    notificationButtonAtomModel.setImage("nav_notifications_read");
                }
                notificationView.setContentDescription(getNotificationContentDescription(getNotificationCount()));
                notificationView.applyStyle(notificationButtonAtomModel);
            } else if (navView instanceof NavigationSelectAllLabelButtonAtomView) {
                ((NavigationSelectAllLabelButtonAtomView) navView).applyStyle((NavigationSelectAllLabelButtonAtomModel) navButtonModel);
            } else {
                return super.getNavView(navButtonModel, params);
            }
        }
        return navView;
    }

    public int getNotificationCount() {
        return notificationCount;
    }

    private String getNotificationContentDescription(int itemCount) {
        String description = getResources().getString(R.string.notifications);
        if (itemCount > 0) {
            if (itemCount == 1) {
                description = String.format(getResources().getString(R.string.one_unread_notification), itemCount);
            } else {
                description = String.format(getResources().getString(R.string.unread_notifications), itemCount);
            }
        }
        return description;
    }

    private void enableNavigationDrawer() {
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED, mFrameLayoutNavigationFragmentContainer);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setHomeAsUpIndicator(R.drawable.navigation_menu);
            getSupportActionBar().setHomeButtonEnabled(true);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowTitleEnabled(false);
            getSupportActionBar().setHomeActionContentDescription(R.string.btn_menu);
        }
    }

    private void sendDataMeterBroadcast() {
        if (moduleModel != null && moduleModel.getDatameterData() != null) {
            Intent dataMeterIntent = moduleModel.getDatameterData();
            dataMeterIntent.setAction(DATA_METER_INTENT);
            CommonUtils.sendImplicitBroadcast(dataMeterIntent, this);
        }
    }

    private void loadPageData(ModuleModel moduleModel) {
        mToolbar.setVisibility(View.VISIBLE);
        if (moduleModel == null) {
            UtilLog.e(TAG, "Greeting Screen can not be null");
            return;
        }
        sendDataMeterBroadcast();
        replaceNavigationFragment(moduleModel);
        tabBarAtomView = findViewById(R.id.bottomTab);
        searchAtomView = findViewById(R.id.search_view);
        //setting content descrption for accessibility text
        searchAtomView.setContentDescription(getString(R.string.search_accessibility));
        searchAtomView.findViewById(R.id.img_Search).setContentDescription(getString(R.string.search_icon_accessibility));
        searchAtomView.findViewById(R.id.divider).setContentDescription(getString(R.string.search_divider_accessibility));
        habContentMoleculeView = findViewById(R.id.hab_content_view);
        habLayout = findViewById(R.id.habLayout);
        searchListTemplateView = findViewById(R.id.searchOverlayListTemplate);
        searchOverlayView = findViewById(R.id.searchOverlayView);
        if (moduleModel.getHabContentModel() != null)
            habContentModel = moduleModel.getHabContentModel();
        if (moduleModel.getTabBarAtomModel() != null)
            tabBarAtomModel = moduleModel.getTabBarAtomModel();
        if (moduleModel.getSearchTextFieldAtomModel() != null)
            searchAtomModel = moduleModel.getSearchTextFieldAtomModel();
        if (moduleModel.getSearchAction() != null)
            searchActionModel = moduleModel.getSearchAction();
        if (moduleModel.getSearchWebAction() != null) {
            searchWebActionModel = moduleModel.getSearchWebAction();
        }
        if (moduleModel.getSearchDoneAction() != null)
            searchDoneActionModel = moduleModel.getSearchDoneAction();

        supportFABModel = MFAppContext.getInstance().getSupportFABModel();
        if (supportFABModel != null && supportFABModel.getSupportFabLongPressModel() != null)
            supportFABLongPressModel = MFAppContext.getInstance().getSupportFABModel().getSupportFabLongPressModel();

        GlobalContextSingleton.INSTANCE.setTabBarFlowEnabled(tabBarAtomModel != null);

        if (GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled()) {
            findViewById(R.id.tabBardivider).setVisibility(View.VISIBLE);
            RelativeLayout relativeLayout = findViewById(R.id.rl_support);
            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
            layoutParams.rightMargin = getResources().getDimensionPixelSize(R.dimen.dimen_brand_refresh_margin_right);
            disableNavigationDrawer();
        } else {
            enableNavigationDrawer();
        }
        if (navigationBarMoleculeModel != null) {
            if (mToolbar == null) {
                mToolbar = findViewById(R.id.toolbar);
            }
            FrameLayout cartContainer = mToolbar.findViewById(R.id.cartContainer);
            if (mToolbar != null && mCartIcon != null) {
                mToolbar.removeView(mCartIcon);
                mToolbar.removeViewInLayout(mCartIcon);
                mToolbar.requestLayout();
                mToolbar.forceLayout();
            }
            mCartIcon = cartContainer.findViewById(R.id.toolbar_Icon2);
            if (mCartIcon != null) {
                mCartIcon.setId(R.id.toolbar_Icon2);
                cartContainer.setId(R.id.cartContainer);
                mCartIcon.setOnClickListener(this);
            }
        }
        refreshNavBar();
        loadSupportFragment();
        refreshSearchView();
        setStatusBarColor();
        //Temporary change to handle new customer launch from Deeplinking, bypassing newFeed call!!
        Action selfInstallAction = null;
        try {
            selfInstallAction = moduleModel.getSelfInstallAction();
        } catch (NullPointerException e) {
            UtilLog.e(TAG, "Exception reading SelfInstall buttonMap");
        }
        hideChatIcon();

        if (selfInstallAction != null) {
            launchApplicationPresenter.displayProgressSpinner();
            launchApplicationPresenter.executeAction(selfInstallAction, WelcomeHomesetupPresenter.getSelfInstallResource(homePresenter, selfInstallAction));
        }

        if (supportFABModel != null && supportFABModel.getState() != null) {
            if (supportFABModel.getState().equalsIgnoreCase("variation_A")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_A;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_B")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_B;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_C")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_C;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_D")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_D;
            } else if (supportFABModel.getState().equalsIgnoreCase("fab_default")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_DEFAULT;
            }
        }
    }

    private String getChatStateForHAB(int state) {
        String HABChatState;
        switch (state) {
            case SupportConstants.ICON_STATE_MESSAGE:
                HABChatState = Constants.LIVECHATNEWMSG;
                break;

            case SupportConstants.ICON_STATE_WIATING:
                HABChatState = Constants.LIVECHAT;
                break;

            default: {
                HABChatState = Constants.ASSISTANT;
            }
        }
        return HABChatState;
    }

    private void toggleCartIconVisibility(int visibility) {
        FrameLayout cartContainer = findViewById(R.id.cartContainer);
        cartContainer.setVisibility(visibility);
        mCartIcon = (ImageView) mToolbar.findViewById(R.id.toolbar_Icon2);
        if(mCartIcon.getTag()==null){
            mCartIcon.setVisibility(View.GONE);
            return;
        }
        mCartIcon.setVisibility(visibility);
        boolean isCartsItemsAvailable = ShopSelection.getInstance().getCartCount() > 0 || MFAppContext.getCartCount() > 0;
        if (navigationBarMoleculeModel != null && navigationBarMoleculeModel.getStyle().equals(Constants.MVA_DARK_STYLE)) {
            {
                if (isCartsItemsAvailable)
                    mCartIcon.setImageResource(R.drawable.nav_cart_items_white);
                else
                    mCartIcon.setImageResource(R.drawable.nav_cart_empty_white);
            }
        } else {
            if (isCartsItemsAvailable)
                mCartIcon.setImageResource(R.drawable.nav_cart_items_black);
            else
                mCartIcon.setImageResource(R.drawable.nav_cart_empty_black);
        }
    }

    private void replaceNavigationFragment(ModuleModel moduleModel) {
        if (moduleModel != null) {
            NavigationMenuFragment navigationMenuFragment = (NavigationMenuFragment) NavigationMenuFragment.newInstance(moduleModel);
            getSupportFragmentManager().beginTransaction().add(R.id.activity_home_navigation_container,
                    navigationMenuFragment).commit();
        }
    }

    public void replaceFghsNavigationFragment(FivegSetupAllStepsModule fivegSetupAllStepsModule,
                                              boolean replace) {

        BaseFragment baseFragment = ((BaseFragment) getSupportFragmentManager().
                findFragmentById(R.id.activity_home_navigation_container));

        if (replace) {
            if (GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled()) {
                enableNavigationDrawer();
            }
            if (baseFragment != null && baseFragment instanceof FgNavigationMenuFragment) {
                return;
            }
            FgNavigationMenuFragment fgNavigationMenuFragment = (FgNavigationMenuFragment) FgNavigationMenuFragment.newInstance(fivegSetupAllStepsModule);
            getSupportFragmentManager().beginTransaction().replace(R.id.activity_home_navigation_container,
                    fgNavigationMenuFragment).commit();

        } else {
            if (GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled()) {
                disableNavigationDrawer();
            }
            try {
                if (moduleModel != null) {
                    NavigationMenuFragment navigationMenuFragment = (NavigationMenuFragment) NavigationMenuFragment.newInstance(moduleModel);
                    getSupportFragmentManager().beginTransaction().replace(R.id.activity_home_navigation_container,
                            navigationMenuFragment).commit();
                }
            } catch (Exception e) {
                MobileFirstApplication.getLogHandler().e("Navigtion Menu", e.getMessage());
            }
        }
    }

    public void animateNavigationMenu(View drawerView, float slideOffset) {

        if (CommonUtils.getCurrentOrientation() == Configuration.ORIENTATION_LANDSCAPE) {
            animateMenuInLandscapeMode(drawerView, slideOffset);
            return;
        }
        if (drawerView.getId() == R.id.activity_home_navigation_container || drawerView.getId() == R.id.support_container) {
            float moveFactor = mFrameLayoutNavigationFragmentContainer.getWidth()
                    * slideOffset;

            if (drawerView.getId() == R.id.support_container) {
                moveFactor *= -1;
            }

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                mLinearLayoutMain.setTranslationX(moveFactor);
            } else {
                TranslateAnimation anim = new TranslateAnimation(mLastTranslate,
                        moveFactor, 0.0f, 0.0f);
                anim.setDuration(0);
                anim.setFillAfter(true);
                mLinearLayoutMain.startAnimation(anim);
                mLastTranslate = moveFactor;
            }
        } /*Bug Fix: Disabled Empty Support Fragment
                else if (drawerView.getId() ==    R.id.activity_home_support_container) {
                float moveFactor = -(mFrameLayoutSupportContainer.getWidth() * slideOffset);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                    mLinearLayoutMain.setTranslationX(moveFactor);
                } else {
                    TranslateAnimation anim = new TranslateAnimation(mLastTranslate,
                            moveFactor, 0.0f, 0.0f);
                    anim.setDuration(0);
                    anim.setFillAfter(true);
                    mLinearLayoutMain.startAnimation(anim);
                    mLastTranslate = moveFactor;
                }
            }*/
    }

    private void animateMenuInLandscapeMode(View drawerView, float slideOffset) {
        if (drawerView.getId() == R.id.support_container) {
            float moveFactor = mFrameLayoutNavigationFragmentContainer.getWidth()
                    * slideOffset;
            moveFactor *= -1;


            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                mLinearLayoutMain.setTranslationX(moveFactor);
            } else {
                TranslateAnimation anim = new TranslateAnimation(mLastTranslate,
                        moveFactor, 0.0f, 0.0f);
                anim.setDuration(0);
                anim.setFillAfter(true);
                mLinearLayoutMain.startAnimation(anim);
                // mFrameLayoutNavigationFragmentContainer.startAnimation(anim);
                mLastTranslate = moveFactor;
            }
        }

    }

    public void setHeaderDividerVisibility(boolean visibility) {
        if (visibility) {
            headerDivider.setVisibility(View.VISIBLE);
        } else {
            headerDivider.setVisibility(View.GONE);
        }
        setMarginForFab(visibility);
    }

    public void setMarginForFab(boolean isTablayoutExist) {
        if (fabIcon != null && supportFABModel != null) {
            mIsToolbarDividerPresent = isTablayoutExist;
            if (SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_DEFAULT || SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_A || SupportConstants.SUPPORT_FAB_VARIATION_TYPE == SupportConstants.SUPPORT_FAB_OPTION_B) {
                String align = "top";
                if (supportFABModel != null && supportFABModel.getAlign() != null)
                    align = supportFABModel.getAlign();
                mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
                RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) findViewById(R.id.support_chat_head).getLayoutParams();
                if (align.equalsIgnoreCase("top")) {
                    if (!isTablayoutExist) {
                        params.setMargins(0, CommonUtils.dpToPx(this, 95), CommonUtils.dpToPx(this, 3), 0);
                    } else {
                        params.setMargins(0, CommonUtils.dpToPx(this, 65), CommonUtils.dpToPx(this, 3), 0);
                    }
                    params.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                } else {
                    params.setMargins(0, 0, CommonUtils.dpToPx(this, 3), CommonUtils.dpToPx(this, 85));
                    if (tabBarAtomView.getVisibility() == View.VISIBLE) {
                        params.addRule(RelativeLayout.ABOVE, R.id.bottomTab);
                    } else {
                        params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
                    }
                }
                fabIcon.setLayoutParams(params);
            } else {
                RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) findViewById(R.id.support_chat_head_with_text).getLayoutParams();
                fabIcon.setLayoutParams(params);
            }
            updateFabIconVisibility(SupportConstants.SUPPORT_FAB_VARIATION_TYPE);
        }
    }

    private void OnSignOutClicked() {

        if(moduleModel!=null) {
            confirmOperation = moduleModel.getSignOutConfirm();
        }
        if (confirmOperation != null && getCurrentFragment() != null) {
            ConfirmationDialogFragment confirmationDialogFragment = getCurrentFragment().displayConfirmationDialog(confirmOperation, null);
            confirmationDialogFragment.setOnConfirmationDialogEventListener(new ConfirmationDialogFragment.OnConfirmationDialogEventListener() {
                @Override
                public void onConfirmButtonPressed(DialogFragment dialogFragment) {
                    onConfirmPressedInDialog();
                }

                @Override
                public void onCancelButtonPressed(DialogFragment dialogFragment) {
                    onCancelPressedInDialog();
                }
            });
        }

    }

    private void onConfirmPressedInDialog() {
        //Adding for Adobe Analytics
        Action action = null;
        if(moduleModel!=null) {
            action = moduleModel.getSignOutConfirm().getPrimaryAction();
        }
        homePresenter.logAction(action);
        if (NetworkUtils.isFlighTModeOn(this) && !NetworkUtils.isWifiConnected(this)) {
            //mLeftPane.setTag(null);
            String title = getString(R.string.error_trouble_connecting_title);
            String message = getString(R.string.error_trouble_connecting_msg);
            FragmentManager fragmentManager = getSupportFragmentManager();
            ErrorDialogFragment errorDialogFragment = ErrorDialogFragment.newInstance
                    (new Exception(), title, message, BaseActivity.LAUNCHAPP);
            errorDialogFragment.show(fragmentManager, BaseActivity.ERRORDIALOG_TAG);
        } else {
            TabAndNavModel tabAndNavModel = new TabAndNavModel();
            tabAndNavModel.setTabBarHidden(true);
            eventBus.post(new TabRefreshEvent(tabAndNavModel));
            eventBus.post(new OnSignOutEvent());
            eventBus.post(new HABEvent(true));
            if(mCartIcon!=null) {
                ShopSelection.getInstance().setCartCount(0);
                mCartIcon.setVisibility(View.GONE);
            }
            if(mWishListIcon!=null) {
                MFAppContext.setWishListCount(0);
                mWishListIcon.setVisibility(View.GONE);
            }
            Intent intent = new Intent(this, SetUpActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
            Bundle bundle = new Bundle();
            bundle.putString(Constants.EXTRA_USER_FLOW, SetUpActivity.SIGN_OUT);
            bundle.putParcelable(NavigationMenuFragment.ACTION, action);
            intent.putExtras(bundle);
            intent.setPackage(getPackageName());
            startActivity(intent);

//            finish();
//            CommonAppUtil.cleanUpOnSignout(getAppContext());
//            eventBus.post(new OnSignOutEvent());
//            CommonAppUtil.cleanUpOnSignout(getAppContext());
//            startLaunchAppFlow(true);
//            shouldShowToolbarAlways = false;
//            disableToolBar();// case to hide toolbar when session timed out from Prospect flow in setup activities
        }
    }

    private void onCancelPressedInDialog() {
        Action action = null;
        if(moduleModel!=null) {
            action = moduleModel.getSignOutConfirm().getSecondaryAction();
        }
        homePresenter.logAction(action);
    }

    public Fragment getLastAddedFragment() {
        Fragment fragment = null;
        List<Fragment> fragments = getSupportFragmentManager().getFragments();
        if (fragments.size() > 0) {
//            String tag = getSupportFragmentManager().getBackStackEntryAt(getSupportFragmentManager().getBackStackEntryCount() - 1).getName();
            fragment = fragments.get(fragments.size() - 1);
        }
        return fragment;

    }

    public void updateSearchIncon(int state) {
        if (state == SupportConstants.ICON_STATE_MESSAGE && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)) {
            state = SupportConstants.ICON_STATE_CONNECTED;
        }
        /*if (state != SupportConstants.ICON_STATE_MESSAGE && state == SupportUtils.iconState) {
            //return;
        }*/

        View chatStatus;
        View textCount;
        updateChatHeadIcon(state);
        updateHABChatState(state);
        chatStatus = findViewById(R.id.toolbar_Icon1);
        textCount = findViewById(R.id.chat_number);
        ((ImageView) chatStatus).setBackgroundColor(getResources().getColor(R.color.white));
        if (chatStatus == null || textCount == null) {
            return;
        }

        SupportUtils.iconState = state;
        ((ImageView) chatStatus).setImageDrawable(null);
        ((ImageView) chatStatus).setImageBitmap(null);

        ((ImageView) chatStatus).setImageResource(0);
        ((ImageView) chatStatus).invalidate();

        switch (state) {
            case SupportConstants.ICON_STATE_MESSAGE:
                ((ImageView) chatStatus).setImageDrawable(getResources().getDrawable(R.drawable.mf_support_chat));
                ((TextView) textCount).setText(SupportUtils.chatMessageCount + "");
                if (chatStatus.getVisibility() == View.VISIBLE)
                    textCount.setVisibility(View.VISIBLE);
                break;
            case SupportConstants.ICON_STATE_CONNECTED:
                ((ImageView) chatStatus).setImageDrawable(getResources().getDrawable(R.drawable.mf_support_new));
                ((TextView) textCount).setText("");
                textCount.setVisibility(View.GONE);
                break;
            case SupportConstants.ICON_STATE_WIATING:
                ((ImageView) chatStatus).setImageDrawable(getResources().getDrawable(R.drawable.mf_support_waiting_chat));
                ((TextView) textCount).setText("");
                break;
            case SupportConstants.ICON_STATE_SPECIAL:
                ((ImageView) chatStatus).setImageDrawable(getResources().getDrawable(R.drawable.mf_support_new));
                ((TextView) textCount).setText("");
                textCount.setVisibility(View.GONE);

                break;
            default: {
                ((ImageView) chatStatus).setImageDrawable(getResources().getDrawable(R.drawable.mf_support_new));
                ((TextView) textCount).setText("");
                textCount.setVisibility(View.GONE);

            }
        }
    }

    private void updateHABChatState(int state) {
        if (habContentMoleculeView != null && habContentModel != null) {
            String HABChatState = getChatStateForHAB(state);
            Log.d(TAG, "refreshHABView:updateHABChatState ");
            if (!habHidden) {
                refreshHABView(new HABEvent(habContentModel.getConfiguration(),
                        HABChatState,
                        habContentModel.getInverted(), null));
            }
        }
    }

    public LaunchApplicationPresenter getLaunchApplicationPresenter() {
        return launchApplicationPresenter;
    }

    public void expandAndCollapseFab() {
        if (fabIconWithText.isExtended()) {
            fabIconCollapse();
        } else {
            fabIconWithText.extend();
            fabIconCollapse();
        }
    }

    public void refreshDrawerSelection(String parentPage) {
        setHeaderDividerVisibility(true);
        if (StringUtils.isEmpty(parentPage)) {
            log.e(TAG, "Parent page type is not provided");
            return;
        }

        BaseFragment navigationMenuFragment = ((BaseFragment) getSupportFragmentManager().
                findFragmentById(R.id.activity_home_navigation_container));

        if (navigationMenuFragment == null) {
            log.e(TAG, "Navigation fragment not found");
            return;
        }

        if (navigationMenuFragment instanceof NavigationMenuFragment) {
            if (StringUtils.isEmpty(parentPage)) {
                log.e(TAG, "Parent page type is not provided");
                return;
            }
            ((NavigationMenuFragment) navigationMenuFragment).updateSelectedOption(parentPage);
        }

    }


    public interface SendTicketListener {
        void onItemClick(boolean flag);

    }

    public void setFABIconDeatilsFromWebviewBrige(SupportFABModel supportFABModel, boolean isHide, boolean isExpand) {
        if (fabIconWithText != null) {
            showChatHeadIcon(supportFABModel);
            int icon = R.drawable.fab_default_icon;
            if (supportFABModel != null && supportFABModel.getImageName() != null)
                icon = loadIconForFAB(supportFABModel.getImageName());
            if (supportFABModel.getState().equalsIgnoreCase("fab_default")) {
                fabIcon.setImageResource(icon);
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_A") || supportFABModel.getState().equalsIgnoreCase("variation_B")) {
                SupportUtils.loadImageFromResouce(icon, fabIcon);
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_C") || supportFABModel.getState().equalsIgnoreCase("variation_D")) {
                fabIconWithText.setIcon(getResources().getDrawable(icon));
                if (supportFABModel != null && supportFABModel.getButtonText() != null && supportFABModel.getTextSize() != null && supportFABModel.getButtonTextColor() != null) {
                    fabIconWithText.setText(supportFABModel.getButtonText());
                    if (supportFABModel.getFontStyleName().equals("VerizonNHGeDS-Bold")) {
                        fabIconWithText.setTypeface(MFFontManager.getInstance(getAppContext().getAssets()).getFont("fonts/VerizonNHGeDS-Bold.otf"));
                    }
                    fabIconWithText.setTextSize(supportFABModel.getTextSize());
                    fabIconWithText.setTextColor(Color.parseColor(supportFABModel.getButtonTextColor()));
                    fabIconWithText.setBackgroundColor(Color.parseColor(supportFABModel.getBackgroundColor()));
                }

                if (isExpand && !fabIconWithText.isExtended()) fabIconWithText.extend();

                if (supportFABModel.getCanCollapse() != null && supportFABModel.getCanCollapse()
                        && supportFABModel.getExpandDuration() != null && supportFABModel.getExpandDuration() != 0) {
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            fabIconWithText.setShrinkMotionSpecResource(R.animator.fab_collapse_motion_spec);
                            fabIconWithText.shrink();

                        }
                    }, supportFABModel.getExpandDuration() * 1000);
                }


            }
        }
    }

    public SharedPreferencesUtil getSharedPreferencesUtil() {
        return sharedPreferencesUtil;
    }


    public void refreshNotificationCenter(NotificationCenterModel notificationCenterModel) {

        if (getSupportFragmentManager().findFragmentById(R.id.activity_home_navigation_container) instanceof NavigationMenuFragment) {
            NavigationMenuFragment navigationMenuFragment = ((NavigationMenuFragment) getSupportFragmentManager().
                    findFragmentById(R.id.activity_home_navigation_container));

            if (navigationMenuFragment == null) {
                log.e(TAG, "Navigation fragment not found");
                return;
            }

            navigationMenuFragment.updateNotificationCenter(notificationCenterModel);
        }
        setNotificationCount(notificationCenterModel.getNotificationCount());

        if (notificationCenterModel.getNotificationCount() > 0) {
            //   NotificationDrawable notificationDrawable = new NotificationDrawable(this);
            // Drawable[] drawables = {ContextCompat.getDrawable(this, R.drawable.ic_action_menu), notificationDrawable};
            //Drawable layerDrawable = new LayerDrawable(drawables);

            Drawable drawable = ContextCompat.getDrawable(this, R.drawable.home_icon_with_notification);
            setActionBarHomeIcon(drawable);
            getSupportActionBar().setHomeActionContentDescription(R.string.btn_menu_with_alerts);
        }

    }

    public void setNotificationCount(int notificationCount) {
        this.notificationCount = notificationCount;
    }

    public void clearChatCount(String agentName) {
//            if (TextUtils.isEmpty(agentName)) {
//                return;
//            }
        SupportUtils.chatMessageCount = 0;

        int state = SupportConstants.ICON_STATE_CONNECTED;
        String pageType = getCurrentFragment() == null ? "" : getCurrentFragment().getParentPage();
        //(pageType != null && SupportUtils.needToShowSpecialMessage(pageType)) ?
        //.ICON_STATE_SPECIAL:SupportConstants.ICON_STATE_NORMAL
        if (pageType != null && SupportUtils.needToShowSpecialMessage(pageType)) {
            state = SupportConstants.ICON_STATE_SPECIAL;
        } else if (SupportUtils.isChatEnded()) {
            state = SupportConstants.ICON_STATE_NORMAL;
        } else if (!SupportUtils.isChatEnded()) {
            state = SupportConstants.ICON_STATE_WIATING;
        }

        updateSearchIncon(state);
    }

    public void onEventMainThread(ToolbarDividerEvent toolbarDividerEvent) {
        if (toolbarDividerEvent.isShowValue()) {
            headerDivider.setVisibility(View.VISIBLE);
        } else {
            headerDivider.setVisibility(View.GONE);
        }
        setMarginForFab(toolbarDividerEvent.isShowValue());
    }

    public void onEventMainThread(AlertDataEvent event) {
        MobileFirstApplication.getLogHandler().d(TAG, "OnDataChangeEvent in homeactivity " + event);
        if (event != null) {
            String jsonResponse = InMemoryCacheRepository.getEntry(new Key(NOTIFICATION_CENTER));

            Gson gson = new Gson();
            NotificationCenter notificationCenter = gson.fromJson(jsonResponse, NotificationCenter.class);


            if (notificationCenter != null) {
                NotificationCenterModel notificationCenterModel = new NotificationCenterModel();
                notificationCenterModel.setError(BusinessErrorConverter.toModel(notificationCenter.getResponseInfo()));
                notificationCenterModel.setButtonMap(CommunityConverter.convert(notificationCenter.getButtonMap()));
                notificationCenterModel.setNotificationLink(CommunityConverter.convert(notificationCenter.getButtonMap(), NOTIFICATION_LINK));
                notificationCenterModel.setNotificationCount(notificationCenter.getNotificationCount());
                notificationCenterModel.setAlertsCount(notificationCenter.getAlertsCount());
                notificationCenterModel.setMessagesCount(notificationCenter.getMessagesCount());
                if (moduleModel != null) {
                    moduleModel.setNotificationCenterModel(notificationCenterModel);
                    if (moduleModel.getNotificationCenterModel().getNotificationCount() == 0) {
                        Drawable drawable = this.getResources().getDrawable(R.drawable.ic_action_menu);
                        setActionBarHomeIcon(drawable);
                        getSupportActionBar().setHomeActionContentDescription(R.string.btn_menu);
                    }
                    setNotificationCount(notificationCenter.getNotificationCount());
                }
                eventBus.removeStickyEvent(event);
                eventBus.postSticky(new NavigationUpdateEvent(moduleModel.getNotificationCenterModel()));

                if (mToolbar != null && mToolbar.findViewById(R.id.navigation_notification_button_atom) != null) {
                    refreshNavBar();
                }

            }
        }
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {

        super.onConfigurationChanged(newConfig);

        if (!GlobalContextSingleton.INSTANCE.isTabBarFlowEnabled() && getResources() != null && getResources().getBoolean(R.bool.isTablet)) {
            CommonUtils.setCurrentOrientation(newConfig.orientation);

            // int width = getResources() != null && getResources().getDisplayMetrics() != null ? getResources().getDisplayMetrics().widthPixels : 0;

            if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
                setUpTabletPortraitView(CommonUtils.dpToPx(getApplicationContext(), newConfig.screenWidthDp));
                setGridColumnCount(newConfig.screenWidthDp);
            } else if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                setUpTabletLandscapeView(CommonUtils.dpToPx(getApplicationContext(), newConfig.screenWidthDp), true);
                setGridColumnCount(newConfig.screenWidthDp - mFrameLayoutNavigationFragmentContainer.getWidth());
                mDrawerLayout.openDrawer(Gravity.RIGHT, false);
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mDrawerLayout.closeDrawer(Gravity.RIGHT, false);
                    }
                }, 200);

            }

        }


    }

    @Override
    public void onEventMainThread(HideProgressSpinnerEvent event) {
        super.onEventMainThread(event);
    }

    public void onEventMainThread(SupportChatResponseEvent event) {
        View chatStatus;
        View textCount;
        switch (event.getAction()) {
            case SupportChatResponseEvent.ACTION_UPDATE_MESSAGE_COUNT:
                if (mDrawerLayout.isDrawerOpen(GravityCompat.END)) {
                    clearChatCount(event.getMessage());
                } else {
                    if (event.messageCount == -1) {
                        SupportUtils.chatMessageCount += event.getCount();
                    } else {
                        SupportUtils.chatMessageCount = event.messageCount;
                    }

                    if (!SupportUtils.isChatEnded()) {
                        if (SupportUtils.chatMessageCount > 0) {
                            updateSearchIncon(SupportConstants.ICON_STATE_MESSAGE);
                        } else {
                            updateSearchIncon(SupportConstants.ICON_STATE_WIATING);
                        }

                    } else {
                        updateSearchIncon(SupportConstants.ICON_STATE_CONNECTED);

                    }
                }
                break;
            case SupportChatResponseEvent.ACTION_CHAT_WAITING_FORAGENT:
                updateSearchIncon(SupportConstants.ICON_STATE_WIATING);
                break;
            case SupportChatResponseEvent.ACTION_CHAT_END:
                if (getCurrentFragment() != null) {
                    String pageType = getCurrentFragment().getParentPage();
                    updateSearchIncon(SupportUtils.needToShowSpecialMessage(pageType) ? SupportConstants.ICON_STATE_SPECIAL :
                            SupportConstants.ICON_STATE_NORMAL);
                }
            default:
                super.onEventMainThread(event);
                break;
        }
    }

    public void onEventMainThread(HABEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (!event.isHidden() && !event.getState().equalsIgnoreCase(Constants.LIVECHAT))
            event.setState(getChatStateForHAB(SupportUtils.iconState));
        refreshHABView(event);
        onEventMainThread(new HABViewAnimEvent(true));
        if (event.getHabShowAnalyticsData() != null && !event.isHidden() && habContentMoleculeView != null) {

            HashMap<String, Object> actionStrings = new HashMap<>(event.getHabShowAnalyticsData());
            String pageType = "";
            if (getCurrentFragment() != null && getCurrentFragment().getPageType() != null)
                pageType = getCurrentFragment().getPageType();
            if (actionStrings.containsKey(Constants.LINK_NAME))
                actionStrings.put(Constants.PAGE_LINK_NAME, pageType +
                        Constants.PIPE + actionStrings.get(Constants.LINK_NAME));
            else {
                actionStrings.put(Constants.LINK_NAME, Constants.HAB_SHOW_TAG_LINK);
                actionStrings.put(Constants.PAGE_LINK_NAME, pageType +
                        Constants.PIPE + actionStrings.get(Constants.LINK_NAME));
            }
            if (!actionStrings.containsKey(Constants.ADOBE_PAGE_NAME)) {
                actionStrings.put(Constants.ADOBE_PAGE_NAME, pageType);
            }
            actionStrings.put(Constants.PAGE_TYPE_ADOBE, pageType);
            // Log.d("refreshHABView", "final actionStrings" + actionStrings);
            new Handler().postDelayed(() -> getAnalyticsUtil().trackAction((String) actionStrings.get(Constants.LINK_NAME), actionStrings), 1000);

        } else if (!event.isHidden() && habContentMoleculeView != null) {
            HashMap<String, Object> actionStrings = new HashMap<>();
            String pageType = "";
            if (getCurrentFragment() != null && getCurrentFragment().getPageType() != null)
                pageType = getCurrentFragment().getPageType();

            actionStrings.put(Constants.LINK_NAME, Constants.HAB_SHOW_TAG_LINK);
            actionStrings.put(Constants.PAGE_LINK_NAME, pageType +
                    Constants.PIPE + Constants.HAB_SHOW_TAG_LINK);
            if (!actionStrings.containsKey(Constants.ADOBE_PAGE_NAME)) {
                actionStrings.put(Constants.ADOBE_PAGE_NAME, pageType);
            }
            actionStrings.put(Constants.PAGE_TYPE_ADOBE, pageType);
            new Handler().postDelayed(() -> getAnalyticsUtil().trackAction(Constants.HAB_SHOW_TAG_LINK, actionStrings), 1000);
        }

    }

    public void onEventMainThread(HabSetBackgroundEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event != null && event.getColor() != null && !event.getColor().isEmpty())
            habLayout.setBackgroundColor(Color.parseColor(event.getColor()));

    }

    public void onEventMainThread(HideWishListEvent event) {
        stickyEventBus.removeStickyEvent(event);
        if (event.isHideWishListIcon() || ShopSelection.getInstance().getCartCount() > 0)
            toggleWishListIconVisibility(View.GONE);
        else if (MFAppContext.getWishListCount() > 0)
            toggleWishListIconVisibility(View.VISIBLE);

    }

    /**
     * HAB event from event bus.
     *
     * @param habViewAnimEvent event which contains the info about HAB to be shown
     *                         or hide.
     */
    public void onEventMainThread(HABViewAnimEvent habViewAnimEvent) {
        if (habHidden) return;
        if (habViewAnimEvent.isExpand()) {
            performLayoutTransition();
            habLayout.setVisibility(View.VISIBLE);
        } else {
            performLayoutTransition();
            habLayout.setVisibility(View.GONE);
        }
    }

    /**
     * To manually perform layout transition.
     * It is important because, by default [android:animateLayoutChanges=true], doesn't
     * work properly.
     */
    private void performLayoutTransition() {
        ViewGroup viewGroup = findViewById(R.id.activity_home_drawerLayout);
        viewGroup.getLayoutTransition().enableTransitionType(LayoutTransition.CHANGING);
    }

    public void onEventMainThread(SignOutEvent event) {
        eventBus.removeStickyEvent(event);
        OnSignOutClicked();
    }

//    public void onEventMainThread(OnPageMapEvent event) {
//        eventBus.removeStickyEvent(event);
//        if (event.signOutConfirm != null && event.leaveAppConfirm != null) {
//            signOutConfirmation = event.signOutConfirm;
//            leaveAppConfirmModel = event.leaveAppConfirm;
//        }
//    }

    public synchronized void onEventMainThread(final onModuleChangeEvent event) {
        MobileFirstApplication.getLogHandler().d(TAG, "onModuleChangeEvent " + event);
        super.onEventMainThread(event);
        Key key = new Key(LaunchAppConverter.KEY_JSON_NOTIFICATION_CENTER);
        if (event.isResponseUpdated(key)) {
            event.removeKey(key);
            CacheRepository cacheRepository = MobileFirstApplication.getObjectGraph(getAppContext())
                    .providesCacheRepository();
            if (cacheRepository != null) {
                String module = cacheRepository.getModule(key);
                stickyEventBus.postSticky(new AlertDataEvent(module));
            }
        }
        key = new Key(LaunchAppConverter.KEY_JSON_SAVED_CART);
        if (event.isResponseUpdated(key)) {
            event.removeKey(key);

            CacheRepository cacheRepository = MobileFirstApplication.getObjectGraph(getAppContext())
                    .providesCacheRepository();
            if (cacheRepository != null) {
                Gson gson = new Gson();
                String module = cacheRepository.getModule(key);
                JsonObject moduleObject = gson.fromJson(module, JsonObject.class);
                JsonObject moduleMapObject = new JsonObject();
                moduleMapObject.add(LaunchAppConverter.KEY_JSON_SAVED_CART, moduleObject);
                SavedCartModel savedCartModel = new ModuleMapConverterUtil().getSavedCartModel(gson, moduleMapObject);
                CartEvent cartEvent = new CartEvent();
                cartEvent.setItemCount(savedCartModel.getItemCount());
                cartEvent.setCartAction(savedCartModel.getAction());
                cartEvent.setSavedCart(savedCartModel.isSavedCart());
                cartEvent.setEventFromFeeds(true);
                cartEvent.setSharedCart(savedCartModel.isSharedCart());
                if(savedCartModel.getCookieModelList()!=null && savedCartModel.getCookieModelList().size() > 0) {
                    cartEvent.setCookieModelList(savedCartModel.getCookieModelList());
                }
                stickyEventBus.postSticky(cartEvent);
            }
        }

        key = new Key(LaunchAppConverter.KEY_JSON_WISH_LIST);
        if (event.isResponseUpdated(key)) {
            event.removeKey(key);

            CacheRepository cacheRepository = MobileFirstApplication.getObjectGraph(getAppContext())
                    .providesCacheRepository();
            if (cacheRepository != null) {
                Gson gson = new Gson();
                String module = cacheRepository.getModule(key);
                JsonObject moduleObject = gson.fromJson(module, JsonObject.class);
                JsonObject moduleMapObject = new JsonObject();
                moduleMapObject.add(LaunchAppConverter.KEY_JSON_WISH_LIST, moduleObject);
                WishListModel wishListModel = new ModuleMapConverterUtil().getWishListModel(gson, moduleMapObject);
                WishListEvent wishListEvent = new WishListEvent();
                wishListEvent.setItemCount(wishListModel.getItemCount());
                wishListEvent.setWishListAction(wishListModel.getWishListAction());
                wishListEvent.setWishList(wishListModel.isWishList());
                stickyEventBus.postSticky(wishListEvent);
            }
        }

        key = new Key(LaunchAppConverter.KEY_JSON_TABBAR);
        if (event.isResponseUpdated(key)) {
            event.removeKey(key);

            CacheRepository cacheRepository = MobileFirstApplication.getObjectGraph(getAppContext())
                    .providesCacheRepository();
            if (cacheRepository != null) {
                Gson gson = new Gson();
                String module = cacheRepository.getModule(key);
                JsonObject moduleObject = gson.fromJson(module, JsonObject.class);
                JsonObject moduleMapObject = new JsonObject();
                moduleMapObject.add(LaunchAppConverter.KEY_JSON_TABBAR, moduleObject);
                ModuleModel moduleModel = new ModuleModel();
                new ModuleMapConverterUtil().toBottomNavigationMenu(moduleModel, moduleMapObject);
                if (moduleModel.getTabBarAtomModel() != null) {
                    tabBarAtomModel = moduleModel.getTabBarAtomModel();
                    tabBarAtomModel.setInvalidateMenu(true);
                    if (getCurrentFragment() != null && getCurrentFragment().getTabAndNavModel() != null
                            && getCurrentFragment().getTabAndNavModel().getTabBarHidden() != null
                            && getCurrentFragment().getTabAndNavModel().getTabBarHidden()) {
                        tabBarAtomModel.setHidden(true);
                    } /*else if(getCurrentFragment() != null) {
                        refreshTabBar();
                    }*/
                }
            }
        }

        key = new Key(LaunchAppConverter.KEY_SEARCH_VIEW);
        if (event.isResponseUpdated(key)) {
            event.removeKey(key);

            CacheRepository cacheRepository = MobileFirstApplication.getObjectGraph(getAppContext())
                    .providesCacheRepository();
            if (cacheRepository != null) {
                Gson gson = new Gson();
                String module = cacheRepository.getModule(key);
                JsonObject moduleObject = gson.fromJson(module, JsonObject.class);
                JsonObject moduleMapObject = new JsonObject();
                moduleMapObject.add(LaunchAppConverter.KEY_SEARCH_VIEW, moduleObject);
                ModuleModel moduleModel = new ModuleModel();
                new ModuleMapConverterUtil().toSearchTextFieldView(gson, moduleModel, moduleMapObject);
                if (moduleModel.getSearchTextFieldAtomModel() != null) {
                    searchAtomModel = moduleModel.getSearchTextFieldAtomModel();
                    refreshSearchView();
                }
            }
        }

    }


    @Override
    public void animateNavigationMenuWrapper(View drawerView, float slideOffset) {
        animateNavigationMenu(drawerView, slideOffset);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        if (getCurrentFragment() != null && getCurrentFragment().shouldOverrideSavingBundle()) {
        } else {
            super.onSaveInstanceState(outState);
        }
    }


    @Override
    public void hideNavigationFeatures(boolean enabled) {
        int drawerLock = enabled ? DrawerLayout.LOCK_MODE_LOCKED_CLOSED :
                DrawerLayout.LOCK_MODE_UNLOCKED;
        int toolbarVisible = enabled ? View.GONE : View.VISIBLE;
        mToolbar.setVisibility(toolbarVisible);
        mDrawerLayout.setDrawerLockMode(drawerLock);
    }

    @Override
    public void hideNavigationFeaturesWrapper(boolean flag) {
        if (flag) {
            headerDivider.setVisibility(View.GONE);
        } else {
            headerDivider.setVisibility(View.VISIBLE);
        }
        hideNavigationFeatures(flag);
    }


    @Override
    protected void hideChatIcon() {
        if (SystemParamsUtil.getInstance().isDisableChatBotIcon()) {
            if (mToolbar.findViewById(R.id.toolbar_Icon1) != null) {
                mToolbar.findViewById(R.id.toolbar_Icon1).setVisibility(View.GONE);
            }
            if (fabIcon != null) {
                fabIcon.setVisibility(View.GONE);
            }
            if (fabIconWithText != null) {
                fabIconWithText.setVisibility(View.GONE);
            }

            if (mDrawerLayout != null)
                mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED, supportDrawerContainer);
        }
    }

    @Override
    public void onClick(String fromShopSearchBar) {
        SupportUtils.FLOW_TYPE = Constants.ADOBE_VALUE_SUPPORT_LINK;

        trackToolBarAction(Constants.ADOBE_VALUE_SUPPORT_LINK);
        openSupport(SupportRequest.FROM_SHOP, fromShopSearchBar);
    }

    @Override
    public int getFragmentDividerResID() {
        return R.id.line_divider;
    }

    @Override
    public int getTabletdrawerLayoutId() {
        return R.id.tablet_drawerLayout;
    }

    @Override
    public int getActivityhomedrawerLayoutId() {
        return R.id.activity_home_drawerLayout;
    }

    @Override
    public int getActivityhomenavigationcontainerid() {
        return R.id.activity_home_navigation_container;
    }

    @Override
    public int getSupportcontainer() {
        return R.id.support_container;
    }

    @Override
    public void onClick(View view) {
        int i = view.getId();
        if (i == R.id.toolbar_Icon1) {
            if (getCurrentFragment() != null && getCurrentFragment() instanceof SendTicketFragment) {
                // Log.i("LLL","Check the logs::::");

                ((SendTicketFragment) getCurrentFragment()).onItemClick(false);

            } else {
                UtilLog.d(TAG, "toolbar_Icon1 clicked");
                //close(NotificationOverlay.ViewType.InStore);
                SupportUtils.FLOW_TYPE = Constants.ADOBE_VALUE_SUPPORT_LINK;
                if (preApprovalAction != null) {
                    setupBasePresenter.executeSlientRequest(preApprovalAction);
                    preApprovalAction = null;
                }
                trackToolBarAction(Constants.ADOBE_VALUE_SUPPORT_LINK);
                openSupport(SupportRequest.FROM_ICON_SEARCH);
            }

        } else if (i == R.id.toolbar_Icon2 /*&& !(getCurrentFragment() instanceof ViewCartFragment)*/) {
            UtilLog.d(TAG, "toolbar_Icon2 called");
            Action action = (Action) view.getTag();
            if (action != null)
                handleCartAction(action);
            //openSupport(SupportRequest.FROM_ICON_SEARCH);

        } else if (i == R.id.rl_wishlist) {
            Action action = (Action) view.getTag();
            if (action != null) {
                launchApplicationPresenter.executeAction(action);
            }
        } else if (i == R.id.toolbar_icon_community) {
            if (CommunityContext.getInstance() != null && CommunityContext.getInstance().getLandingAction() != null)
                handleCommunityAction(CommunityContext.getInstance().getLandingAction());
        }
    }

    String currentVisitedPage = "";
    InAppUpdateAlert inAppUpdateAlert = null;

    @Override
    public void updateModuleModel(BaseResponse baseResponse, boolean force) {
        if (force && baseResponse instanceof LaunchAppModel) {
            moduleModel = (ModuleModel) baseResponse.getBaseModuleModel();
            updateLaunchModule( baseResponse, force);
            return;
        }
        if (baseResponse != null && baseResponse.getBaseModuleModel() != null && baseResponse.getBaseModuleModel() instanceof ModuleModel && this.moduleModel == null) {
            if (baseResponse instanceof LaunchAppModel) {
                updateLaunchModule( baseResponse, force);
            } else  if (baseResponse instanceof FirstTimeTermsAndConditionsModel) {
                updateLaunchModule( baseResponse, force);
            }else {
                ModuleModel baseModuleModel = (ModuleModel) baseResponse.getBaseModuleModel();
                if (baseModuleModel.getSignOutConfirm() != null) {
                    confirmOperation = ((ModuleModel) baseResponse.getBaseModuleModel()).getSignOutConfirm();
                }
                if (baseModuleModel.getLeavingAppConfirm() != null) {
                    leavingAppConfirm = ((ModuleModel) baseResponse.getBaseModuleModel()).getLeavingAppConfirm();
                }
            }
        } else {
            showFabIcon();
            updateSupportDrawer();
        }

    }

    private void updateLaunchModule(BaseResponse baseResponse, boolean force) {
        this.moduleModel = (ModuleModel) baseResponse.getBaseModuleModel();
        //Removing fiosOnly logic
        if (baseResponse.getPageModel().getTabAndNavModel() != null)  //it will be null in fiosOnly flow for accountLanding page where bridge call will update the navbar
            navigationBarMoleculeModel = baseResponse.getPageModel().getTabAndNavModel().getNavigationBarMoleculeModel();
        shouldShowToolbarAlways = true;
        currentVisitedPage = baseResponse.getPageType();
        loadPageData(this.moduleModel);
        if (supportFABModel != null) {
            showChatHeadIcon(supportFABModel);
        } else {
            hideChatHeadIcon();
        }
        setAppShortCut();
        hideChatIcon();
        setNightMode();
        sendLaunchTaggingDataToAdobe();
        setEcidToPreference();
        setTpidToPreference();
        getFiveGExpStatus();
        if (getResources() != null) {
            boolean isTablet = getResources().getBoolean(R.bool.isTablet);
            CommonUtils.setIsTablet(isTablet);
            if (isTablet && getResources().getConfiguration() != null) {
                overlayHeight = (int) getResources().getDimension(R.dimen.notification_overlay_size);
                CommonUtils.setCurrentOrientation(getResources().getConfiguration().orientation);
                setUpTabletView(getResources().getConfiguration().orientation);
            }
        }
        (new DeepLinkHandelingUtils(this, homePresenter)).checkForDeepLink(moduleModel.getDeepLinkMap(), moduleModel.getAppLinksModel(), null);
        boolean isEnableInAppUpdate = SystemParamsUtil.getInstance().isEnableAndroidInAppUpdate();

        //As remove splash is getting called multiple time so added this flag
        if (!hasCheckedForUpdate && !currentVisitedPage.isBlank() && isEnableInAppUpdate) {
            boolean updateType = SystemParamsUtil.getInstance().isInAppUpdateTypeImmediate();
            int updateInterval = SystemParamsUtil.getInstance().inAppUpdateDaysInterval();

            String linkName = (updateType) ? "mandatoryapp_update_overlay" : "flexiapp_update_overlay";

            HashMap<String, Object> actionStrings = new HashMap<>();
            actionStrings.put(Constants.LINK_NAME, linkName);
            actionStrings.put(Constants.PAGE_TYPE_LINK_NAME, currentVisitedPage + Constants.PIPE + linkName);
            actionStrings.put(Constants.SOURCE_CHANNEL, "mva");
            actionStrings.put(Constants.DISPLAY_CHANNEL, "mva");
            actionStrings.put(Constants.PAGE_TYPE_ADOBE, currentVisitedPage);
            actionStrings.put(Constants.ADOBE_PAGE_NAME, currentVisitedPage);
            analyticsUtil.trackAction(linkName, actionStrings);

            if (inAppUpdateAlert == null) {
                inAppUpdateAlert = moduleModel.getInAppUpdateAlert();
            }
            mManualAppUpdater.checkForAppUpdate(updateType, updateInterval);
            hasCheckedForUpdate = true;
        }
        OneTimeWorkRequest request = new OneTimeWorkRequest.Builder(ErrorApiWorker.class).build();
        WorkManager.getInstance(this).enqueue(request);
    }

    public void updateSupportDrawer() {
        supportFABModel = MFAppContext.getInstance().getSupportFABModel();
        if (supportFABModel != null && supportFABModel.getSupportFabLongPressModel() != null)
            supportFABLongPressModel = MFAppContext.getInstance().getSupportFABModel().getSupportFabLongPressModel();
        loadSupportFragment();
        if (supportFABModel != null && supportFABModel.getState() != null) {
            if (supportFABModel.getState().equalsIgnoreCase("variation_A")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_A;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_B")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_B;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_C")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_C;
            } else if (supportFABModel.getState().equalsIgnoreCase("variation_D")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_OPTION_D;
            } else if (supportFABModel.getState().equalsIgnoreCase("fab_default")) {
                SupportConstants.SUPPORT_FAB_VARIATION_TYPE = SupportConstants.SUPPORT_FAB_DEFAULT;
            }
        }
    }


    @Override
    public boolean isFeedCached() {
        return isFeedFromCache;
    }


    public void loadFeedFromCacheFinished(String result) {
        isFeedFromCache = false;
        if (StringUtils.isNotEmpty(result)) {
            try {
                isFeedFromCache = true;
                MobileFirstApplication.getLogHandler().d("FeedTimer", "before Deserialize: " + System.currentTimeMillis());
                LaunchAppModel model = ResponseDeserializer.deserialize(result, MY_FEED);
                MobileFirstApplication.getLogHandler().d("FeedTimer", "After Deserialize: " + System.currentTimeMillis());
                model.setLocalCache(true);
                basePresenter.publishResponseEvent(model);
                MobileFirstApplication.getLogHandler().d("FeedTimer", "after publish: " + System.currentTimeMillis());
                if (useDummySSO) {
                    startDummyTokenFlow();
                } else {
                    startBackgroundTokenFlow();
                }
            } catch (SessionTimeOut e) {
                throw new RuntimeException(e);
            } catch (ResourceConsumingException e) {
                throw new RuntimeException(e);
            }
        }
    }
    private void displayPrepayNoNetworkDialog() {

        MFAppContext.dismissSplash = true;
        //show no network screen
        final Activity activity = weakReferenceActivity.get();
        if (activity != null && !activity.isFinishing()) {
            FragmentManager fragmentManager = getSupportFragmentManager();
            PrepayESimNetworkErrorFragment noNetworkDialogFragment = (PrepayESimNetworkErrorFragment) fragmentManager.findFragmentByTag(PrepayESimNetworkErrorFragment.class.getSimpleName());
            //if condition is to avoid the triggering the dialog twice when the first time app is launched, because this dialog is also triggered from the SplashFragment
            if (noNetworkDialogFragment == null || !noNetworkDialogFragment.isAdded()) {
                noNetworkDialogFragment = new PrepayESimNetworkErrorFragment();
                noNetworkDialogFragment.show(fragmentManager, PrepayESimNetworkErrorFragment.class.getSimpleName());
                MobileFirstApplication.getLogHandler().d(TAG, "No wifi network");
            }
        } else {
            Toast.makeText(SetUpActivity.this, "No Activity present to display the dialog", Toast.LENGTH_SHORT).show();
        }
    }
    private void displayPrepayResumeDialog() {
        MFAppContext.dismissSplash = true;
        //show resume activation screen once comes to fore ground after 2 to 15 mins.
        final Activity activity = weakReferenceActivity.get();
        if (activity != null && !activity.isFinishing()) {
            FragmentManager fragmentManager = getSupportFragmentManager();
            PrepayResumeESimActivationFragment resumeActivationDialogFragment = (PrepayResumeESimActivationFragment) fragmentManager.findFragmentByTag(PrepayResumeESimActivationFragment.class.getSimpleName());
            if (resumeActivationDialogFragment == null || !resumeActivationDialogFragment.isAdded()) {
                resumeActivationDialogFragment = new PrepayResumeESimActivationFragment();
                resumeActivationDialogFragment.show(fragmentManager, PrepayResumeESimActivationFragment.class.getSimpleName());
                MobileFirstApplication.getLogHandler().d(TAG, "App is in foreground");
            }
        } else {
            Toast.makeText(SetUpActivity.this, "No Activity present to display the dialog", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        showPrepayEsimResumeScreen();
    }
    private void showPrepayEsimResumeScreen(){
        if( MVMSettings.getInstance().getSettingBoolean(ENABLE_PREPAY_ESIM_FLAG)) {
            long timeGap = TimeUnit.NANOSECONDS.toMinutes(System.nanoTime() - startTime);
            if (timeGap >= 1 && timeGap <= 15) {
                displayPrepayResumeDialog();
            }
        }
    }
}

