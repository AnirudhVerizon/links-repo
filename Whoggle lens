package com.vzw.atomic.views.molecules

import android.content.Context
import android.util.AttributeSet
import android.view.View
import android.widget.RelativeLayout
import com.vzw.atomic.models.molecules.HABContentModel
import com.vzw.atomic.util.HABContentAtomEnum
import com.vzw.hss.myverizon.atomic.models.atoms.ActionModel
import com.vzw.hss.myverizon.atomic.utils.applyCommonStyles
import com.vzw.hss.myverizon.atomic.views.StyleApplier
import com.vzw.hss.myverizon.atomic.views.atoms.ImageAtomView
import com.vzw.hss.myverizon.atomic.views.atoms.LabelAtomView
import com.vzw.hss.myverizon.atomic.views.atoms.LineAtomView
import com.vzw.mobilefirst.MobileFirstApplication
import com.vzw.mobilefirst.R
import com.vzw.mobilefirst.commons.views.listeners.OnHabClickListener
import com.vzw.mobilefirst.core.presenters.BasePresenter
import com.vzw.mobilefirst.core.utils.atomic.ActionModelConverter.Companion.convertToAction
import javax.inject.Inject


open class HABContentMoleculeView : RelativeLayout, StyleApplier<HABContentModel>{

    @set:Inject
    internal var presenter: BasePresenter? = null
    var habClickListener : OnHabClickListener ?= null
    var iv_search : ImageAtomView? = null
    var et_search : LabelAtomView? = null
    var divider : RelativeLayout? = null
    var iv_assistant : ImageAtomView? = null
    var rootRl : RelativeLayout? = null
    var searchArea : RelativeLayout? = null
    var iv_lens: ImageAtomView?= null

    constructor(context: Context) : this(context, null)
    constructor(context: Context, attrs: AttributeSet?) : this(context, attrs, 0)
    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {
        initView(context)
    }

    private fun initView(context: Context) {
        View.inflate(context, R.layout.hab_content_view, this)
        MobileFirstApplication.getObjectGraph(context?.applicationContext).inject(this)
        iv_lens = findViewById(R.id.iv_lens)
        
        iv_search = findViewById(R.id.iv_search)
        et_search = findViewById(R.id.et_search)
        divider = findViewById(R.id.dividerContainer)
        iv_assistant = findViewById(R.id.iv_assistant)
        rootRl = findViewById(R.id.rootRl)
        searchArea = findViewById(R.id.searchArea)
    }

    private fun executeAction(actionModel: ActionModel) {
        val action = convertToAction(actionModel)
        habClickListener?.OnHabActionClick(action)
    }

    open fun initListener(onHabClickListener: OnHabClickListener){
        this.habClickListener = onHabClickListener
    }

    override fun applyStyle(model: HABContentModel) {
        applyCommonStyles(model)
        this.visibility = View.VISIBLE
        rootRl?.contentDescription = null
        iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES
        searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES
        et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES

        if (model.inverted) {
            //dark background
            rootRl?.let {
                rootRl?.setBackgroundDrawable(it.context.resources.getDrawable(R.drawable.background_hab_dark))
            }
            if (model.configuration != null && model.configuration.equals("dual") && model.habSearch?.image_inverted != null) {
                iv_search?.visibility = VISIBLE
                model.habSearch?.image_inverted?.let {
                    iv_search?.applyStyle(it)
                }
                searchArea?.setOnClickListener {
                    model.habSearch?.action?.let { it1 -> executeAction(it1) }
                }
                model.habSearch?.label?.let {
                    et_search?.applyStyle(it)
                }
                divider?.visibility = VISIBLE
            } else {
                iv_search?.visibility = GONE
            }
            if (model.habContentState == HABContentAtomEnum.ASSISTANT && model.habAssistant?.image_inverted != null) {
                model.habAssistant?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    model.habAssistant?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    divider?.visibility = GONE
                    searchArea?.setOnClickListener {
                        model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habAssistant?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            } else if (model.habContentState == HABContentAtomEnum.LIVECHAT && model.habLiveChat?.image_inverted != null) {
                model.habLiveChat?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChat?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habLiveChat?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            } else if (model.habContentState == HABContentAtomEnum.LIVE_CHAT_NEW_MESSAGE && model.habLiveChatNewMessages?.image_inverted != null) {
                model.habLiveChatNewMessages?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChatNewMessages?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habLiveChatNewMessages?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            }

            rootRl?.context?.resources?.getColor(R.color.white)?.let { et_search?.setTextColor(it) }
        } else {
            //Light background
            rootRl?.setBackgroundDrawable(rootRl?.context?.resources?.getDrawable(R.drawable.background_hab_light))
            if (model.configuration != null && model.configuration.equals("dual") && model.habSearch?.image != null) {
                iv_search?.visibility = VISIBLE
                model.habSearch?.image?.let {
                    iv_search?.applyStyle(it)
                }
                searchArea?.setOnClickListener {
                    model.habSearch?.action?.let { it1 -> executeAction(it1) }
                }
                divider?.visibility = VISIBLE
                model.habSearch?.label?.let {
                    et_search?.applyStyle(it)
                }
            } else {
                iv_search?.visibility = GONE
            }
            if (model.habContentState == HABContentAtomEnum.ASSISTANT && model.habAssistant?.image != null) {
                model.habAssistant?.image?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habAssistant?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                    }
                    if(model.habAssistant?.label?.accessibilityText?.isNotEmpty() == true){
                        rootRl?.contentDescription = model.habAssistant?.label?.accessibilityText
                    }else{
                        rootRl?.contentDescription = model.habAssistant?.label?.text
                    }
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
                if(model.habAssistant?.label?.accessibilityText?.isNotEmpty() == true){
                    iv_assistant?.contentDescription = model.habAssistant?.label?.accessibilityText
                }else{
                    iv_assistant?.contentDescription = model.habAssistant?.label?.text
                }
            } else if (model.habContentState == HABContentAtomEnum.LIVECHAT && model.habLiveChat?.image != null) {
                model.habLiveChat?.image?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChat?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                    }
                    if(model.habLiveChat?.label?.accessibilityText?.isNotEmpty() == true){
                        rootRl?.contentDescription = model.habLiveChat?.label?.accessibilityText
                    }else rootRl?.contentDescription = model.habLiveChat?.label?.text
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
                if(model.habLiveChat?.label?.accessibilityText?.isNotEmpty() == true){
                    iv_assistant?.contentDescription = model.habLiveChat?.label?.accessibilityText
                }else iv_assistant?.contentDescription = model.habLiveChat?.label?.text
            } else if (model.habContentState == HABContentAtomEnum.LIVE_CHAT_NEW_MESSAGE && model.habLiveChatNewMessages?.image != null) {
                model.habLiveChatNewMessages?.image?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChatNewMessages?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                    }
                    if(model.habLiveChatNewMessages?.label?.accessibilityText?.isNotEmpty() == true){
                        rootRl?.contentDescription = model.habLiveChatNewMessages?.label?.accessibilityText
                    }else rootRl?.contentDescription = model.habLiveChatNewMessages?.label?.text
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
                if(model.habLiveChatNewMessages?.label?.accessibilityText?.isNotEmpty() == true){
                    iv_assistant?.contentDescription = model.habLiveChatNewMessages?.label?.accessibilityText
                }else iv_assistant?.contentDescription = model.habLiveChatNewMessages?.label?.text
            }
            rootRl?.context?.resources?.getColor(R.color.black)?.let { et_search?.setTextColor(it) }
        }
    }

}
