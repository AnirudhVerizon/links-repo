open class HABContentMoleculeView : RelativeLayout, StyleApplier<HABContentModel>{

    @set:Inject
    internal var presenter: BasePresenter? = null
    var habClickListener : OnHabClickListener ?= null
    var iv_search : ImageAtomView? = null
    var et_search : LabelAtomView? = null
    var divider : RelativeLayout? = null
    var iv_assistant : ImageAtomView? = null
    var rootRl : RelativeLayout? = null
    var searchArea : RelativeLayout? = null

    constructor(context: Context) : this(context, null)
    constructor(context: Context, attrs: AttributeSet?) : this(context, attrs, 0)
    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {
        initView(context)
    }

    private fun initView(context: Context) {
        View.inflate(context, R.layout.hab_content_view, this)
        MobileFirstApplication.getObjectGraph(context?.applicationContext).inject(this)
        iv_search = findViewById(R.id.iv_search)
        et_search = findViewById(R.id.et_search)
        divider = findViewById(R.id.dividerContainer)
        iv_assistant = findViewById(R.id.iv_assistant)
        rootRl = findViewById(R.id.rootRl)
        searchArea = findViewById(R.id.searchArea)
    }

    private fun executeAction(actionModel: ActionModel) {
        val action = convertToAction(actionModel)
        habClickListener?.OnHabActionClick(action)
    }

    open fun initListener(onHabClickListener: OnHabClickListener){
        this.habClickListener = onHabClickListener
    }

    override fun applyStyle(model: HABContentModel) {
        applyCommonStyles(model)
        this.visibility = View.VISIBLE
        rootRl?.contentDescription = null
        iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES
        searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES
        et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_YES

        if (model.inverted) {
            //dark background
            rootRl?.let {
                rootRl?.setBackgroundDrawable(it.context.resources.getDrawable(R.drawable.background_hab_dark))
            }
            if (model.configuration != null && model.configuration.equals("dual") && model.habSearch?.image_inverted != null) {
                iv_search?.visibility = VISIBLE
                model.habSearch?.image_inverted?.let {
                    iv_search?.applyStyle(it)
                }
                searchArea?.setOnClickListener {
                    model.habSearch?.action?.let { it1 -> executeAction(it1) }
                }
                model.habSearch?.label?.let {
                    et_search?.applyStyle(it)
                }
                divider?.visibility = VISIBLE
            } else {
                iv_search?.visibility = GONE
            }
            if (model.habContentState == HABContentAtomEnum.ASSISTANT && model.habAssistant?.image_inverted != null) {
                model.habAssistant?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    model.habAssistant?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    divider?.visibility = GONE
                    searchArea?.setOnClickListener {
                        model.habAssistant?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habAssistant?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            } else if (model.habContentState == HABContentAtomEnum.LIVECHAT && model.habLiveChat?.image_inverted != null) {
                model.habLiveChat?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChat?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChat?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habLiveChat?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            } else if (model.habContentState == HABContentAtomEnum.LIVE_CHAT_NEW_MESSAGE && model.habLiveChatNewMessages?.image_inverted != null) {
                model.habLiveChatNewMessages?.image_inverted?.let {
                    iv_assistant?.applyStyle(it)
                }
                iv_assistant?.setOnClickListener {
                    model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                }
                if (model.configuration.equals("single")) {
                    divider?.visibility = GONE
                    model.habLiveChatNewMessages?.label?.let {
                        et_search?.applyStyle(it)
                    }
                    searchArea?.setOnClickListener {
                        model.habLiveChatNewMessages?.action?.let { it1 -> executeAction(it1) }
                    }
                    rootRl?.contentDescription = model.habLiveChatNewMessages?.label?.accessibilityText
                    iv_assistant?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    searchArea?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                    et_search?.importantForAccessibility = IMPORTANT_FOR_ACCESSIBILITY_NO
                }
            }






<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rootRl"
    android:layout_width="match_parent"
    android:layout_height="@dimen/view_margin_fifty_two_dp"
    android:layout_marginTop="@dimen/view_margin_twenty_dp"
    android:layout_marginHorizontal="@dimen/view_margin_sixteen_dp"
    android:layout_marginBottom="@dimen/view_margin_sixteen_dp"
    android:background="@drawable/background_hab_dark">


    <RelativeLayout
        android:id="@+id/searchArea"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_alignParentStart="true"
        android:layout_centerVertical="true"
        android:layout_toLeftOf="@+id/dividerContainer"
        android:focusable="false"
        android:focusableInTouchMode="false">

        <com.vzw.hss.myverizon.atomic.views.atoms.ImageAtomView
            android:id="@+id/iv_search"
            android:layout_width="@dimen/view_margin_twenty_six_dp"
            android:layout_height="@dimen/view_margin_twenty_six_dp"
            android:layout_alignParentStart="true"
            android:layout_centerVertical="true"
            android:src="@drawable/hab_search_white" />

        <com.vzw.hss.myverizon.atomic.views.atoms.LabelAtomView
            android:id="@+id/et_search"
            style="@style/LabelAtomStyle.RegularBodyLarge"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignWithParentIfMissing="true"
            android:layout_centerVertical="true"
            android:layout_marginStart="@dimen/view_margin_fourteen_dp"
            android:layout_marginEnd="@dimen/margin_16"
            android:layout_toEndOf="@id/iv_search"
            android:background="@color/transparent"
            android:gravity="center_vertical"
            android:imeOptions="actionSearch"
            android:text="How can we help?"
            android:textColor="@color/white" />
    </RelativeLayout>

    <RelativeLayout
        android:id="@+id/dividerContainer"
        android:layout_width="@dimen/view_height_one_dp"
        android:layout_height="match_parent"
        android:layout_centerVertical="true"
        android:layout_marginStart="@dimen/view_margin_eight_dp"
        android:layout_marginEnd="@dimen/view_margin_fifteen_dp"
        android:background="@color/vds_color_interactive_disabled_onlight"
        android:layout_toStartOf="@+id/iv_assistant"
        android:visibility="visible">


        <com.vzw.hss.myverizon.atomic.views.atoms.LineAtomView
            android:id="@+id/divider"
            android:layout_width="@dimen/view_height_one_dp"
            android:layout_height="match_parent"
            android:layout_centerVertical="true"
            android:layout_marginVertical="1dp"
            android:background="@color/vds_color_interactive_disabled_onlight"
            android:focusable="false"
            android:focusableInTouchMode="false"
            android:visibility="visible" />
    </RelativeLayout>

    <com.vzw.hss.myverizon.atomic.views.atoms.ImageAtomView
        android:id="@+id/iv_assistant"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_centerVertical="true"
        android:focusable="false"
        android:focusableInTouchMode="false"
        android:src="@drawable/hab_assistant_white" />
</RelativeLayout>
