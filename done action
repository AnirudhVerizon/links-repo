private fun saveRecentSearches(searchText: String) {
        val searchData = sharedPreferencesUtil?.nSearchList
        if (searchData?.isEmpty() == true) {
            sharedPreferencesUtil?.nSearchList = "$searchText,"
        } else {
            // Move the searchText to the front of the list if it already exists, otherwise add it.
            val newSearchData = StringBuilder(searchText)
            searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.forEach {
                newSearchData.append(",$it")
            }
            sharedPreferencesUtil?.nSearchList = newSearchData.toString()
        }
    }


    private fun showRecentSearches() {
        overlayView?.removeAllViews()
        overlayView?.visibility = View.VISIBLE
        searchListTemplateView?.visibility = View.GONE
        val searchData = sharedPreferencesUtil?.nSearchList
        if (searchData?.isEmpty() == true) {
            context?.let {
                overlayView?.setBackgroundColor(
                    ContextCompat.getColor(
                        it,
                        R.color.overlay_background
                    )
                )
            }
            return
        }

        searchData?.split(",")?.forEach { searchText ->
            if (searchText.isNotEmpty()) {
                val itemLayout = LinearLayout(context)
                itemLayout.orientation = LinearLayout.HORIZONTAL

                val itemLayoutParams = LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
                itemLayoutParams.setMargins(0,18,0,16)
                itemLayout.layoutParams= itemLayoutParams

                // TextView for the search text
                val textView = MFTextView(this.context)
                textView.textSize = 18f
                textView.text = searchText
                val textParams = LinearLayout.LayoutParams(0, LayoutParams.WRAP_CONTENT, 1f)
                textView.layoutParams = textParams

                // TextView for the "X" mark
                val deleteTextView = MFTextView(this.context)
                deleteTextView.textSize = 18f
                deleteTextView.text = "x"
                deleteTextView.setTypeface(null, Typeface.BOLD)

                deleteTextView.setOnClickListener {
                    deleteRecentSearch(searchText)
                }

                val deleteParams = LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
                deleteParams.setMargins(16, 0, 0, 0) // Optional margin to give some space between text and "X"
                deleteTextView.layoutParams = deleteParams


                // Add the TextView and the "X" mark TextView to the layout
                itemLayout.addView(textView)
                itemLayout.addView(deleteTextView)

                // Add the layout to the overlay view
                overlayView?.addView(itemLayout)

                context?.let {
                    overlayView?.setBackgroundColor(
                        ContextCompat.getColor(it, R.color.white)
                    )
                }
            }
        }
    }

    // Function to delete a specific recent search
    private fun deleteRecentSearch(searchText: String) {
        val searchData = sharedPreferencesUtil?.nSearchList
        val updatedSearchData = searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.joinToString(",")
        sharedPreferencesUtil?.nSearchList = updatedSearchData?.plus(",")
        showRecentSearches()  // Refresh the list after deletion
    }



                 action =
                            (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                        action?.analyticsData?.put(KEY_SEARCH_TERM, model.text.toString().trim())
