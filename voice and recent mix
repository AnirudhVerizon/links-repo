SearchTextFieldAtomEnum.ON_VOICE -> {
                        // Start Google Speech Recognizer

                        startSpeechRecognition()
                        Log.d("voicebtn","isclicked")
                        return
                    }
                }
            } else if (it.model is TagMoleculeModel) {
                val model: TagMoleculeModel = it.model as TagMoleculeModel
                action = model.action
                if (searchListTemplateView?.visibility == View.VISIBLE) {
                    searchListTemplateView?.visibility = View.GONE
                    searchListTemplateView?.isFocusable = false
                    overlayView?.visibility = View.GONE
                }
            } else {
                super.onChanged(it)
                return
            }

            action?.let { actionModel ->
                executeAction(actionModel, validRequestParams, it.requestParams)
            }
        }

        private fun startSpeechRecognition() {
            val speechRecognizer = SpeechRecognizer.createSpeechRecognizer(context)
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")
            }

            speechRecognizer.setRecognitionListener(object : RecognitionListener {
                override fun onReadyForSpeech(params: Bundle?) {
                    // Ready to receive speech
                }

                override fun onBeginningOfSpeech() {
                    // User has started speaking
                }

                override fun onRmsChanged(rmsdB: Float) {
                    // Sound level changed
                }

                override fun onBufferReceived(buffer: ByteArray?) {
                    // Buffer received
                }

                override fun onEndOfSpeech() {
                    // User has finished speaking
                }

                override fun onError(error: Int) {
                    // Handle error
                }

                override fun onResults(results: Bundle?) {
                    results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)?.let { result ->
                        val spokenText = result[0]
                        // Log the spoken text
                        Log.d("SpeechRecognizerResult", "Spoken Text: $spokenText")

                        // Trigger the done action with spoken text
                        val action = (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                        action?.analyticsData?.put(KEY_SEARCH_TERM, spokenText)
                        Log.d("SearchAction", "Executing search for: $spokenText")

                        // Set request parameters
                        action?.let { actionModel ->
                            val requestParams = hashMapOf<String, Any>(
                                "searchInput" to spokenText,
                                "currentPage" to "Done"
                            )
                            // Execute the action to trigger the search
                            executeAction(actionModel, true, requestParams)
                        }
                    }
                }

                override fun onPartialResults(partialResults: Bundle?) {
                    // Handle partial results
                }

                override fun onEvent(eventType: Int, params: Bundle?) {
                    // Handle events
                }
            })

            try {
                startActivityForResult(intent, 100)
                speechRecognizer.startListening(intent)
            } catch (e: ActivityNotFoundException) {
                // Handle the error (Toast, log, etc.)
            }
        }






recent searches
private fun saveRecentSearches(searchText: String) {
        val searchData = sharedPreferencesUtil?.nSearchList
        if (searchData?.isEmpty() == true) {
            sharedPreferencesUtil?.nSearchList = "$searchText,"
        } else {

            val newSearchData = StringBuilder(searchText)
            searchData?.split(",")?.filter { it.isNotEmpty() && it != searchText }?.forEach {
                newSearchData.append(",$it")
            }
            sharedPreferencesUtil?.nSearchList = newSearchData.toString()

            val maxSearches = 5
            val limitedSearchData = newSearchData.toString().split(",").take(maxSearches).joinToString(",")
            sharedPreferencesUtil?.nSearchList= "$limitedSearchData,"
        }


    }
